
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Wed Sep 22 17:09:10 CEST 2010
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.12joho 20081115 generated parser.
  * @version Wed Sep 22 17:09:10 CEST 2010
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\272\000\002\033\007\033\005\001\003\001\000" +
    "\014\003\007\000\007\002\002\003\002\006\003" +
    "\003\004\003\005\001\005\003\006\004\012\004" +
    "\015\004\016\004\017\005\053\000\017\003\020" +
    "\001\020\002\020\001\021\003\022\001\023\002" +
    "\023\000\024\004\025\001\025\001\025\001\026" +
    "\003\027\001\013\004\013\000\030\005\054\000" +
    "\030\002\031\003\047\002\047\000\032\002\046" +
    "\002\046\001\045\002\045\002\045\002\045\001" +
    "\035\002\035\000\037\003\037\001\040\003\040" +
    "\001\041\001\041\003\041\004\042\001\042\003" +
    "\043\001\043\001\044\001\044\003\044\003\034" +
    "\001\034\001\034\001\034\001\036\001\036\001" +
    "\036\001\036\001\036\001\036\001\036\001\036" +
    "\001\036\001\036\001\036\001\036\001\036\001" +
    "\036\001\036\001\036\001\036\001\011\000\050" +
    "\000\050\002\051\002\052\002\055\000\055\002" +
    "\232\u04c2\u014c\u047c\254\256\232\304\232\246\340" +
    "\232\232\232\232\232\232\232\232\232\232\232" +
    "\232\232\232\232\232\232\232\u017e\u0196\232\232" +
    "\232\u017c\u01b2\232\232\u0282\u024e\u020c\232\u0128\234" +
    "\232\u043a\u03f8\u04ce\232\372\u0128\u0140\232\232\232" +
    "\u0248\u01e8\u01e8\u021e\232\u01b6\u01ae\274\u03b6\360\354" +
    "\u0374\232\232\u0206\232\232\232\u01c4\u0190\232\232" +
    "\324\u01c8\232\232\u01dc\u016a\232\u0266\232\u0206\u01a6" +
    "\232\u0210\u0206\254\u0202\u01fe\u01fe\u01ec\232\u0170\u01ca" +
    "\232\232\232\u01bc\u0164\232\u0332\u02f0\232\232\256" +
    "\246\232\u0122\240\236\232\u02ae\u026c\376\232\232" +
    "\u019a\244\232\u01d8\u01d4\232\232\u0128\232\232\232" +
    "\232\274\232\u0100\232\u014e\232\242\u0182\232\232" +
    "\u0478\232\232\232\232\232\232\u022a\232\232\232" +
    "\232\u051c\000\000\000\260\000\054\000\060\070" +
    "\000\254\220\222\224\226\230\234\236\240\242" +
    "\244\246\250\252\232\216\214\152\000\016\002" +
    "\056\264\110\254\210\212\216\214\000\064\160" +
    "\050\010\000\000\000\262\000\000\000\066\052" +
    "\052\000\000\000\000\150\156\000\000\000\000" +
    "\000\000\020\070\000\074\076\100\000\000\206" +
    "\204\000\000\062\176\172\000\166\174\162\000" +
    "\000\014\000\220\000\000\000\000\032\110\000" +
    "\000\104\116\266\000\000\164\000\000\046\154" +
    "\256\256\022\000\256\256\026\000\000\000\106" +
    "\072\000\270\170\202\200\036\040\000\042\044" +
    "\030\034\000\102\000\124\000\112\270\000\132" +
    "\142\146\272\126\024\120\122\134\000\140\136" +
    "\130\144\207\000\052\000\161\000\160\000\212" +
    "\000\171\000\155\000\103\013\103\015\003\000" +
    "\154\000\004\075\137\141\010\013\010\015\161" +
    "\u0103\160\u0101\204\223\204\004\155\375\137\143" +
    "\075\261\132\335\154\373\207\u0117\132\131\052" +
    "\161\103\017\006\077\114\223\114\006\207\107" +
    "\207\111\010\017\207\225\011\105\207\227\207" +
    "\u0119\132\337\011\027\011\031\011\033\011\035" +
    "\011\037\011\041\011\043\011\045\011\047\204" +
    "\107\204\111\165\223\204\225\100\271\204\227" +
    "\077\267\011\051\011\053\011\055\011\057\060" +
    "\211\114\107\114\111\011\061\114\225\206\u0113" +
    "\114\227\011\107\011\111\157\025\011\113\206" +
    "\u0115\011\115\157\027\157\031\157\033\157\035" +
    "\157\037\157\041\157\043\157\045\157\047\165" +
    "\107\165\111\062\223\165\225\177\315\165\227" +
    "\051\131\157\051\157\053\157\055\157\057\061" +
    "\213\061\215\061\217\157\061\001\013\001\015" +
    "\157\237\177\u0111\051\157\146\025\157\063\210" +
    "\u0123\157\065\146\027\146\031\146\033\146\035" +
    "\146\037\146\041\146\043\146\045\146\047\062" +
    "\107\062\111\001\017\062\225\121\315\062\227" +
    "\140\355\146\051\146\053\146\055\146\057\041" +
    "\141\035\000\034\127\146\061\035\133\034\131" +
    "\146\237\121\317\041\143\126\025\146\063\111" +
    "\307\146\065\126\027\126\031\126\033\126\035" +
    "\126\037\126\041\126\043\126\045\126\047\213" +
    "\107\213\111\126\327\213\225\074\257\213\227" +
    "\042\151\126\051\126\053\126\055\126\057\073" +
    "\255\170\107\170\111\126\061\170\225\145\363" +
    "\170\227\141\357\141\361\067\025\126\063\115" +
    "\114\126\065\067\027\067\031\067\033\067\035" +
    "\067\037\067\041\067\043\067\045\067\047\110" +
    "\107\110\111\174\161\110\225\173\161\110\227" +
    "\120\161\067\051\067\053\067\055\067\057\135" +
    "\345\135\347\070\251\067\061\125\325\125\155" +
    "\067\237\047\153\047\155\225\025\067\063\136" +
    "\351\067\065\225\027\225\031\225\033\225\035" +
    "\225\037\225\041\225\043\225\045\225\047\104" +
    "\107\104\111\134\343\104\225\133\341\104\227" +
    "\131\333\225\051\225\053\225\055\225\057\130" +
    "\331\071\107\071\111\225\061\071\225\232\001" +
    "\071\227\046\204\046\204\164\025\225\063\232" +
    "\001\225\065\164\027\164\031\164\033\164\035" +
    "\164\037\164\041\164\043\164\045\164\047\066" +
    "\107\066\111\232\001\066\225\232\001\066\227" +
    "\232\001\164\051\164\053\164\055\164\057\045" +
    "\206\045\206\232\001\164\061\123\321\123\323" +
    "\232\001\232\001\232\001\163\025\164\063\232" +
    "\001\164\065\163\027\163\031\163\033\163\035" +
    "\163\037\163\041\163\043\163\045\163\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\163\051\163\053\163\055\163\057\232" +
    "\001\232\001\232\001\163\061\232\001\232\001" +
    "\232\001\232\001\232\001\151\025\163\063\232" +
    "\001\163\065\151\027\151\031\151\033\151\035" +
    "\151\037\151\041\151\043\151\045\151\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\151\051\151\053\151\055\151\057\232" +
    "\001\232\001\232\001\151\061\232\001\232\001" +
    "\232\001\232\001\232\001\150\025\151\063\232" +
    "\001\151\065\150\027\150\031\150\033\150\035" +
    "\150\037\150\041\150\043\150\045\150\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\150\051\150\053\150\055\150\057\232" +
    "\001\232\001\232\001\150\061\232\001\232\001" +
    "\232\001\232\001\232\001\101\025\150\063\232" +
    "\001\150\065\101\027\101\031\101\033\101\035" +
    "\101\037\101\041\101\043\101\045\101\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\101\051\101\053\101\055\101\057\232" +
    "\001\232\001\232\001\101\061\232\001\232\001" +
    "\232\001\232\001\232\001\076\025\101\063\232" +
    "\001\101\065\076\263\076\031\076\033\076\035" +
    "\076\037\076\041\076\043\076\045\076\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\076\051\076\053\076\055\076\057\232" +
    "\001\232\001\232\001\076\061\232\001\232\001" +
    "\232\001\232\001\232\001\055\025\076\063\232" +
    "\001\076\065\055\027\055\031\055\033\055\035" +
    "\055\037\055\041\055\043\055\045\055\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\055\051\055\053\055\055\055\057\232" +
    "\001\232\001\232\001\055\061\232\001\232\001" +
    "\232\001\232\001\232\001\054\025\055\063\232" +
    "\001\055\065\054\027\054\031\054\033\054\035" +
    "\054\037\054\041\054\043\054\045\054\047\232" +
    "\001\232\001\232\001\232\001\232\001\232\001" +
    "\232\001\054\051\054\053\054\055\054\057\232" +
    "\001\232\001\232\001\054\061\232\001\232\001" +
    "\232\001\216\000\232\001\002\025\054\063\232" +
    "\001\054\065\002\027\002\031\002\033\002\035" +
    "\002\037\002\041\002\043\002\045\002\047\216" +
    "\u0129\232\001\216\u012b\232\001\232\001\232\001" +
    "\232\001\002\051\002\053\002\055\002\057\232" +
    "\001\232\001\232\001\002\061\216\u012d\232\001" +
    "\232\001\232\001\232\001\216\u012f\002\063\000" +
    "\003\002\065\000\005\000\012\232\001\000\012" +
    "\000\012\000\012\000\012\000\012\000\012\056" +
    "\173\056\175\056\013\056\015\056\177\056\201" +
    "\232\001\232\001\232\001\232\001\232\001\232" +
    "\001\232\001\232\001\232\001\232\001\000\012" +
    "\232\001\232\001\232\001\232\001\232\001\056" +
    "\017\000\012\232\001\232\001\232\001\232\001" +
    "\232\001\056\203\232\001\232\001\232\001\232" +
    "\001\236\005\006\174\136\135\135\003\001\171" +
    "\012\202\201\102\102\056\200\102\176\102\057" +
    "\102\010\011\102\102\103\011\047\047\007\136" +
    "\175\004\077\222\136\206\206\050\110\033\051" +
    "\161\052\145\171\012\010\204\022\044\103\115" +
    "\207\053\077\207\051\125\125\114\116\075\223" +
    "\115\000\204\162\057\050\215\050\116\165\062" +
    "\140\165\161\114\216\217\220\063\063\033\051" +
    "\140\120\177\122\123\033\132\033\051\076\120" +
    "\121\122\123\141\141\134\144\165\161\142\115" +
    "\026\010\230\066\006\002\205\005\136\030\231" +
    "\142\133\013\033\051\203\120\072\172\123\040" +
    "\011\072\117\137\035\052\040\011\010\043\041" +
    "\144\121\033\051\115\174\033\051\130\173\033" +
    "\073\074\033\034\071\145"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              java_cup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec* code_parts symbol+ precedence_list start_spec production+ 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 27, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol+ precedence_list start_spec production+ 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 27, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 12, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_parts ::= 
          case 6:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 7:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 8:
            {
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 9:
            {
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 12:
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 13:
            {
              java_cup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
          case 14:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 6, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
          case 15:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 10, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING opt_semi 
          case 16:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING opt_semi 
          case 17:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 14, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 18:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 19:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 43, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 20:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 21:
            {
 _cur_is_nonterm = false; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 22:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 23:
            {
 _cur_is_nonterm = true; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 24:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 17, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 25:
            {
              java_cup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 18, sym_id$, sym_id$);
            }

          // precedence_list ::= precedence_list preced 
          case 26:
            {
              return parser.getSymbolFactory().newSymbol("precedence_list", 19, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= 
          case 27:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("precedence_list", 19, CUP$sym, CUP$sym);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 28:
            {
              return parser.getSymbolFactory().newSymbol("preced", 20, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 29:
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 30:
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 31:
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 32:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 22, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 33:
            {
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 23, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 34:
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 11, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 35:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 11, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 36:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 24, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 37:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 44, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 38:
            {
              return parser.getSymbolFactory().newSymbol("production", 24, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 39:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 40:
            {
              symbol RESULT;
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 39, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 41:
            {
              symbol RESULT;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 39, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part* prod_precedence 
          case 42:
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> CUP$list$rhs = (java.util.ArrayList<production_part>) rhs$.value;
              production_part[] rhs = CUP$list$rhs.toArray(new production_part[CUP$list$rhs.size()]);

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<production_part> rhs_list = 
	      	new ArrayList<production_part>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.build_production(lhs_nt, rhs_list, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 26, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id opt_label_id 
          case 43:
            {
              production_part RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              symbol symb = (symbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new symbol_part(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 38, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 44:
            {
              production_part RESULT;
              java_cup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 38, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 45:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.star_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 46:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.plus_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 47:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.opt_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 48:
            {
              symbol RESULT;
              java_cup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   symbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	       if (ErrorManager.getManager().getErrorCount() == 0)
	         ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			        "\" has not been declared");
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, symid$, symid$, RESULT);
            }

          // opt_label_id ::= COLON robust_id 
          case 49:
            {
              String RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("opt_label_id", 29, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // opt_label_id ::= 
          case 50:
            {
              String RESULT;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_label_id", 29, CUP$sym, CUP$sym, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 51:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 31, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 52:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 31, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 53:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // import_id ::= multipart_id 
          case 54:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 32, id$, id$, RESULT);
            }

          // type_id ::= multipart_id 
          case 55:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, id$, RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 56:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 57:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 58:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
 RESULT = arg; 
              return parser.getSymbolFactory().newSymbol("typearglist", 34, arg$, arg$, RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 59:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 34, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 60:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("typeargument", 35, id$, id$, RESULT);
            }

          // typeargument ::= wildcard 
          case 61:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 1);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w; 
              return parser.getSymbolFactory().newSymbol("typeargument", 35, w$, w$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 62:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 36, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 63:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 36, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 64:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 36, w$, id$, RESULT);
            }

          // symbol_id ::= ID 
          case 65:
            {
              String RESULT;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, the_id$, the_id$, RESULT);
            }

          // symbol_id ::= OPTION 
          case 66:
            {
              String RESULT;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= SUPER 
          case 67:
            {
              String RESULT;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= EXTENDS 
          case 68:
            {
              String RESULT;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ID 
          case 69:
            {
              String RESULT;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("robust_id", 30, the_id$, the_id$, RESULT);
            }

          // robust_id ::= OPTION 
          case 70:
            {
              String RESULT;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= CODE 
          case 71:
            {
              String RESULT;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ACTION 
          case 72:
            {
              String RESULT;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PARSER 
          case 73:
            {
              String RESULT;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= TERMINAL 
          case 74:
            {
              String RESULT;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NON 
          case 75:
            {
              String RESULT;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONTERMINAL 
          case 76:
            {
              String RESULT;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= INIT 
          case 77:
            {
              String RESULT;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= SCAN 
          case 78:
            {
              String RESULT;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= WITH 
          case 79:
            {
              String RESULT;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= START 
          case 80:
            {
              String RESULT;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PRECEDENCE 
          case 81:
            {
              String RESULT;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= LEFT 
          case 82:
            {
              String RESULT;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= RIGHT 
          case 83:
            {
              String RESULT;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONASSOC 
          case 84:
            {
              String RESULT;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= error 
          case 85:
            {
              String RESULT;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // opt_semi ::= 
          case 86:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_semi", 9, CUP$sym, CUP$sym);
            }

          // import_spec* ::= 
          case 87:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec*", 40, CUP$sym, CUP$sym);
            }

          // import_spec* ::= import_spec* import_spec 
          case 88:
            {
              return parser.getSymbolFactory().newSymbol("import_spec*", 40, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol+ ::= symbol+ symbol 
          case 89:
            {
              return parser.getSymbolFactory().newSymbol("symbol+", 41, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production+ ::= production+ production 
          case 90:
            {
              return parser.getSymbolFactory().newSymbol("production+", 42, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // prod_part* ::= 
          case 91:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$sym, CUP$sym, new java.util.ArrayList<production_part>());
            }

          // prod_part* ::= prod_part* prod_part 
          case 92:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> RESULT = (java.util.ArrayList<production_part>) CUP$0.value;
              RESULT.add((production_part) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
