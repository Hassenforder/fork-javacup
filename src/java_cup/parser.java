
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sun Nov 09 14:44:09 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sun Nov 09 14:44:09 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String action_table() { 
    return
    "\000\342\000\002\056\000\000\010\000\005\057" +
    "\000\001\004\001\001\002\002\002\001\014\003" +
    "\005\001\005\001\005\001\005\001\004\000\004" +
    "\002\003\004\010\004\015\004\016\004\011\002" +
    "\011\001\060\000\017\004\017\002\061\000\017" +
    "\004\017\002\017\003\017\003\034\002\035\002" +
    "\020\003\020\001\021\003\021\001\030\001\030" +
    "\001\033\002\033\001\062\000\031\005\063\000" +
    "\031\005\064\000\031\005\032\003\032\001\042" +
    "\001\043\001\065\000\012\005\012\001\013\002" +
    "\013\001\066\000\022\005\067\000\022\003\025" +
    "\003\025\001\055\002\055\001\026\002\054\002" +
    "\054\001\053\002\053\001\041\002\041\001\050" +
    "\003\050\004\050\001\045\001\045\003\046\001" +
    "\046\001\047\001\047\003\047\003\051\003\051" +
    "\001\052\001\052\003\023\001\024\001\036\001" +
    "\036\001\037\001\037\001\040\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\007\002" +
    "\007\001\006\000\006\001\027\000\000\u0442\u0166" +
    "\004\u0166\000\u0166\342\u0166\000\u0166\002\u0176\000" +
    "\u0166\342\u0166\016\u0166\036\u0166\022\u01b4\000\u0166" +
    "\020\u01c4\000\u01f6\000\u016c\000\u0166\032\u0166\026" +
    "\u0206\342\u0166\034\u0166\054\u0166\000\u0166\030\u0166" +
    "\040\u0168\000\u0166\334\u0166\000\u017a\000\u0238\000" +
    "\u0166\312\u0178\270\u0166\324\u0166\326\u017c\000\u0168" +
    "\056\u0166\302\u0166\314\u0166\272\u0166\316\u0166\104" +
    "\u0166\062\u0166\222\u018c\330\u0166\276\u0166\322\u0166" +
    "\320\u01ba\246\u0166\274\u0166\306\u0166\310\u0166\304" +
    "\u0166\300\u0276\000\u02b4\000\u0166\270\u0166\330\u0166" +
    "\216\u0166\224\u0176\230\u0166\232\u0170\234\u01e0\000" +
    "\u02f2\000\u0166\220\u0166\226\u0330\000\u036e\000\u0178" +
    "\236\u017e\000\u0166\250\u0188\240\u0166\072\u01a2\000" +
    "\u0166\252\u0166\060\u0166\076\u01a4\000\u0166\102\u01a4" +
    "\000\u01d2\336\u0166\050\u0166\340\u01aa\000\u01d6\336" +
    "\u0166\046\u01cc\000\u01f8\336\u0166\042\u01d6\000\u0202" +
    "\336\u0166\044\u0166\052\u0166\120\u01fe\112\u0210\342" +
    "\u0166\114\u0228\000\u0166\132\u0166\126\u0166\122\u0228" +
    "\000\u0166\262\u0216\000\u0166\264\u0166\142\u0166\144" +
    "\u0166\140\u0166\124\u0256\000\u0166\136\u0258\000\u0242" +
    "\000\u0166\130\u0266\000\u0256\000\u0166\134\u028e\000" +
    "\u0220\000\u0166\152\u0290\000\u0166\256\u0166\260\u0166" +
    "\146\u0224\000\u0166\150\u0248\164\u0166\156\u0292\006" +
    "\u0166\160\u0250\000\u0166\342\u0166\172\u0294\000\u02e2" +
    "\342\u0166\204\u0166\200\u0166\210\u025a\342\u0294\000" +
    "\u0166\202\u0166\176\u0166\174\u0166\206\u03ac\000\u0166" +
    "\214\u0166\212\u0166\266\u0166\162\u0166\342\u0166\170" +
    "\u0166\154\u0282\000\u0166\166\u0166\116\u0166\332\u02be" +
    "\270\u0166\110\u0166\070\u0274\064\u0290\330\u02cc\000" +
    "\u0166\100\u026e\000\u0166\254\u0166\106\u0166\074\u028c" +
    "\000\u0166\066\u02f0\244\u02d2\000\u0166\024\u03ea\000" +
    "\u0166\242\u0316\012\u02d4\000\u0166\014\u03fc\342\u02d8" +
    "\342\u030a\000\u030c\010\003\011\000\003\002\013" +
    "\010\025\024\257\027\251\263\000\001\067\001" +
    "\035\005\155\016\u0133\031\243\005\111\005\135" +
    "\005\125\005\145\005\105\005\137\005\141\005" +
    "\071\005\107\032\233\035\252\035\252\040\225" +
    "\040\227\041\207\001\061\005\113\005\131\005" +
    "\127\005\075\051\215\071\207\102\207\005\143" +
    "\073\201\073\203\103\211\005\077\012\155\005" +
    "\153\105\207\012\111\012\135\012\125\012\145" +
    "\012\105\012\137\012\141\012\071\012\107\014" +
    "\057\014\051\014\067\014\035\014\063\014\065" +
    "\055\151\012\113\012\131\012\127\012\075\107" +
    "\221\113\221\115\235\012\143\116\241\121\245" +
    "\122\241\012\077\055\147\012\153\015\u013d\014" +
    "\061\074\173\015\111\015\135\015\125\015\145" +
    "\015\105\015\137\015\141\015\071\015\107\124" +
    "\253\125\241\021\067\021\035\074\175\127\261" +
    "\130\241\015\113\015\131\015\127\015\075\134" +
    "\277\135\351\143\315\015\143\021\277\145\325" +
    "\145\327\015\077\164\355\015\u0135\033\123\021" +
    "\061\172\367\033\111\033\135\033\125\033\145" +
    "\033\105\033\137\033\141\033\071\033\107\137" +
    "\305\137\303\137\301\153\315\155\315\156\337" +
    "\156\327\033\113\033\131\033\127\033\075\160" +
    "\315\143\311\174\260\033\143\161\345\161\327" +
    "\200\u0103\033\077\063\155\033\073\210\u011d\063" +
    "\111\063\135\063\125\063\145\063\105\063\137" +
    "\063\141\063\071\063\107\163\371\166\361\176" +
    "\371\211\315\153\311\155\311\226\u012f\063\113" +
    "\063\131\063\127\063\075\235\207\160\311\236" +
    "\u0149\063\143\203\u0125\241\u0145\063\167\063\077" +
    "\064\155\063\153\203\u0127\064\111\064\135\064" +
    "\125\064\145\064\105\064\137\064\141\064\071" +
    "\064\107\245\u0145\163\357\166\357\176\357\211" +
    "\311\232\254\232\254\064\113\064\131\064\127" +
    "\064\075\204\315\237\u0141\237\u0143\064\143\250" +
    "\u0153\255\u015d\260\351\064\077\075\155\064\153" +
    "\263\000\075\111\075\135\075\125\075\145\075" +
    "\105\075\137\075\141\075\071\075\107\261\371" +
    "\262\371\247\u0155\204\u0113\263\000\263\000\263" +
    "\000\075\113\075\131\075\127\075\075\263\000" +
    "\204\311\204\u010f\075\143\247\147\263\000\075" +
    "\167\075\077\100\155\075\153\254\151\100\111" +
    "\100\135\100\125\100\145\100\105\100\137\100" +
    "\141\100\071\100\107\263\000\261\357\262\357" +
    "\254\147\263\000\263\000\263\000\100\113\100" +
    "\131\100\127\100\075\263\000\263\000\263\000" +
    "\100\143\263\000\263\000\263\000\100\077\101" +
    "\155\100\153\263\000\101\111\101\135\101\125" +
    "\101\145\101\105\101\137\101\141\101\071\101" +
    "\107\263\000\263\000\263\000\263\000\263\000" +
    "\263\000\263\000\101\113\101\131\101\127\101" +
    "\075\263\000\263\000\263\000\101\143\263\000" +
    "\263\000\263\000\101\077\216\155\101\153\263" +
    "\000\216\111\216\135\216\125\216\145\216\105" +
    "\216\137\216\141\216\071\216\107\263\000\263" +
    "\000\263\000\263\000\263\000\263\000\263\000" +
    "\216\113\216\131\216\127\216\075\263\000\263" +
    "\000\263\000\216\143\263\000\263\000\263\000" +
    "\216\077\252\155\216\153\263\000\252\111\252" +
    "\135\252\125\252\145\252\105\252\137\252\141" +
    "\252\071\252\107\263\000\263\000\252\u0157\257" +
    "\067\257\035\263\000\263\000\252\113\252\131" +
    "\252\127\252\075\263\000\263\000\263\000\252" +
    "\143\263\000\257\277\263\000\252\077\263\000" +
    "\252\153\263\000\263\000\257\061\263\000\263" +
    "\000\263\000\263\000\263\000\263\000\263\000" +
    "\000\u0148\263\263\263\263\263\263\264\263\263" +
    "\263\264\263\300\301\263\263\263\330\263\263" +
    "\263\263\263\263\263\263\263\320\263\263\263" +
    "\263\263\264\263\263\263\263\263\263\263\263" +
    "\263\263\263\263\263\263\263\263\263\327\265" +
    "\263\263\263\263\263\263\263\263\334\263\263" +
    "\276\341\263\263\263\263\263\332\263\263\263" +
    "\263\263\263\263\263\263\263\265\263\263\267" +
    "\263\263\270\263\263\263\263\272\263\263\272" +
    "\277\303\355\263\263\263\263\263\263\263\353" +
    "\263\367\263\263\371\263\263\u010c\263\263\265" +
    "\263\263\302\263\263\302\263\366\334\263\u010a" +
    "\263\263\376\263\263\263\271\u0103\263\263\263" +
    "\263\u0103\263\263\263\263\u010e\263\263\263\263" +
    "\263\263\263\263\263\367\263\263\263\300\263" +
    "\263\263\u011b\263\263\263\263\u0109\263\377\263" +
    "\263\u012a\u0126\u0129\u0120\003\006\000\010\014\000" +
    "\117\015\123\257\126\131\013\000\000\023\020" +
    "\163\026\114\015\025\021\007\011\230\017\022" +
    "\023\217\165\237\171\243\233\000\050\050\067" +
    "\215\254\247\250\234\015\040\002\050\046\107" +
    "\050\055\132\105\055\040\235\047\046\160\136" +
    "\135\133\155\134\050\143\111\172\055\226\041" +
    "\050\074\070\072\055\050\071\077\072\055\050" +
    "\071\145\225\055\150\102\150\154\147\151\147" +
    "\156\200\161\177\213\150\176\150\151\147\151" +
    "\147\210\175\203\202\205\150\220\224\205\214" +
    "\221\245\212\177\206\237\067\255\233\261\015" +
    "\225\000\262\000\204\000\246\132\204\175\000" +
    "\165\177\000\000\136\260\133\000\134\000\177";
  }

  /** Instance of action encapsulation class. */
  protected CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" as a terminal */
    symbols.put("error", new symbol_part(terminal.error));

    /* declare start non terminal */
    non_terms.put("$START", non_terminal.START_nt);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$left, CUP$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0",46, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-8);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1",47, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-2);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2",48, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3",49, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term",28, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term",29, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4",50, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5",51, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6",52, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id",34, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id",35, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.peek();
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7",53, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH nt_id NT$7 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.elementAt(CUP$size-3);
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              java_cup.runtime.Symbol CUP$symlhs_id = CUP$stack.peek();
              int lhs_idleft = CUP$symlhs_id.left;
              int lhs_idright = CUP$symlhs_id.right;
              String lhs_id = (String) CUP$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8",54, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= nt_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              int lhs_idleft = CUP$left.left;
              int lhs_idright = CUP$left.right;
              String lhs_id = (String) CUP$left.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$9",55, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_nameleft = CUP$right.left;
              int term_nameright = CUP$right.right;
              String term_name = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int precsymleft = CUP$right.left;
              int precsymright = CUP$right.right;
              symbol precsym = (symbol) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int rhsleft = CUP$left.left;
              int rhsright = CUP$left.right;
              ArrayList<production_part> rhs = (ArrayList<production_part>) CUP$left.value;

	  if (lhs_nt != null) 
	    {
	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}

	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs",22, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int prodleft = CUP$right.left;
              int prodright = CUP$right.right;
              production_part prod = (production_part) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              ArrayList<production_part> list = (ArrayList<production_part>) CUP$left.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = new ArrayList<production_part>(); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int symidleft = CUP$left.left;
              int symidright = CUP$left.right;
              String symid = (String) CUP$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int code_strleft = CUP$right.left;
              int code_strright = CUP$right.right;
              String code_str = (String) CUP$right.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_label ::= empty 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int another_idleft = CUP$right.left;
              int another_idright = CUP$right.right;
              String another_id = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symtypes = CUP$stack.elementAt(CUP$size-2);
              int typesleft = CUP$symtypes.left;
              int typesright = CUP$symtypes.right;
              String types = (String) CUP$symtypes.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int an_idleft = CUP$right.left;
              int an_idright = CUP$right.right;
              String an_id = (String) CUP$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              String list = (String) CUP$left.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeargument ::= wildcard 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int wleft = CUP$right.left;
              int wright = CUP$right.right;
              String w = (String) CUP$right.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "?"; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_idleft = CUP$right.left;
              int term_idright = CUP$right.right;
              String term_id = (String) CUP$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id",19, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_non_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int non_term_idleft = CUP$right.left;
              int non_term_idright = CUP$right.right;
              String non_term_id = (String) CUP$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id",20, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nt_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // symbol_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // label_id ::= robust_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id",32, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "code"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "action"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "parser"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "terminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "non"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonterminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "init"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "scan"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "with"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "start"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "precedence"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "left"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "right"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonassoc"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= SUPER 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "super"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // robust_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NON TERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // empty ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty",23, CUP$right, CUP$right);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

