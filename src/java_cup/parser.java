
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Wed Sep 22 19:45:26 CEST 2010
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.12joho 20081115 generated parser.
  * @version Wed Sep 22 19:45:26 CEST 2010
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\210\000\002\031\007\031\005\001\003\001\000" +
    "\013\003\007\000\007\002\002\003\002\006\003" +
    "\003\004\003\005\001\005\003\006\004\011\004" +
    "\014\004\015\004\016\005\053\000\016\003\017" +
    "\001\017\002\017\001\020\003\021\001\022\004" +
    "\023\001\023\001\023\001\024\003\025\001\012" +
    "\004\012\000\026\005\054\000\026\002\027\003" +
    "\045\002\045\000\030\002\044\002\044\001\043" +
    "\002\043\002\043\002\043\001\033\002\035\003" +
    "\035\001\036\003\037\003\037\004\040\003\042" +
    "\001\042\003\042\003\034\001\052\000\046\000" +
    "\046\002\047\002\050\000\050\002\051\002\056" +
    "\000\055\000\055\002\215\u047d\u01c9\u0437\231\233" +
    "\215\223\215\u018d\233\215\215\u026f\221\215\215" +
    "\215\u01f1\u01bb\215\u02cd\u0271\u01a1\217\215\u03f5\u03b3" +
    "\u0489\215\u013d\u0279\u013d\215\215\215\u0321\u0217\u01a3" +
    "\u030b\215\u0229\u01a5\227\u0371\313\251\u032f\215\u0187" +
    "\u02df\215\215\215\u02c9\u018d\u01e7\u0111\215\215\215" +
    "\u0125\u01e9\u01a9\u0225\u01ad\215\u0161\u0265\u025f\u01c9\u0251" +
    "\u0223\u0219\u0177\u01ef\u016d\215\363\215\u01b9\215\u011f" +
    "\215\u02ed\u02ab\215\215\u0285\u0283\215\335\u024d\265" +
    "\u0269\215\u0227\373\215\215\u029d\225\u0267\u01f9\215" +
    "\u02eb\u0227\u01ed\u0225\u01e3\215\215\343\u0167\233\u01e5" +
    "\215\215\215\215\271\215\375\215\u014b\215\223" +
    "\u0287\215\215\u0433\215\215\215\215\215\215\u01e5" +
    "\215\215\215\215\u04d7\000\000\000\170\000\054" +
    "\000\060\176\000\164\144\000\016\002\056\174" +
    "\104\164\064\144\000\050\050\010\000\000\000" +
    "\172\000\000\000\200\052\052\000\000\000\000" +
    "\142\000\000\000\000\000\000\000\020\176\000" +
    "\070\072\074\000\000\000\000\062\150\156\000" +
    "\000\000\000\000\014\000\000\144\000\000\000" +
    "\032\000\104\000\100\000\112\000\202\000\152" +
    "\000\000\046\146\166\166\022\000\166\166\000" +
    "\026\000\000\102\066\000\206\154\154\154\154" +
    "\162\162\160\160\036\040\000\000\000\000\042" +
    "\044\034\030\000\076\000\120\000\106\206\000" +
    "\136\126\204\210\122\024\114\116\130\000\134" +
    "\132\124\140\172\000\027\000\015\000\175\000" +
    "\144\000\015\065\003\000\011\045\004\035\052" +
    "\207\006\037\011\027\011\027\011\027\011\027" +
    "\011\027\011\027\011\027\011\027\011\027\134" +
    "\000\161\243\167\155\167\004\172\375\055\217" +
    "\027\111\011\027\011\027\011\027\011\027\172" +
    "\377\172\377\134\351\172\377\161\367\172\377" +
    "\172\u0101\011\047\011\047\132\025\011\051\054" +
    "\215\011\051\132\027\132\027\132\027\132\027" +
    "\132\027\132\027\132\027\132\027\132\027\167" +
    "\157\167\157\140\155\167\157\157\243\167\157" +
    "\157\063\132\027\132\027\132\027\132\027\115" +
    "\305\115\307\070\155\070\006\157\111\171\371" +
    "\132\167\157\367\157\113\121\025\132\027\171" +
    "\373\132\027\121\027\121\027\121\027\121\027" +
    "\121\027\121\027\121\027\121\027\121\027\140" +
    "\157\140\157\037\155\140\157\074\243\140\157" +
    "\074\063\121\027\121\027\121\027\121\027\070" +
    "\157\070\157\035\143\070\157\074\111\070\157" +
    "\121\167\074\245\074\113\102\025\121\027\173" +
    "\u0109\121\027\102\117\102\117\102\117\102\117" +
    "\102\117\102\117\102\117\102\117\102\117\037" +
    "\157\037\157\102\255\037\157\160\243\037\157" +
    "\113\303\102\117\102\117\102\117\102\117\111" +
    "\275\111\277\060\013\060\015\160\111\010\013" +
    "\010\015\160\367\026\000\045\025\102\117\066" +
    "\235\102\117\045\027\045\027\045\027\045\027" +
    "\045\027\045\027\045\027\045\027\045\027\060" +
    "\017\051\203\026\063\010\017\076\243\100\253" +
    "\100\107\045\027\045\027\045\027\045\027\026" +
    "\111\022\103\001\013\001\015\026\113\117\311" +
    "\045\167\076\245\105\263\210\025\045\027\105" +
    "\063\045\027\210\u0119\210\u0119\210\u0119\210\u0119" +
    "\210\u0119\210\u0119\210\u0119\210\u0119\210\u0119\001" +
    "\017\162\243\105\265\075\243\112\073\021\073" +
    "\067\110\210\u0119\210\u0119\210\u0119\210\u0119\154" +
    "\111\112\075\021\075\075\111\162\367\152\111" +
    "\075\245\162\247\162\251\137\025\210\u0119\146" +
    "\111\210\u0119\137\221\137\221\137\221\137\221" +
    "\137\221\137\221\137\221\137\221\137\221\077" +
    "\243\050\203\153\063\151\063\050\205\044\165" +
    "\133\000\137\221\137\221\137\221\137\221\153" +
    "\111\151\111\110\273\077\245\153\113\151\113" +
    "\077\247\077\251\133\347\135\025\137\221\107" +
    "\271\137\221\135\353\135\353\135\353\135\353" +
    "\135\353\135\353\135\353\135\353\135\353\130" +
    "\000\127\000\145\063\014\061\025\105\025\107" +
    "\014\063\135\353\135\353\135\353\135\353\145" +
    "\111\106\267\130\335\127\333\145\113\036\145" +
    "\036\147\036\151\104\261\124\025\135\353\103" +
    "\257\135\353\124\027\124\027\124\027\124\027" +
    "\124\027\124\027\124\027\124\027\124\027\176" +
    "\u010d\176\u010d\215\001\176\u010d\215\001\176\u010d" +
    "\215\001\124\027\124\027\124\027\124\027\143" +
    "\231\143\231\215\001\143\231\215\001\143\231" +
    "\024\064\024\064\215\001\123\025\124\027\215" +
    "\001\124\027\123\027\123\027\123\027\123\027" +
    "\123\027\123\027\123\027\123\027\123\027\065" +
    "\231\065\231\215\001\065\231\215\001\065\231" +
    "\215\001\123\027\123\027\123\027\123\027\061" +
    "\227\061\227\215\001\061\227\215\001\061\227" +
    "\150\247\150\251\215\001\056\025\123\027\215" +
    "\001\123\027\056\221\056\221\056\221\056\221" +
    "\056\221\056\221\056\221\056\221\056\221\046" +
    "\047\046\047\215\001\046\047\215\001\046\047" +
    "\215\001\056\221\056\221\056\221\056\221\043" +
    "\047\043\047\215\001\043\047\215\001\043\047" +
    "\215\001\215\001\215\001\053\025\056\221\215" +
    "\001\056\221\053\211\053\027\053\027\053\027" +
    "\053\027\053\027\053\027\053\027\053\027\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\053\027\053\027\053\027\053\027\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\215\001\215\001\032\025\053\027\215" +
    "\001\053\027\032\027\032\027\032\027\032\027" +
    "\032\027\032\027\032\027\032\027\032\027\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\032\027\032\027\032\027\032\027\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\215\001\215\001\031\025\032\027\215" +
    "\001\032\027\031\117\031\117\031\117\031\117" +
    "\031\117\031\117\031\117\031\117\031\117\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\031\117\031\117\031\117\031\117\215" +
    "\001\215\001\215\001\215\001\215\001\215\001" +
    "\215\001\201\000\215\001\002\025\031\117\215" +
    "\001\031\117\002\027\002\027\002\027\002\027" +
    "\002\027\002\027\002\027\002\027\002\027\201" +
    "\u010f\215\001\201\u0111\215\001\215\001\215\001" +
    "\215\001\002\027\002\027\002\027\002\027\215" +
    "\001\215\001\215\001\215\001\201\u0113\215\001" +
    "\215\001\215\001\215\001\201\u0115\002\027\000" +
    "\003\002\027\000\005\000\012\215\001\000\012" +
    "\000\012\000\012\000\012\000\012\000\012\033" +
    "\125\033\127\033\013\033\015\033\131\033\133" +
    "\215\001\215\001\215\001\215\001\215\001\215" +
    "\001\215\001\215\001\215\001\215\001\000\012" +
    "\215\001\215\001\215\001\215\001\215\001\033" +
    "\017\000\012\215\001\215\001\215\001\215\001" +
    "\215\001\033\135\215\001\215\001\215\001\215" +
    "\001\241\011\006\134\115\111\111\166\033\004" +
    "\125\003\034\001\000\020\011\140\067\020\011" +
    "\010\011\164\157\040\124\200\067\110\110\021" +
    "\077\171\171\004\041\065\152\031\205\112\100" +
    "\100\115\021\010\000\206\000\044\071\023\213" +
    "\141\172\164\066\057\057\023\172\057\113\057" +
    "\057\037\122\057\057\060\011\213\170\040\006" +
    "\120\120\114\167\067\067\161\067\174\170\070" +
    "\214\154\147\067\143\145\122\113\060\001\070" +
    "\167\177\063\011\025\025\165\070\013\105\201" +
    "\202\203\047\023\047\013\026\015\027\115\115" +
    "\065\013\014\110\114\164\017\025\013\157\031" +
    "\160\161\161\162\013\074\072\075\076\076\077" +
    "\013\145\163\146\156\147\150\013\153\155\154" +
    "\013\151\046\152\013\050\051\046\117"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              java_cup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec* code_parts symbol+ preced* start_spec production+ 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 25, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol+ preced* start_spec production+ 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 25, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 11, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_parts ::= 
          case 6:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 7:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 8:
            {
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 9:
            {
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 12:
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 13:
            {
              java_cup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING SEMI? 
          case 14:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 6, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING SEMI? 
          case 15:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 9, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING SEMI? 
          case 16:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 12, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING SEMI? 
          case 17:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 18:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 14, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 19:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 43, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 20:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 14, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 21:
            {
 _cur_is_nonterm = false; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 22:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 23:
            {
 _cur_is_nonterm = true; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 15, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 24:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 16, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 25:
            {
              java_cup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 17, sym_id$, sym_id$);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 26:
            {
              return parser.getSymbolFactory().newSymbol("preced", 18, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 27:
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 28:
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 29:
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 19, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 30:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 20, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 31:
            {
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 21, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 32:
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 33:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 34:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 22, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 35:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 44, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 36:
            {
              return parser.getSymbolFactory().newSymbol("production", 22, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 37:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 23, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 38:
            {
              symbol RESULT;
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 37, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 39:
            {
              symbol RESULT;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 37, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part* prod_precedence 
          case 40:
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> CUP$list$rhs = (java.util.ArrayList<production_part>) rhs$.value;
              production_part[] rhs = CUP$list$rhs.toArray(new production_part[CUP$list$rhs.size()]);

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<production_part> rhs_list = 
	      	new ArrayList<production_part>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.build_production(lhs_nt, rhs_list, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 24, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id label_id? 
          case 41:
            {
              production_part RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              symbol symb = (symbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new symbol_part(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 36, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 42:
            {
              production_part RESULT;
              java_cup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 36, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 43:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.star_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 44:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.plus_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 45:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.opt_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 46:
            {
              symbol RESULT;
              java_cup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   symbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	       if (ErrorManager.getManager().getErrorCount() == 0)
	         ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			        "\" has not been declared");
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 35, symid$, symid$, RESULT);
            }

          // label_id ::= COLON robust_id 
          case 47:
            {
              String RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("label_id", 27, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 48:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 29, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 49:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 29, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 50:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 30, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 51:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 52:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 53:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 32, list$, arg$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 54:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 34, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 55:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 34, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 56:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 34, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 57:
            {
              String RESULT;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // SEMI? ::= 
          case 58:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("SEMI?", 42, CUP$sym, CUP$sym);
            }

          // import_spec* ::= 
          case 59:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec*", 38, CUP$sym, CUP$sym);
            }

          // import_spec* ::= import_spec* import_spec 
          case 60:
            {
              return parser.getSymbolFactory().newSymbol("import_spec*", 38, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol+ ::= symbol+ symbol 
          case 61:
            {
              return parser.getSymbolFactory().newSymbol("symbol+", 39, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // preced* ::= 
          case 62:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("preced*", 40, CUP$sym, CUP$sym);
            }

          // preced* ::= preced* preced 
          case 63:
            {
              return parser.getSymbolFactory().newSymbol("preced*", 40, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production+ ::= production+ production 
          case 64:
            {
              return parser.getSymbolFactory().newSymbol("production+", 41, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // label_id? ::= 
          case 65:
            {
              String RESULT;
RESULT=null;
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("label_id?", 46, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part* ::= 
          case 66:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$sym, CUP$sym, new java.util.ArrayList<production_part>());
            }

          // prod_part* ::= prod_part* prod_part 
          case 67:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<production_part> RESULT = (java.util.ArrayList<production_part>) CUP$0.value;
              RESULT.add((production_part) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
