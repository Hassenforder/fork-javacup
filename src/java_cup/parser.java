
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Mon Nov 10 17:59:10 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Mon Nov 10 17:59:10 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\336\000\002\055\000\000\010\000\005\056\000" +
    "\001\004\001\001\002\002\002\001\014\003\005" +
    "\001\005\001\005\001\005\001\004\000\004\002" +
    "\003\004\010\004\015\004\016\004\011\002\011" +
    "\001\057\000\017\004\017\002\060\000\017\004" +
    "\017\002\017\003\017\003\034\002\035\002\020" +
    "\003\020\001\021\003\021\001\030\001\030\001" +
    "\033\002\033\001\061\000\031\005\062\000\031" +
    "\005\063\000\031\005\032\003\032\001\041\001" +
    "\042\001\064\000\012\005\012\001\013\002\013" +
    "\001\065\000\022\005\066\000\022\003\025\003" +
    "\025\001\054\002\054\001\026\002\053\002\053" +
    "\001\052\002\052\001\040\002\040\001\047\003" +
    "\047\004\047\001\044\001\044\003\045\001\045" +
    "\001\046\001\046\003\046\003\050\003\050\001" +
    "\051\001\051\003\023\001\024\001\036\001\036" +
    "\001\036\001\037\001\043\001\043\001\043\001" +
    "\043\001\043\001\043\001\043\001\043\001\043" +
    "\001\043\001\043\001\043\001\043\001\043\001" +
    "\043\001\043\001\007\002\007\001\006\000\006" +
    "\001\027\000\260\260\260\260\260\260\260\300" +
    "\260\260\260\260\260\272\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\302\374\u0138" +
    "\260\276\262\260\304\260\260\u0174\260\260\260" +
    "\u01b0\u01ec\310\316\260\260\260\260\260\u0228\u0238" +
    "\260\260\260\260\260\u026a\260\260\u027a\266\u0100" +
    "\260\u02ac\260\262\324\u0100\260\260\260\u0102\u0106" +
    "\360\260\260\260\u0112\260\260\366\260\260\u0114" +
    "\260\260\354\u0122\260\260\260\260\u012e\u0146\260" +
    "\u0140\260\u018c\u0154\260\u0152\260\u0152\260\u0194\260" +
    "\260\260\u014c\260\u02b4\260\u017e\260\260\260\260" +
    "\260\260\260\u01a2\u0150\260\260\u02f8\260\260\260" +
    "\260\260\u015e\260\260\260\260\260\u01aa\260\260" +
    "\u018c\260\u01c8\260\u01ce\u0192\260\u01de\u020a\260\u0156" +
    "\u019a\260\u01b6\260\u01be\260\u023e\260\260\u0222\260" +
    "\u024e\260\260\u01ce\u020e\260\u022e\u0212\260\u0334\260" +
    "\u0346\u0244\u02da\u0326\u038c\004\000\336\000\002\336" +
    "\000\016\320\270\310\316\012\266\304\324\272" +
    "\300\306\314\302\222\276\322\312\274\000\000" +
    "\000\224\246\234\230\000\232\220\000\226\000" +
    "\250\000\000\236\240\216\014\036\022\020\000" +
    "\000\054\032\000\026\040\000\000\030\336\000" +
    "\000\330\000\034\000\000\332\044\334\260\266" +
    "\324\056\252\062\104\000\262\076\000\256\102" +
    "\000\060\072\000\332\050\326\052\120\000\336" +
    "\114\112\116\000\000\152\000\146\000\150\006" +
    "\164\160\156\000\336\336\172\000\204\162\336" +
    "\170\202\210\200\000\336\176\206\000\214\212" +
    "\264\174\144\000\166\154\126\122\132\000\142" +
    "\140\000\134\000\136\000\000\124\000\000\130" +
    "\000\332\042\324\070\064\254\000\110\100\000" +
    "\106\000\066\074\000\332\046\244\000\024\000" +
    "\242\336\336\000\010\003\011\000\003\002\015" +
    "\056\143\071\u012b\101\205\260\000\001\177\001" +
    "\171\006\037\074\263\065\u0149\006\023\006\041" +
    "\006\063\006\055\006\043\006\035\006\045\006" +
    "\025\006\061\014\067\032\133\036\067\041\111" +
    "\040\115\046\117\001\175\006\047\006\027\006" +
    "\021\006\057\037\121\037\123\014\071\006\051" +
    "\036\071\052\115\041\107\033\037\053\115\006" +
    "\033\033\023\033\041\033\063\033\055\033\043" +
    "\033\035\033\045\033\025\033\061\075\255\102" +
    "\207\103\213\107\256\107\256\110\253\111\115" +
    "\033\047\033\027\033\021\033\057\115\237\115" +
    "\241\126\257\033\051\120\215\120\235\120\243" +
    "\034\037\127\213\033\033\034\023\034\041\034" +
    "\063\034\055\034\043\034\035\034\045\034\025" +
    "\034\061\123\215\123\235\123\243\134\u010d\134" +
    "\u010b\134\u010f\135\305\034\047\034\027\034\021" +
    "\034\057\137\271\142\311\146\317\034\051\154" +
    "\333\171\371\034\077\044\037\202\u0107\034\033" +
    "\044\023\044\041\044\063\044\055\044\043\044" +
    "\035\044\045\044\025\044\061\141\323\144\215" +
    "\144\235\144\243\150\323\160\345\225\u012d\044" +
    "\047\044\027\044\021\044\057\160\347\213\u0119" +
    "\213\u011b\044\051\220\u0123\220\u011b\044\077\050" +
    "\037\226\213\044\033\050\023\050\041\050\063" +
    "\050\055\050\043\050\035\050\045\050\025\050" +
    "\061\141\215\141\235\141\243\230\u0147\150\215" +
    "\150\235\150\243\050\047\050\027\050\021\050" +
    "\057\170\215\170\235\170\243\050\051\210\215" +
    "\210\235\210\243\051\037\232\115\050\033\051" +
    "\023\051\041\051\063\051\055\051\043\051\035" +
    "\051\045\051\025\051\061\215\215\215\235\215" +
    "\243\217\215\217\235\217\243\244\u014b\051\047" +
    "\051\027\051\021\051\057\222\215\222\235\222" +
    "\243\051\051\223\u0129\223\u011b\245\213\061\037" +
    "\250\u0153\051\033\061\023\061\041\061\063\061" +
    "\055\061\043\061\035\061\045\061\025\061\061" +
    "\062\163\062\203\062\177\062\171\062\153\062" +
    "\173\247\u0155\061\047\061\027\061\021\061\057" +
    "\234\u013d\234\u013f\255\305\061\051\237\215\237" +
    "\235\237\243\260\000\247\071\061\033\070\u0131" +
    "\062\175\260\000\070\023\070\041\070\063\070" +
    "\055\070\043\070\035\070\045\070\025\070\061" +
    "\260\000\260\000\073\177\073\171\241\215\241" +
    "\235\241\243\070\047\070\027\070\021\070\057" +
    "\260\000\260\000\260\000\070\051\073\271\260" +
    "\000\260\000\070\215\070\235\070\217\077\221" +
    "\073\175\260\000\077\023\077\041\077\063\077" +
    "\055\077\043\077\035\077\045\077\025\077\061" +
    "\260\000\260\000\260\000\260\000\260\000\260" +
    "\000\260\000\077\047\077\027\077\021\077\057" +
    "\256\323\260\000\260\000\077\051\156\361\260" +
    "\000\260\000\077\215\077\235\077\217\260\000" +
    "\156\215\156\235\156\243\156\355\174\037\260" +
    "\000\260\000\174\023\174\041\174\063\174\055" +
    "\174\043\174\035\174\045\174\025\174\061\260" +
    "\000\260\000\260\000\256\215\256\235\256\243" +
    "\260\000\174\047\174\027\174\021\174\057\257" +
    "\323\260\000\260\000\174\051\260\000\260\000" +
    "\260\000\252\037\260\000\174\033\252\023\252" +
    "\041\252\063\252\055\252\043\252\035\252\045" +
    "\252\025\252\061\260\000\260\000\252\u0157\254" +
    "\177\254\171\260\000\260\000\252\047\252\027" +
    "\252\021\252\057\257\215\257\235\257\243\252" +
    "\051\260\000\254\271\260\000\260\000\260\000" +
    "\252\033\260\000\260\000\254\175\260\000\260" +
    "\000\260\000\260\000\260\000\260\000\260\000" +
    "\u014f\260\260\260\260\260\261\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\261\274\260\260\260" +
    "\260\260\260\260\263\260\260\260\301\304\260" +
    "\260\260\260\260\260\260\311\275\260\260\260" +
    "\260\260\325\260\260\350\260\260\260\346\260" +
    "\260\260\260\260\260\260\260\260\277\260\260" +
    "\260\260\260\260\260\260\260\352\260\260\260" +
    "\262\260\260\260\260\260\373\260\260\260\351" +
    "\260\260\261\301\260\260\370\325\327\260\260" +
    "\376\371\260\260\260\260\u0102\260\260\260\260" +
    "\263\273\260\260\373\260\260\260\260\260\260" +
    "\260\260\334\340\350\u0106\260\260\260\260\u010d" +
    "\260\u0112\260\260\u0117\260\260\260\264\260\260" +
    "\260\354\260\260\260\260\u011e\260\u0126\260\260" +
    "\260\265\260\260\260\260\372\260\u012f\u0135\u0130" +
    "\u012b\003\005\000\056\062\000\104\070\130\254" +
    "\227\246\060\000\000\063\066\000\067\122\070" +
    "\072\073\007\057\140\064\100\063\000\112\145" +
    "\000\201\175\025\054\200\025\014\045\042\036" +
    "\173\040\002\032\025\041\035\042\036\025\040" +
    "\234\025\036\235\053\036\025\052\123\070\247" +
    "\250\231\233\150\146\115\132\025\114\115\153" +
    "\036\114\232\136\135\133\113\137\112\141\124" +
    "\152\112\025\204\202\154\036\222\111\172\217" +
    "\143\160\157\161\152\171\164\161\176\210\241" +
    "\054\177\000\213\000\000\165\201\167\000\212" +
    "\211\156\000\201\220\156\216\211\201\223\240" +
    "\212\211\201\070\234\212\211\235\257\233\204" +
    "\132\256\000\000\153\242\233\000\136\255\133" +
    "\152\137\000\143\000\152"
    };
  }

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" as a terminal */
    symbols.put("error", new symbol_part(terminal.error));

    /* declare start non terminal */
    non_terms.put("$START", non_terminal.START_nt);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              CUP$result = parser.getSymbolFactory().newSymbol("$START", 0, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek(), RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0", 45, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 0, CUP$stack.elementAt(CUP$size-8), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 0, CUP$stack.elementAt(CUP$size-5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1", 46, CUP$stack.elementAt(CUP$size-2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec", 12, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 4, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 4, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size-2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part", 3, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size-2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part", 8, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size-2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code", 13, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size-2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code", 14, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 9, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2", 47, CUP$stack.elementAt(CUP$size-2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3", 48, CUP$stack.elementAt(CUP$size-2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term", 28, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term", 29, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list", 16, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list", 16, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list", 17, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list", 17, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 24, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 24, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l", 27, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l", 27, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4", 49, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 25, CUP$stack.elementAt(CUP$size-5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5", 50, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 25, CUP$stack.elementAt(CUP$size-5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6", 51, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 25, CUP$stack.elementAt(CUP$size-5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list", 26, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list", 26, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol sym$ = CUP$stack.peek();
              String sym = (String) sym$.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id", 33, sym$, sym$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol sym$ = CUP$stack.peek();
              String sym = (String) sym$.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id", 34, sym$, sym$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.peek();
              String start_name = (String) start_name$.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7", 52, CUP$stack.elementAt(CUP$size-3), start_name$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH symbol_id NT$7 SEMI 
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.elementAt(CUP$size-3);
              String start_name = (String) start_name$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$stack.elementAt(CUP$size-5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 11, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 11, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.peek();
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8", 53, lhs_id$, lhs_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= symbol_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.elementAt(CUP$size-5);
              String lhs_id = (String) lhs_id$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production", 18, lhs_id$, CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$9", 54, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production", 18, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 21, CUP$stack.elementAt(CUP$size-3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 21, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol term_name$ = CUP$stack.peek();
              String term_name = (String) term_name$.value;
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 44, CUP$stack.elementAt(CUP$size-2), term_name$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 44, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.peek();
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.elementAt(CUP$size-2);
              ArrayList<production_part> rhs = (ArrayList<production_part>) rhs$.value;

	  if (lhs_nt != null) 
	    {
	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}

	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs", 22, rhs$, precsym$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol prod$ = CUP$stack.peek();
              production_part prod = (production_part) prod$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size-2);
              ArrayList<production_part> list = (ArrayList<production_part>) list$.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 43, list$, prod$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
 RESULT = new ArrayList<production_part>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 43, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symid$ = CUP$stack.elementAt(CUP$size-2);
              String symid = (String) symid$.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 42, symid$, labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol code_str$ = CUP$stack.peek();
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 42, code_str$, code_str$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 32, CUP$stack.elementAt(CUP$size-2), labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_label ::= empty 
            {
              String RESULT =null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 32, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol another_id$ = CUP$stack.peek();
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 39, id$, another_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size-2);
              String types = (String) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 39, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol an_id$ = CUP$stack.peek();
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 39, an_id$, an_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 36, arg$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size-3);
              String list = (String) list$.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 36, list$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 37, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeargument ::= wildcard 
            {
              String RESULT =null;
              java_cup.runtime.Symbol w$ = CUP$stack.peek();
              String w = (String) w$.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 37, w$, w$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION 
            {
              String RESULT =null;
 RESULT = "?"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 38, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 38, CUP$stack.elementAt(CUP$size-3), id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 38, CUP$stack.elementAt(CUP$size-3), id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 40, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 40, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 41, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size-3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 41, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol term_id$ = CUP$stack.peek();
              String term_id = (String) term_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id", 19, term_id$, term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_non_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol non_term_id$ = CUP$stack.peek();
              String non_term_id = (String) non_term_id$.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id", 20, non_term_id$, non_term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // symbol_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 30, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= SUPER 
            {
              String RESULT =null;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 30, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= EXTENDS 
            {
              String RESULT =null;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 30, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id", 31, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= CODE 
            {
              String RESULT =null;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= ACTION 
            {
              String RESULT =null;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= PARSER 
            {
              String RESULT =null;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= NON 
            {
              String RESULT =null;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= INIT 
            {
              String RESULT =null;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= SCAN 
            {
              String RESULT =null;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= WITH 
            {
              String RESULT =null;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= START 
            {
              String RESULT =null;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= LEFT 
            {
              String RESULT =null;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= RIGHT 
            {
              String RESULT =null;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= error 
            {
              String RESULT =null;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_terminal ::= NON TERMINAL 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 7, CUP$stack.elementAt(CUP$size-2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 7, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 6, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 6, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // empty ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty", 23, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

