
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Sat Nov 15 18:02:30 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081115 generated parser.
  * @version Sat Nov 15 18:02:30 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\336\000\002\040\007\040\005\001\003\001\000" +
    "\002\002\002\000\020\003\011\001\011\001\011" +
    "\001\011\001\011\001\011\001\010\000\010\002" +
    "\003\003\003\006\004\003\005\003\005\001\006" +
    "\001\006\003\007\004\014\004\021\004\022\004" +
    "\015\002\015\001\023\005\057\000\023\003\023" +
    "\005\060\000\023\003\023\003\023\003\024\003" +
    "\024\001\025\003\025\001\033\002\033\000\034" +
    "\004\035\001\035\001\035\001\036\003\036\001" +
    "\037\001\053\001\016\004\016\000\017\002\017" +
    "\001\026\005\061\000\026\002\031\003\031\001" +
    "\056\002\056\000\032\002\055\002\055\000\054" +
    "\002\054\001\043\002\043\000\050\003\050\001" +
    "\045\001\045\003\046\001\046\001\047\001\047" +
    "\003\047\003\051\003\051\001\052\001\052\003" +
    "\052\004\027\001\030\001\041\001\041\001\041" +
    "\001\041\001\042\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\013\002\013\001\012" +
    "\000\012\001\261\261\357\261\261\273\263\261" +
    "\261\261\261\261\261\261\261\261\261\261\261" +
    "\261\261\261\261\261\261\263\261\u012f\323\u0171" +
    "\271\261\261\261\u01b3\u01f3\261\u0205\263\261\265" +
    "\261\273\277\323\261\303\261\367\261\267\261" +
    "\321\261\305\261\261\353\367\261\261\u0113\261" +
    "\261\375\u0243\u0283\u010d\261\261\261\u0111\365\u010d" +
    "\261\u0123\u02c3\261\261\u0161\u0191\u0115\u0165\261\u01a7" +
    "\261\u0303\261\u0137\345\u020b\351\u0179\u0113\261\u0123" +
    "\u012f\261\u01d5\261\261\261\u0165\u01ef\261\u01bd\261" +
    "\261\u021f\261\261\261\u0187\u029f\261\u0237\u0217\261" +
    "\261\u02b7\u0193\261\u0343\u019f\261\u0383\u03c3\u01b3\u01b9" +
    "\261\u0403\u0443\261\u0483\u0223\261\261\261\u01bf\261" +
    "\261\u01f3\261\u0323\261\261\u024d\261\261\261\261" +
    "\261\u01f1\u01f5\261\261\u02f7\261\261\u021b\261\261" +
    "\u024d\u0377\261\261\261\u021f\u0337\261\261\261\261" +
    "\u04c3\261\261\261\261\u050d\000\000\016\000\000" +
    "\000\316\324\314\272\310\300\276\270\320\326" +
    "\274\216\322\302\306\304\266\312\036\002\000" +
    "\126\000\000\072\332\010\000\000\014\000\076" +
    "\260\270\116\266\000\242\250\326\262\152\070" +
    "\104\122\000\252\326\330\214\240\000\024\040" +
    "\126\026\032\000\000\000\000\030\022\034\000" +
    "\000\000\100\000\000\110\124\000\000\000\000" +
    "\106\000\112\000\020\152\000\000\272\000\054" +
    "\052\000\000\244\000\256\254\114\224\226\220" +
    "\000\230\132\000\136\134\162\000\000\156\000" +
    "\000\120\236\000\334\042\000\334\046\000\000" +
    "\334\334\074\000\000\246\000\000\146\144\142" +
    "\000\164\154\000\102\000\336\066\000\062\050" +
    "\056\060\064\234\232\222\130\000\202\150\000" +
    "\140\170\000\174\044\160\202\212\000\176\206" +
    "\200\166\000\204\172\210\264\000\011\003\063" +
    "\000\003\000\012\030\105\000\012\000\012\000" +
    "\012\000\012\000\012\000\012\035\155\004\065" +
    "\004\073\005\101\047\256\047\256\005\103\051" +
    "\254\051\254\052\223\052\225\055\231\065\251" +
    "\033\065\033\073\045\217\000\012\061\217\063" +
    "\245\063\247\001\037\004\077\053\103\000\012" +
    "\001\023\001\041\001\031\001\027\001\047\001" +
    "\051\001\025\001\057\001\021\033\077\070\253" +
    "\053\227\057\241\071\255\077\261\102\275\001" +
    "\015\001\035\001\045\001\017\057\235\074\065" +
    "\074\073\001\053\106\277\107\301\120\345\130" +
    "\357\032\133\132\365\001\033\001\055\032\023" +
    "\032\041\032\031\032\027\032\047\032\051\032" +
    "\025\032\057\032\021\074\077\110\115\110\135" +
    "\127\241\110\305\110\307\134\373\032\015\032" +
    "\035\032\045\032\017\127\235\112\115\112\135" +
    "\032\053\112\305\112\307\136\375\032\115\032" +
    "\135\034\153\032\117\032\123\137\377\034\023" +
    "\034\041\034\031\034\027\034\047\034\051\034" +
    "\025\034\057\034\021\116\325\116\333\116\331" +
    "\117\337\133\367\133\371\145\217\034\015\034" +
    "\035\034\045\034\017\157\u0115\121\115\121\135" +
    "\034\053\121\305\121\307\167\u011f\034\115\034" +
    "\135\041\037\034\117\034\123\172\u011f\041\023" +
    "\041\041\041\031\041\027\041\047\041\051\041" +
    "\025\041\057\041\021\176\u011f\117\115\117\135" +
    "\177\u011f\117\305\117\307\150\u0109\041\015\041" +
    "\035\041\045\041\017\211\u0139\123\115\123\135" +
    "\041\053\123\305\123\307\141\u0101\141\225\042" +
    "\037\150\u0107\041\033\041\055\042\023\042\041" +
    "\042\031\042\027\042\047\042\051\042\025\042" +
    "\057\042\021\214\u013b\044\205\044\201\044\065" +
    "\044\073\044\215\044\177\042\015\042\035\042" +
    "\045\042\017\227\217\131\361\230\217\042\053" +
    "\131\103\146\u0103\146\u0105\163\u011b\163\247\236" +
    "\u0147\042\033\042\055\044\077\205\u0135\205\u0137" +
    "\246\u0159\100\037\131\363\261\000\044\203\100" +
    "\265\100\041\100\031\100\027\100\047\100\051" +
    "\100\025\100\057\100\021\153\115\153\135\261" +
    "\000\153\305\153\307\241\u0149\221\u0109\100\015" +
    "\100\035\100\045\100\017\241\u014b\162\115\162" +
    "\135\100\053\162\305\162\307\261\000\261\000" +
    "\101\037\221\u013d\100\033\100\055\101\023\101" +
    "\041\101\031\101\027\101\047\101\051\101\025" +
    "\101\057\101\021\261\000\160\337\160\006\261" +
    "\000\261\000\261\000\261\000\101\015\101\035" +
    "\101\045\101\017\261\000\261\000\166\337\101" +
    "\053\261\000\261\000\261\000\261\000\113\037" +
    "\261\000\101\033\101\055\113\023\113\041\113" +
    "\031\113\027\113\047\113\051\113\025\113\057" +
    "\113\021\160\115\160\135\261\000\160\305\160" +
    "\307\261\000\261\000\113\015\113\035\113\045" +
    "\113\017\261\000\166\115\166\135\113\053\166" +
    "\305\166\307\113\323\261\000\125\037\261\000" +
    "\113\033\113\055\125\023\125\041\125\031\125" +
    "\027\125\047\125\051\125\025\125\057\125\021" +
    "\261\000\261\000\125\353\216\337\216\004\261" +
    "\000\261\000\125\015\125\035\125\045\125\017" +
    "\261\000\233\115\233\135\125\053\233\305\233" +
    "\307\261\000\261\000\171\037\261\000\125\033" +
    "\125\055\171\023\171\041\171\031\171\027\171" +
    "\047\171\051\171\025\171\057\171\021\261\000" +
    "\261\000\216\115\216\135\261\000\216\305\216" +
    "\307\171\015\171\035\171\045\171\017\261\000" +
    "\247\115\247\135\171\053\247\305\247\307\171" +
    "\323\261\000\174\037\261\000\171\033\171\055" +
    "\174\023\174\041\174\031\174\027\174\047\174" +
    "\051\174\025\174\057\174\021\261\000\261\000" +
    "\261\000\261\000\261\000\242\u014f\261\000\174" +
    "\015\174\035\174\045\174\017\261\000\242\115" +
    "\242\135\174\053\242\305\242\307\242\u0153\261" +
    "\000\175\037\261\000\174\033\174\055\175\023" +
    "\175\041\175\031\175\027\175\047\175\051\175" +
    "\025\175\057\175\021\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\175\015\175" +
    "\035\175\045\175\017\261\000\261\000\261\000" +
    "\175\053\261\000\261\000\261\000\261\000\201" +
    "\037\261\000\175\033\175\055\201\023\201\041" +
    "\201\031\201\027\201\047\201\051\201\025\201" +
    "\057\201\021\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\201\015\201\035\201" +
    "\045\201\017\261\000\261\000\261\000\201\053" +
    "\261\000\261\000\261\000\261\000\202\037\261" +
    "\000\201\033\201\055\202\023\202\041\202\031" +
    "\202\027\202\047\202\051\202\025\202\057\202" +
    "\021\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\202\015\202\035\202\045\202" +
    "\017\261\000\261\000\261\000\202\053\261\000" +
    "\261\000\261\000\261\000\204\037\261\000\202" +
    "\033\202\055\204\023\204\041\204\031\204\027" +
    "\204\047\204\051\204\025\204\057\204\021\261" +
    "\000\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\204\015\204\035\204\045\204\017\261" +
    "\000\261\000\261\000\204\053\261\000\261\000" +
    "\204\323\261\000\254\037\261\000\204\033\204" +
    "\055\254\023\254\041\254\031\254\027\254\047" +
    "\254\051\254\025\254\057\254\021\261\000\261" +
    "\000\261\000\261\000\261\000\261\000\261\000" +
    "\254\015\254\035\254\045\254\017\261\000\261" +
    "\000\261\000\254\053\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\254\033\254\055\261" +
    "\000\u0143\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\261\261\262\260\260" +
    "\260\260\263\271\260\334\265\260\260\260\260" +
    "\260\260\260\260\260\261\260\266\260\260\260" +
    "\260\260\260\260\260\260\260\263\260\260\260" +
    "\310\345\260\260\260\260\260\260\335\260\333" +
    "\321\260\260\262\344\260\352\260\345\260\272" +
    "\260\362\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\351" +
    "\260\260\320\260\356\260\260\260\260\260\375" +
    "\260\260\361\267\260\375\351\270\277\260\370" +
    "\373\260\u0100\260\260\260\260\260\260\260\260" +
    "\260\374\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\u010a\u0113\260\260\260\260\260\u010d" +
    "\260\260\u0115\355\u010f\260\260\260\260\u010f\260" +
    "\260\260\260\002\030\000\000\000\000\000\044" +
    "\000\220\034\034\033\034\117\043\222\225\036" +
    "\060\052\060\063\050\226\062\000\057\115\127" +
    "\153\003\214\054\064\021\021\021\067\005\053" +
    "\053\045\061\021\067\072\104\070\071\075\110" +
    "\073\121\034\103\074\133\135\021\076\105\036" +
    "\131\141\144\160\050\021\150\147\146\053\161" +
    "\145\054\164\054\163\166\211\062\223\213\156" +
    "\064\205\210\134\206\064\216\224\115\156\255" +
    "\000\213\161\207\021\221\147\146\053\000\145" +
    "\021\156\156\021\053\134\227\053\021\230\231" +
    "\146\053\237\145\206\241\240\246\253\206\257" +
    "\000\260\000\207\000\000\000\252\256\250\000" +
    "\000\000\000\242\000\242"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  Main main;
  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
              java_cup.runtime.Symbol start_val$ = CUP$stack.elementAt(CUP$size - 2);
              Grammar start_val = (Grammar) start_val$.value;
RESULT = start_val;
              CUP$result = parser.getSymbolFactory().newSymbol("$START", 0, start_val$, CUP$stack.peek(), RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 7), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_spec ::= PACKAGE multipart_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_list ::= import_list import_spec 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec", 16, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= option_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= parser_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parser_spec ::= PARSER multipart_id SEMI 
            {
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
            {
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 3);
              String types = (String) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 6), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // option_spec ::= OPTION option_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_spec", 4, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // option_list ::= option_list COMMA option_ 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // option_list ::= option_ 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // option_ ::= robust_id 
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.peek();
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, opt$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // option_ ::= robust_id EQUALS robust_id 
            {
              java_cup.runtime.Symbol val$ = CUP$stack.peek();
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.elementAt(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, val$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part", 7, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part", 12, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code", 17, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code", 18, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol_list ::= symbol_list symbol 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= TERMINAL type_id NT$0 decl_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$0 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0", 47, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol ::= TERMINAL decl_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbol ::= non_terminal type_id NT$1 decl_non_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1", 48, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= non_terminal decl_non_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // symbol ::= TERMINAL error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // symbol ::= non_terminal error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl_term_list ::= decl_term_list COMMA new_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl_term_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decl_non_term_list ::= decl_non_term_list COMMA new_non_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl_non_term_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // precedence_list ::= precedence_list preced 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // precedence_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE assoc precterminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 28, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assoc ::= LEFT 
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assoc ::= RIGHT 
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assoc ::= NONASSOC 
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // precterminal_list ::= precterminal_list COMMA precterminal_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // precterminal_list ::= precterminal_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // precterminal_id ::= term_id 
            {
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
	
	  term.set_precedence(_cur_side, _cur_prec);
	
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_id", 31, term$, term$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term_id ::= symbol_id 
            {
              terminal RESULT = null;
              java_cup.runtime.Symbol sym$ = CUP$stack.peek();
              String sym = (String) sym$.value;
 RESULT = get_term(sym); 
              CUP$result = parser.getSymbolFactory().newSymbol("term_id", 43, sym$, sym$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH symbol_id SEMI 
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.elementAt(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // production ::= symbol_id NT$2 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.elementAt(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, lhs_id$, CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$2 ::= 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.peek();
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id);
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2", 49, lhs_id$, lhs_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // production ::= error SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rhs_list ::= rhs_list BAR rhs 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT = null;
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
 RESULT = term; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$stack.elementAt(CUP$size - 2), term$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= 
            {
              symbol RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.peek();
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> rhs = (ArrayList<production_part>) rhs$.value;

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      grammar.build_production(lhs_nt, rhs, (terminal) precsym);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs", 26, rhs$, precsym$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT = null;
              java_cup.runtime.Symbol prod$ = CUP$stack.peek();
              production_part prod = (production_part) prod$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> list = (ArrayList<production_part>) list$.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, list$, prod$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= 
            {
              ArrayList<production_part> RESULT = null;
 RESULT = new ArrayList<production_part>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symid$ = CUP$stack.elementAt(CUP$size - 2);
              String symid = (String) symid$.value;
 
	  /* try to look up the id */
	  symbol symb = symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = new symbol_part(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, symid$, labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= CODE_STRING 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol code_str$ = CUP$stack.peek();
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, code_str$, code_str$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_label ::= COLON label_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$stack.elementAt(CUP$size - 2), labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= 
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol another_id$ = CUP$stack.peek();
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, id$, another_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol an_id$ = CUP$stack.peek();
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, an_id$, an_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typearglist ::= typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, arg$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 3);
              String list = (String) list$.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, list$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typeargument ::= type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeargument ::= wildcard 
            {
              String RESULT = null;
              java_cup.runtime.Symbol w$ = CUP$stack.peek();
              String w = (String) w$.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, w$, w$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // wildcard ::= QUESTION 
            {
              String RESULT = null;
 RESULT = "?"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // wildcard ::= wildcard EXTENDS type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= wildcard SUPER type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 2);
              String types = (String) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol term_id$ = CUP$stack.peek();
              String term_id = (String) term_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */
	      terminal term = grammar.add_terminal(term_id, _cur_symbol_type);
	      symbols.put(term_id, term);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id", 23, term_id$, term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_non_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol non_term_id$ = CUP$stack.peek();
              String non_term_id = (String) non_term_id$.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
              	grammar.add_non_terminal(non_term_id, _cur_symbol_type); 

	      /* put it in the symbols table */ 
	      symbols.put(non_term_id, this_nt);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id", 24, non_term_id$, non_term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // symbol_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // symbol_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= SUPER 
            {
              String RESULT = null;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= EXTENDS 
            {
              String RESULT = null;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id", 34, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT = null;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT = null;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT = null;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT = null;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT = null;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT = null;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT = null;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT = null;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT = null;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT = null;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT = null;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT = null;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT = null;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT = null;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT = null;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
