
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sun Nov 09 14:32:24 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sun Nov 09 14:32:24 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String action_table() { 
    return
    "\000\340\000\002\056\000\000\010\000\005\057" +
    "\000\001\004\001\001\002\002\002\001\014\003" +
    "\005\001\005\001\005\001\005\001\004\000\004" +
    "\002\003\004\010\004\015\004\016\004\011\002" +
    "\011\001\060\000\017\004\017\002\061\000\017" +
    "\004\017\002\017\003\017\003\034\002\035\002" +
    "\020\003\020\001\021\003\021\001\030\001\030" +
    "\001\033\002\033\001\062\000\031\005\063\000" +
    "\031\005\064\000\031\005\032\003\032\001\042" +
    "\001\043\001\065\000\012\005\012\001\013\002" +
    "\013\001\066\000\022\005\067\000\022\003\025" +
    "\003\025\001\055\002\055\001\026\002\054\002" +
    "\054\001\053\002\053\001\041\002\041\001\050" +
    "\003\050\004\050\001\045\001\045\003\046\001" +
    "\046\001\047\001\047\003\047\003\051\003\051" +
    "\001\052\001\052\003\023\001\024\001\036\001" +
    "\036\001\037\001\037\001\040\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\007\002\007\001" +
    "\006\000\006\001\027\000\000\u0430\u0164\004\u0164" +
    "\000\u0164\340\u0164\000\u0164\002\u0174\000\u0164\340" +
    "\u0164\016\u0164\036\u0164\022\u01b0\000\u0164\020\u01c0" +
    "\000\u01f2\000\u0164\332\u0164\032\u0164\026\u0202\340" +
    "\u0164\034\u0164\054\u0164\000\u0164\030\u0164\040\u0166" +
    "\000\u016a\000\u0164\000\u0178\000\u0234\000\u0164\312" +
    "\u0176\270\u0164\324\u0164\222\u017a\000\u0166\056\u0164" +
    "\304\u0164\314\u0164\272\u0164\316\u0164\104\u0164\322" +
    "\u018a\326\u0164\276\u0164\062\u0164\320\u01b6\246\u0164" +
    "\274\u0164\306\u0164\302\u0164\310\u0164\300\u0270\000" +
    "\u02ac\000\u0164\270\u0164\216\u0164\326\u0164\232\u0174" +
    "\230\u01dc\000\u0164\224\u016e\234\u02e8\000\u0324\000" +
    "\u0176\236\u017c\000\u0164\250\u0182\240\u0360\000\u0164" +
    "\220\u0164\226\u0164\072\u019e\000\u0164\252\u0164\060" +
    "\u01a0\000\u0164\076\u0164\102\u01a0\000\u01ce\334\u0164" +
    "\050\u0164\336\u01a6\000\u01d2\334\u0164\046\u0164\330" +
    "\u01aa\000\u01f2\334\u0164\042\u01ca\000\u01fc\334\u0164" +
    "\044\u0164\052\u0164\120\u01f0\112\u020a\340\u0164\114" +
    "\u0202\000\u0164\132\u0164\126\u0164\122\u0222\000\u0164" +
    "\262\u0234\000\u0164\264\u0164\142\u0164\144\u0164\140" +
    "\u0224\000\u0164\124\u0164\136\u0250\000\u023a\000\u0164" +
    "\130\u0266\000\u023e\000\u0164\134\u026e\000\u021c\000" +
    "\u0164\152\u0288\000\u0164\256\u0164\260\u0164\146\u0220" +
    "\000\u0164\150\u0248\164\u0164\156\u028a\006\u0164\160" +
    "\u024a\000\u0164\340\u0164\172\u027a\000\u02a2\340\u0164" +
    "\204\u0164\200\u0164\210\u0252\340\u028c\000\u0164\202" +
    "\u0164\176\u0164\174\u0164\206\u039c\000\u0164\214\u0164" +
    "\212\u0164\266\u0164\162\u0164\340\u0164\170\u0164\154" +
    "\u0276\000\u0164\166\u0164\116\u02ac\270\u0164\110\u0164" +
    "\070\u0264\064\u0288\326\u02c2\000\u0268\000\u0164\100" +
    "\u0164\254\u0164\106\u0164\074\u028e\000\u0164\066\u02c8" +
    "\244\u02c6\000\u0164\024\u03d8\000\u0164\242\u02cc\012" +
    "\u02ea\000\u0164\014\u03ea\340\u02f0\340\u0308\000\u0316" +
    "\010\003\011\000\003\002\013\010\025\024\257" +
    "\027\251\262\000\001\067\001\061\005\155\030" +
    "\247\031\241\005\111\005\133\005\123\005\143" +
    "\005\137\005\135\005\141\005\071\005\107\032" +
    "\231\035\252\035\252\040\225\040\223\041\177" +
    "\001\035\005\113\005\127\005\117\005\075\050" +
    "\213\070\177\076\177\005\105\073\171\073\173" +
    "\077\201\012\155\101\177\005\151\012\111\012" +
    "\133\012\123\012\143\012\137\012\135\012\141" +
    "\012\071\012\107\014\057\014\051\014\067\014" +
    "\061\014\063\014\065\054\147\012\113\012\127" +
    "\012\117\012\075\106\217\111\217\114\233\012" +
    "\105\115\237\120\243\121\237\124\253\054\145" +
    "\012\151\015\u013b\014\035\071\205\015\111\015" +
    "\133\015\123\015\143\015\137\015\135\015\141" +
    "\015\071\015\107\125\237\127\261\021\067\021" +
    "\061\071\207\130\237\134\277\015\113\015\127" +
    "\015\117\015\075\135\351\143\315\152\315\015" +
    "\105\021\277\137\305\137\303\137\301\164\355" +
    "\015\u0133\033\121\021\035\172\367\033\111\033" +
    "\133\033\123\033\143\033\137\033\135\033\141" +
    "\033\071\033\107\145\327\145\325\155\315\156" +
    "\337\156\325\161\345\161\325\033\113\033\127" +
    "\033\117\033\075\143\311\152\311\160\315\033" +
    "\105\174\260\200\u0103\163\371\062\155\210\u011d" +
    "\033\073\062\111\062\133\062\123\062\143\062" +
    "\137\062\135\062\141\062\071\062\107\166\361" +
    "\176\371\211\315\226\u012f\155\311\203\u0125\234" +
    "\177\062\113\062\127\062\117\062\075\203\u0127" +
    "\235\u0147\204\315\062\105\160\311\237\u0143\062" +
    "\167\063\155\163\357\062\151\063\111\063\133" +
    "\063\123\063\143\063\137\063\135\063\141\063" +
    "\071\063\107\231\254\231\254\166\357\176\357" +
    "\211\311\244\u0143\204\u0113\063\113\063\127\063" +
    "\117\063\075\236\u0141\236\u013f\247\u0151\063\105" +
    "\204\311\204\u010f\246\u0153\074\155\253\147\063" +
    "\151\074\111\074\133\074\123\074\143\074\137" +
    "\074\135\074\141\074\071\074\107\246\145\254" +
    "\u015b\253\145\257\351\260\371\262\000\262\000" +
    "\074\113\074\127\074\117\074\075\261\371\262" +
    "\000\262\000\074\105\262\000\262\000\262\000" +
    "\075\155\262\000\074\151\075\111\075\133\075" +
    "\123\075\143\075\137\075\135\075\141\075\071" +
    "\075\107\262\000\262\000\262\000\262\000\262" +
    "\000\262\000\260\357\075\113\075\127\075\117" +
    "\075\075\262\000\262\000\261\357\075\105\262" +
    "\000\262\000\262\000\102\155\262\000\075\151" +
    "\102\111\102\133\102\123\102\143\102\137\102" +
    "\135\102\141\102\071\102\107\262\000\262\000" +
    "\262\000\262\000\262\000\262\000\262\000\102" +
    "\113\102\127\102\117\102\075\262\000\262\000" +
    "\262\000\102\105\262\000\262\000\102\167\216" +
    "\155\262\000\102\151\216\111\216\133\216\123" +
    "\216\143\216\137\216\135\216\141\216\071\216" +
    "\107\262\000\262\000\262\000\262\000\262\000" +
    "\262\000\262\000\216\113\216\127\216\117\216" +
    "\075\262\000\262\000\262\000\216\105\262\000" +
    "\262\000\262\000\251\155\262\000\216\151\251" +
    "\111\251\133\251\123\251\143\251\137\251\135" +
    "\251\141\251\071\251\107\262\000\262\000\251" +
    "\u0155\256\067\256\061\262\000\262\000\251\113" +
    "\251\127\251\117\251\075\262\000\262\000\262" +
    "\000\251\105\262\000\256\277\262\000\262\000" +
    "\262\000\251\151\262\000\262\000\256\035\262" +
    "\000\262\000\262\000\262\000\262\000\262\000" +
    "\262\000\000\u014a\262\262\262\262\262\262\263" +
    "\262\262\262\263\262\277\300\262\262\262\327" +
    "\262\262\262\262\262\262\262\262\262\317\262" +
    "\262\262\262\262\263\262\262\262\262\262\262" +
    "\262\262\262\262\262\262\262\262\262\262\326" +
    "\264\262\262\262\262\262\262\262\262\275\333" +
    "\262\262\262\262\340\262\262\262\331\262\262" +
    "\262\262\262\262\262\262\262\262\264\262\262" +
    "\262\266\262\262\267\262\262\262\262\271\262" +
    "\262\271\276\302\357\262\262\262\262\262\262" +
    "\355\262\262\371\262\262\373\262\262\u0102\262" +
    "\262\264\262\262\301\262\262\301\262\371\313" +
    "\262\u010c\262\262\u0108\262\262\262\270\u0105\262" +
    "\262\262\262\u0105\262\262\262\262\u0114\262\262" +
    "\262\262\262\262\262\262\321\262\262\277\262" +
    "\262\262\262\u011c\262\262\262\262\362\262\352" +
    "\262\262\u012b\u0124\u012b\u012a\003\006\000\010\014" +
    "\000\116\015\122\256\126\131\013\000\000\023" +
    "\020\163\026\113\015\025\021\007\011\230\017" +
    "\022\023\217\165\236\171\242\232\000\037\037" +
    "\065\215\253\246\247\233\015\040\002\037\046" +
    "\106\037\054\132\101\054\040\234\052\046\160" +
    "\136\135\133\155\134\037\143\110\172\054\226" +
    "\041\037\071\072\067\054\037\070\200\244\054" +
    "\037\076\104\067\054\145\070\225\150\176\150" +
    "\154\147\151\147\156\175\161\065\177\150\254" +
    "\150\151\147\151\147\213\177\203\202\205\150" +
    "\220\000\210\214\221\224\205\000\236\260\000" +
    "\232\000\015\212\000\206\261\000\204\245\132" +
    "\165\225\175\000\000\204\000\136\257\133\000" +
    "\134\000\177\177";
  }

  /** Instance of action encapsulation class. */
  protected CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" as a terminal */
    symbols.put("error", new symbol_part(terminal.error));

    /* declare start non terminal */
    non_terms.put("$START", non_terminal.START_nt);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$left, CUP$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0",46, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-8);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1",47, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-2);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2",48, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3",49, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term",28, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term",29, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4",50, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5",51, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6",52, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id",34, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id",35, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.peek();
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7",53, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH nt_id NT$7 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.elementAt(CUP$size-3);
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              java_cup.runtime.Symbol CUP$symlhs_id = CUP$stack.peek();
              int lhs_idleft = CUP$symlhs_id.left;
              int lhs_idright = CUP$symlhs_id.right;
              String lhs_id = (String) CUP$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8",54, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= nt_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              int lhs_idleft = CUP$left.left;
              int lhs_idright = CUP$left.right;
              String lhs_id = (String) CUP$left.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$9",55, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_nameleft = CUP$right.left;
              int term_nameright = CUP$right.right;
              String term_name = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int precsymleft = CUP$right.left;
              int precsymright = CUP$right.right;
              symbol precsym = (symbol) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int rhsleft = CUP$left.left;
              int rhsright = CUP$left.right;
              ArrayList<production_part> rhs = (ArrayList<production_part>) CUP$left.value;

	  if (lhs_nt != null) 
	    {
	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}

	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs",22, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int prodleft = CUP$right.left;
              int prodright = CUP$right.right;
              production_part prod = (production_part) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              ArrayList<production_part> list = (ArrayList<production_part>) CUP$left.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = new ArrayList<production_part>(); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int symidleft = CUP$left.left;
              int symidright = CUP$left.right;
              String symid = (String) CUP$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int code_strleft = CUP$right.left;
              int code_strright = CUP$right.right;
              String code_str = (String) CUP$right.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_label ::= empty 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int another_idleft = CUP$right.left;
              int another_idright = CUP$right.right;
              String another_id = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symtypes = CUP$stack.elementAt(CUP$size-2);
              int typesleft = CUP$symtypes.left;
              int typesright = CUP$symtypes.right;
              String types = (String) CUP$symtypes.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int an_idleft = CUP$right.left;
              int an_idright = CUP$right.right;
              String an_id = (String) CUP$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              String list = (String) CUP$left.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeargument ::= wildcard 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int wleft = CUP$right.left;
              int wright = CUP$right.right;
              String w = (String) CUP$right.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "?"; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_idleft = CUP$right.left;
              int term_idright = CUP$right.right;
              String term_id = (String) CUP$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id",19, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_non_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int non_term_idleft = CUP$right.left;
              int non_term_idright = CUP$right.right;
              String non_term_id = (String) CUP$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id",20, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nt_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // symbol_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // label_id ::= robust_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id",32, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "code"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "action"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "parser"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "terminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "non"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonterminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "init"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "scan"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "with"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "start"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "precedence"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "left"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "right"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonassoc"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // empty ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty",23, CUP$right, CUP$right);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

