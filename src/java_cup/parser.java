
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sun Nov 09 13:22:44 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sun Nov 09 13:22:44 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String action_table() { 
    return
    "\000\336\000\000\002\000\007\000\005\056\000" +
    "\001\004\001\001\002\002\002\001\014\003\005" +
    "\001\005\001\005\001\005\001\004\000\004\002" +
    "\003\004\010\004\015\004\016\004\011\002\011" +
    "\001\057\000\017\004\017\002\060\000\017\004" +
    "\017\002\017\003\017\003\034\002\035\002\020" +
    "\003\020\001\021\003\021\001\030\001\030\001" +
    "\033\002\033\001\061\000\031\005\062\000\031" +
    "\005\063\000\031\005\032\003\032\001\042\001" +
    "\043\001\064\000\012\005\012\001\013\002\013" +
    "\001\065\000\022\005\066\000\022\003\025\003" +
    "\025\001\055\002\055\001\026\002\054\002\054" +
    "\001\053\002\053\001\041\002\041\001\050\003" +
    "\050\004\050\001\045\001\045\003\046\001\046" +
    "\001\047\001\047\003\047\003\051\003\051\001" +
    "\052\001\052\003\023\001\024\001\036\001\036" +
    "\001\037\001\037\001\040\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\007\002\007\001\006" +
    "\000\006\001\027\000\000\u0aee\157\u01d1\157\u01d9" +
    "\157\u01e5\157\u0213\157\u01d1\157\u0227\157\u023f\157" +
    "\u026b\157\u0279\157\u02a5\157\u02b3\157\u02df\157\u02ed" +
    "\157\u0319\157\u0327\157\u0353\157\u0361\157\u038d\157" +
    "\u039b\157\u03bf\157\u03eb\157\u03f9\157\u01f1\157\u0425" +
    "\157\u01d3\157\u0463\157\u049f\157\u04a1\157\u022f\157" +
    "\u01df\157\u041b\157\u022b\157\u023b\157\u04c9\157\u04d5" +
    "\157\u0511\157\u0381\157\u054d\157\u0589\157\u03af\157" +
    "\u01d1\157\u04b5\157\u03d7\157\u05c3\157\u01d9\157\u05d3" +
    "\157\u05e3\157\u05f1\157\u0621\157\u065b\157\u01e3\157" +
    "\u01f3\157\u066f\157\u01e5\157\u06a9\157\u06b5\157\u06c9" +
    "\157\u0705\157\u06e9\157\u0727\157\u01f9\157\u0763\157" +
    "\u01ed\157\u01f3\157\u0207\157\u0747\157\u023b\157\u0775" +
    "\157\u07a3\157\u07b7\157\u0707\157\u024b\157\u029d\157" +
    "\u02ad\157\u07d9\157\u07db\157\u07fb\157\u0203\157\u02d7" +
    "\157\u02e7\157\u020b\157\u0817\157\u081d\157\u0227\157" +
    "\u0857\157\u0869\157\u0875\157\u08a5\157\u0231\157\u0889" +
    "\157\u08b7\157\u023b\157\u08e5\157\u08f7\157\u070b\157" +
    "\u02f9\157\u090f\157\u034b\157\u035b\157\u08f9\157\u0921" +
    "\157\u0247\157\u0385\157\u0395\157\u024d\157\u0933\157" +
    "\u0945\157\u0253\157\u097f\157\u0991\157\u09a9\157\u047d" +
    "\157\u0423\157\u0483\157\u04b7\157\u0529\157\u0565\157" +
    "\u02fb\157\u028b\157\u0387\157\u02b7\157\u0447\157\u0461" +
    "\157\u029f\157\u02f1\157\u0309\157\u0995\157\u03bd\157" +
    "\u09a5\157\u09c7\157\u03cf\157\u09cb\157\u0481\157\u046d" +
    "\157\u09f7\157\u03a9\157\u04d9\157\u04e3\157\u09fb\157" +
    "\u0a27\157\u0a41\157\u0a63\157\u0aa1\157\u0ab9\157\u0abf" +
    "\157\u0ad9\157\u0adf\157\u04eb\157\u0589\157\u052d\157" +
    "\u031d\157\u0531\157\u0495\157\u032b\157\u0335\157\u0357" +
    "\157\u049b\157\u0543\157\u0547\157\u0567\157\u056b\157" +
    "\u03e3\157\u051b\157\u0565\157\u0a1d\157\u0585\157\u059f" +
    "\157\u05a9\157\u05a7\157\u0a57\157\u05d9\157\u05f1\157" +
    "\u0a5f\157\u0b17\157\u0605\157\u060f\157\u0613\157\163" +
    "\234\157\161\157\165\157\000\233\156\157\000" +
    "\157\000\157\000\157\000\157\000\157\000\160" +
    "\265\160\260\161\151\207\233\161\151\161\151" +
    "\161\151\161\151\161\151\161\151\214\046\241" +
    "\246\244\037\253\333\255\313\227\231\157\000" +
    "\256\310\205\153\242\036\160\251\205\212\242" +
    "\244\257\307\214\046\162\000\161\151\162\000" +
    "\162\000\162\000\162\000\162\000\162\000\164" +
    "\166\205\211\242\211\164\173\164\172\164\201" +
    "\164\204\164\176\164\175\164\174\164\205\164" +
    "\171\165\005\261\303\274\277\216\043\162\000" +
    "\213\044\277\277\164\167\164\177\164\203\164" +
    "\200\217\223\165\005\165\005\164\170\165\005" +
    "\213\230\216\043\165\005\213\044\164\207\302" +
    "\304\166\011\165\005\165\005\217\222\307\311" +
    "\165\005\165\005\167\016\266\230\312\314\165" +
    "\005\165\005\166\011\166\011\324\327\166\011" +
    "\266\131\327\327\166\011\167\016\167\016\332" +
    "\334\167\016\166\011\166\011\167\016\345\u0108" +
    "\166\011\166\011\170\012\167\016\167\016\166" +
    "\011\166\011\167\016\167\016\171\022\267\116" +
    "\267\116\167\016\167\016\170\012\170\012\352" +
    "\070\170\012\270\274\270\275\170\012\171\022" +
    "\171\022\347\066\171\022\170\012\170\012\171" +
    "\022\347\030\170\012\170\012\172\023\171\022" +
    "\171\022\170\012\170\012\171\022\171\022\173" +
    "\014\275\117\275\117\171\022\171\022\172\023" +
    "\172\023\344\073\172\023\276\033\276\033\172" +
    "\023\173\014\173\014\353\031\173\014\172\023" +
    "\172\023\173\014\353\031\172\023\172\023\174" +
    "\015\173\014\173\014\172\023\172\023\173\014" +
    "\173\014\175\017\316\230\354\356\173\014\173" +
    "\014\174\015\174\015\u0105\u0107\174\015\316\126" +
    "\344\073\174\015\175\017\175\017\u0108\030\175" +
    "\017\174\015\174\015\175\017\u0109\075\174\015" +
    "\174\015\176\010\175\017\175\017\174\015\174" +
    "\015\175\017\175\017\177\006\320\114\320\114" +
    "\175\017\175\017\176\010\176\010\u010a\u010c\176" +
    "\010\321\324\321\325\176\010\177\006\177\006" +
    "\u0120\157\177\006\176\010\176\010\177\006\346" +
    "\350\176\010\176\010\200\021\177\006\177\006" +
    "\176\010\176\010\177\006\177\006\223\045\325" +
    "\115\325\115\177\006\177\006\200\021\200\021" +
    "\366\366\200\021\326\032\326\032\200\021\201" +
    "\047\201\047\223\045\201\047\200\021\200\021" +
    "\202\007\u0120\157\200\021\200\021\346\354\226" +
    "\041\201\047\200\021\200\021\201\047\201\047" +
    "\356\063\202\007\202\007\201\047\202\007\226" +
    "\230\356\063\202\007\226\041\361\364\366\374" +
    "\203\020\202\007\202\007\231\040\361\363\202" +
    "\007\202\007\204\013\u0110\077\u0110\077\202\007" +
    "\202\007\203\020\203\020\231\230\203\020\u0120" +
    "\157\231\040\203\020\204\013\204\013\u0120\157" +
    "\204\013\203\020\203\020\204\013\u0120\157\203" +
    "\020\203\020\206\024\204\013\204\013\203\020" +
    "\203\020\204\013\204\013\u0120\157\215\042\u0120" +
    "\157\204\013\204\013\206\024\206\024\u0120\157" +
    "\206\024\350\071\350\071\206\024\337\u010d\337" +
    "\u010f\337\u010e\215\042\206\024\206\024\215\225" +
    "\215\226\206\024\206\024\351\155\351\350\210" +
    "\166\206\024\206\024\210\173\210\172\210\201" +
    "\210\204\210\176\210\175\210\174\210\205\210" +
    "\171\u0120\157\336\112\363\067\363\067\340\000" +
    "\364\064\350\071\210\167\210\177\210\203\210" +
    "\200\364\064\336\112\u0107\u0109\210\170\340\346" +
    "\u010b\074\210\216\211\166\351\354\210\207\211" +
    "\173\211\172\211\201\211\204\211\176\211\175" +
    "\211\174\211\205\211\171\341\110\212\051\212" +
    "\051\336\112\212\051\363\067\340\000\211\167" +
    "\211\177\211\203\211\200\341\110\230\034\212" +
    "\051\211\170\u0107\354\212\051\212\051\u010b\074" +
    "\341\110\211\207\212\051\220\035\230\034\220" +
    "\212\u0120\157\230\034\221\050\221\050\367\061" +
    "\221\050\230\034\341\110\220\035\370\060\367" +
    "\061\220\035\220\211\u0102\062\221\050\370\060" +
    "\220\035\221\050\221\050\u0102\062\222\166\u0120" +
    "\157\221\050\222\173\222\172\222\201\222\204" +
    "\222\176\222\175\222\174\222\205\222\171\342" +
    "\113\u0104\072\u0104\072\u0106\065\u0106\065\u0111\u0114" +
    "\u0111\u0115\222\167\222\177\222\203\222\200\342" +
    "\113\u0120\157\u010c\107\222\170\u010d\103\u0120\157" +
    "\222\216\224\166\342\340\222\207\224\173\224" +
    "\172\224\201\224\204\224\176\224\175\224\174" +
    "\224\205\224\171\343\111\u010e\105\342\113\u010f" +
    "\366\u0104\072\u0120\157\u0106\065\224\167\224\177" +
    "\224\203\224\200\343\111\u0112\100\u0112\100\224" +
    "\170\u010c\107\u0114\366\u010d\103\225\166\343\111" +
    "\224\207\225\173\225\172\225\201\225\204\225" +
    "\176\225\175\225\174\225\205\225\171\u0103\076" +
    "\u0103\076\343\111\u010e\105\u0116\366\u010f\374\u0103" +
    "\076\225\167\225\177\225\203\225\200\u0115\101" +
    "\u0115\101\u0120\157\225\170\u0117\u0119\u0117\u0115\u0120" +
    "\157\u0114\374\232\152\225\207\232\152\232\152" +
    "\232\152\232\152\232\152\232\152\234\240\u0119" +
    "\366\234\141\234\141\234\141\234\141\234\141" +
    "\234\141\235\147\u0116\374\235\147\235\147\235" +
    "\147\235\147\235\147\235\147\232\152\236\254" +
    "\236\262\236\265\236\260\236\257\236\256\u011d" +
    "\000\234\141\u011a\u011c\u011a\u0115\u0120\157\u011e\350" +
    "\u011f\154\u011f\350\u0120\157\235\147\u0119\374\u011d" +
    "\346\u0120\157\u0120\157\237\166\u0120\157\236\251" +
    "\237\173\237\172\237\201\237\204\237\176\237" +
    "\175\237\174\237\205\237\171\u0120\157\u0120\157" +
    "\u0120\157\u0120\157\u0120\157\u0120\157\u011d\000\237" +
    "\167\237\177\237\203\237\200\u011e\354\u0120\157" +
    "\u011f\354\237\170\u0120\157\u0120\157\u0120\157\u0120" +
    "\157\240\150\237\207\240\150\240\150\240\150" +
    "\240\150\240\150\240\150\243\166\u0120\157\u0120" +
    "\157\243\173\243\172\243\201\243\204\243\176" +
    "\243\175\243\174\243\205\243\171\u0120\157\u0120" +
    "\157\243\245\u0120\157\240\150\u0120\157\u0120\157" +
    "\243\167\243\177\243\203\243\200\u0120\157\u0120" +
    "\157\u0120\157\243\170\u0120\157\u0120\157\u0120\157" +
    "\u0120\157\245\146\243\207\245\146\245\146\245" +
    "\146\245\146\245\146\245\146\246\140\246\140" +
    "\246\140\246\140\246\140\246\140\247\132\u0120" +
    "\157\u0120\157\u0120\157\u0120\157\u0120\157\247\132" +
    "\247\132\u0120\157\u0120\157\245\146\247\132\u0120" +
    "\157\u0120\157\u0120\157\u0120\157\246\140\u0120\157" +
    "\u0120\157\247\132\251\145\251\145\251\145\251" +
    "\145\251\145\251\145\247\132\u0120\157\u0120\157" +
    "\u0120\157\250\003\u0120\157\247\132\250\003\250" +
    "\003\250\003\250\003\250\003\250\003\250\003" +
    "\250\003\250\003\251\145\265\302\u0120\157\315" +
    "\332\265\005\252\000\315\005\250\003\250\003" +
    "\250\003\250\003\252\265\252\260\265\005\250" +
    "\003\315\005\252\000\265\005\u0120\157\315\005" +
    "\250\003\265\005\u0120\157\315\005\252\340\260" +
    "\144\260\144\260\144\260\144\260\144\260\144" +
    "\252\251\u0120\157\u0120\157\u0120\157\254\316\u0120" +
    "\157\252\000\254\173\254\172\254\201\254\204" +
    "\254\176\254\175\254\174\254\205\254\171\260" +
    "\144\262\143\262\143\262\143\262\143\262\143" +
    "\262\143\254\167\254\177\254\203\254\200\u0120" +
    "\157\u0120\157\u0120\157\254\170\u0120\157\u0120\157" +
    "\u0120\157\u0120\157\u0120\157\254\323\u0120\157\u0120" +
    "\157\262\143\263\142\263\142\263\142\263\142" +
    "\263\142\263\142\264\266\u0120\157\u0120\157\264" +
    "\173\264\172\264\201\264\204\264\176\264\175" +
    "\264\174\264\205\264\171\u0120\157\u0120\157\u0120" +
    "\157\u0120\157\263\142\271\127\u0120\157\264\167" +
    "\264\177\264\203\264\200\271\127\271\127\u0120" +
    "\157\264\170\u0120\157\271\127\u0120\157\272\033" +
    "\272\033\264\273\272\024\273\121\u0120\157\271" +
    "\127\u0120\157\u0120\157\u0120\157\273\121\273\121" +
    "\272\024\271\127\u0120\157\273\121\272\024\u0120" +
    "\157\300\130\271\127\272\024\301\123\u0120\157" +
    "\273\121\300\130\300\130\u0120\157\301\123\301" +
    "\123\300\130\273\121\u0120\157\301\123\u0120\157" +
    "\u0120\157\u0120\157\273\121\300\130\u0120\157\u0120" +
    "\157\301\123\u0120\157\u0120\157\u0120\157\300\130" +
    "\u0120\157\u0120\157\301\123\u0120\157\u0120\157\300" +
    "\130\u0120\157\u0120\157\301\123\303\002\303\002" +
    "\303\002\303\002\303\002\303\002\u0120\157\u0120" +
    "\157\303\306\304\136\304\136\304\136\304\136" +
    "\304\136\304\136\305\001\305\001\305\001\305" +
    "\001\305\001\305\001\u0120\157\303\002\u0120\157" +
    "\u0120\157\310\002\310\002\310\002\310\002\310" +
    "\002\310\002\304\136\u0120\157\310\306\u0120\157" +
    "\306\004\u0120\157\305\001\306\004\306\004\306" +
    "\004\306\004\306\004\306\004\306\004\306\004" +
    "\306\004\310\002\311\135\311\135\311\135\311" +
    "\135\311\135\311\135\306\004\306\004\306\004" +
    "\306\004\u0120\157\u0120\157\u0120\157\306\004\u0120" +
    "\157\u0120\157\u0120\157\u0120\157\u0120\157\306\004" +
    "\u0120\157\u0120\157\311\135\313\002\313\002\313" +
    "\002\313\002\313\002\313\002\u0120\157\u0120\157" +
    "\313\306\314\134\314\134\314\134\314\134\314" +
    "\134\314\134\u0120\157\u0120\157\317\124\322\032" +
    "\322\032\u0120\157\322\024\313\002\317\124\317" +
    "\124\u0120\157\323\120\u0120\157\317\124\u0120\157" +
    "\322\024\314\134\323\120\323\120\322\024\330" +
    "\125\317\124\323\120\322\024\u0120\157\u0120\157" +
    "\330\125\330\125\317\124\331\122\323\120\330" +
    "\125\u0120\157\u0120\157\317\124\331\122\331\122" +
    "\323\120\u0120\157\330\125\331\122\u0120\157\u0120" +
    "\157\323\120\u0120\157\u0120\157\330\125\u0120\157" +
    "\331\122\u0120\157\u0120\157\u0120\157\330\125\u0120" +
    "\157\u0120\157\331\122\u0120\157\u0120\157\u0120\157" +
    "\u0120\157\u0120\157\331\122\333\002\333\002\333" +
    "\002\333\002\333\002\333\002\u0120\157\355\000" +
    "\333\306\334\137\334\137\334\137\334\137\334" +
    "\137\334\137\357\056\u0120\157\335\133\u0120\157" +
    "\355\000\u0120\157\u0120\157\333\002\335\133\335" +
    "\133\355\000\u0120\157\357\056\335\133\u0120\157" +
    "\355\000\334\137\360\366\357\056\362\000\u0120" +
    "\157\335\133\u0120\157\357\056\355\000\355\000" +
    "\u0120\157\u0120\157\335\133\360\000\u0120\157\362" +
    "\000\357\056\357\056\335\133\360\000\u0120\157" +
    "\362\000\u0120\157\u0120\157\360\367\365\026\362" +
    "\000\371\054\u0120\157\u0120\157\u0120\157\u0120\157" +
    "\u0120\157\360\374\360\372\362\000\362\000\365" +
    "\026\365\026\371\054\u0120\157\365\026\u0120\157" +
    "\365\026\u0113\104\371\054\u0120\157\u0120\157\365" +
    "\026\372\000\371\054\u0120\157\u0120\157\u0120\157" +
    "\u0120\157\u0113\104\u0120\157\365\026\365\026\371" +
    "\054\371\054\372\000\373\027\u0113\104\u0120\157" +
    "\372\376\u0120\157\372\000\u0120\157\u0120\157\u0120" +
    "\157\u0120\157\372\000\u0118\102\373\027\373\027" +
    "\u0113\104\u011b\106\373\027\374\057\373\027\372" +
    "\000\372\000\u0120\157\u0118\102\373\027\u0120\157" +
    "\u0120\157\u011b\106\u0120\157\u0120\157\374\057\u0118" +
    "\102\u0120\157\373\027\373\027\u011b\106\374\057" +
    "\u0120\157\u0120\157\u0120\157\u0120\157\374\057\u0120" +
    "\157\u0120\157\u0118\102\u0120\157\u0120\157\u0120\157" +
    "\u011b\106\375\166\374\057\374\057\375\173\375" +
    "\172\375\201\375\204\375\176\375\175\375\174" +
    "\375\205\375\171\376\052\u0120\157\u0120\157\377" +
    "\055\u0120\157\u0120\157\u0120\157\375\167\375\177" +
    "\375\203\375\200\u0120\157\376\052\u0120\157\375" +
    "\170\377\055\u0100\025\u0120\157\376\052\u0101\053" +
    "\375\207\377\055\u0120\157\376\052\u0120\157\u0120" +
    "\157\377\055\u0120\157\u0100\025\u0120\157\u0120\157" +
    "\u0101\053\376\052\376\052\u0100\025\377\055\377" +
    "\055\u0101\053\u0120\157\u0100\025\u0120\157\u0120\157" +
    "\u0101\053\u0120\157\u0120\157\u0120\157\u0120\157\u011c" +
    "\000\u0100\025\u0100\025\u0120\157\u0101\053\u0101\053" +
    "\u011c\265\u011c\260\u0120\157\u0120\157\u0120\157\u011c" +
    "\000\u0120\157\u0120\157\u0120\157\u0120\157\u0120\157" +
    "\u0120\157\u0120\157\u011c\340\u0120\157\u0120\157\u0120" +
    "\157\u0120\157\u0120\157\u0120\157\u011c\251\u0120\157" +
    "\u0120\157\u0120\157\u0120\157\u0120\157\u011c\000\u0120" +
    "\157\000\u0167\000\261\261\261\262\261\261\261" +
    "\261\261\261\261\261\261\261\261\261\261\261" +
    "\261\261\261\261\261\261\261\266\262\261\261" +
    "\261\261\261\261\261\261\275\261\276\305\261" +
    "\261\261\261\261\261\261\261\276\310\261\261" +
    "\261\263\261\261\261\261\261\261\343\261\342" +
    "\261\261\261\261\261\261\261\345\261\274\261" +
    "\261\261\261\261\261\261\261\344\261\261\261" +
    "\261\261\261\261\261\263\261\261\265\261\261" +
    "\276\261\261\261\261\261\266\261\261\361\261" +
    "\261\261\266\261\261\261\261\270\261\265\261" +
    "\261\261\362\303\261\365\316\261\261\377\261" +
    "\261\372\261\u0101\261\261\261\261\261\261\261" +
    "\361\261\261\372\261\261\261\261\261\261\261" +
    "\261\261\263\261\327\261\261\352\351\353\u0107" +
    "\261\261\261\261\u0100\261\u0112\261\261\u0114\261" +
    "\261\u0121\u0128\u0130\u012b\004\003\000\055\057\000" +
    "\125\075\132\255\135\155\061\000\000\070\072" +
    "\167\067\116\075\101\073\002\056\146\103\104" +
    "\070\164\165\224\232\000\000\223\022\033\033" +
    "\000\026\022\040\035\037\041\030\034\022\022" +
    "\044\037\041\041\034\052\022\075\120\022\041" +
    "\150\047\063\062\156\142\111\111\141\110\110" +
    "\226\157\161\162\172\163\140\121\112\142\175" +
    "\171\141\022\225\217\022\041\233\137\041\151" +
    "\107\173\210\220\173\202\177\200\205\200\213" +
    "\222\252\247\240\221\224\000\242\246\241\000" +
    "\215\224\211\075\243\241\201\250\201\253\000" +
    "\156\224\257\224\243\241\243\241\157\256\162" +
    "\260\163\225\000\165\000\000\171\000\000\000" +
    "\000\000\000\173\000\000\000\000\173\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000";
  }

  /** Instance of action encapsulation class. */
  protected CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    /* declare "error" as a terminal */
    symbols.put("error", new symbol_part(terminal.error));

    /* declare start non terminal */
    non_terms.put("$START", non_terminal.START_nt);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;
  
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$left, CUP$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-7);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0",46, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_spec ::= PACKAGE multipart_id NT$0 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_list ::= import_list import_spec 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-2);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= code_parts code_part 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // symbol_list ::= symbol_list symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1",47, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol ::= TERMINAL type_id NT$1 declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL declares_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              java_cup.runtime.Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2",48, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // symbol ::= non_terminal type_id NT$2 declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal declares_non_term 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= TERMINAL error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= non_terminal error SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declares_term ::= term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term",28, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_non_term ::= non_term_name_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term",29, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // precedence_list ::= precedence_l 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_l ::= precedence_l preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= preced 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {

	  update_precedence(assoc.left);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3",49, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // preced ::= PRECEDENCE LEFT NT$3 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {

	  update_precedence(assoc.right);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4",50, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // preced ::= PRECEDENCE RIGHT NT$4 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$5 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5",51, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // preced ::= PRECEDENCE NONASSOC NT$5 terminal_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_id 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_id ::= term_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id",34, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term_id ::= symbol_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id",35, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.peek();
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6",52, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // start_spec ::= START WITH nt_id NT$6 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symstart_name = CUP$stack.elementAt(CUP$size-3);
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= empty 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // production_list ::= production_list production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$7 ::= 
            {
              java_cup.runtime.Symbol CUP$symlhs_id = CUP$stack.peek();
              int lhs_idleft = CUP$symlhs_id.left;
              int lhs_idright = CUP$symlhs_id.right;
              String lhs_id = (String) CUP$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7",53, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // production ::= nt_id NT$7 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              int lhs_idleft = CUP$left.left;
              int lhs_idright = CUP$left.right;
              String lhs_id = (String) CUP$left.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$8 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8",54, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // production ::= error NT$8 SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rhs_list ::= rhs_list BAR rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_nameleft = CUP$right.left;
              int term_nameright = CUP$right.right;
              String term_name = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int precsymleft = CUP$right.left;
              int precsymright = CUP$right.right;
              symbol precsym = (symbol) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int rhsleft = CUP$left.left;
              int rhsright = CUP$left.right;
              ArrayList<production_part> rhs = (ArrayList<production_part>) CUP$left.value;

	  if (lhs_nt != null) 
	    {
	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}

	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs",22, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int prodleft = CUP$right.left;
              int prodright = CUP$right.right;
              production_part prod = (production_part) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              ArrayList<production_part> list = (ArrayList<production_part>) CUP$left.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = new ArrayList<production_part>(); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int symidleft = CUP$left.left;
              int symidright = CUP$left.right;
              String symid = (String) CUP$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int code_strleft = CUP$right.left;
              int code_strright = CUP$right.right;
              String code_str = (String) CUP$right.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= empty 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int another_idleft = CUP$right.left;
              int another_idright = CUP$right.right;
              String another_id = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$symtypes = CUP$stack.elementAt(CUP$size-2);
              int typesleft = CUP$symtypes.left;
              int typesright = CUP$symtypes.right;
              String types = (String) CUP$symtypes.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int an_idleft = CUP$right.left;
              int an_idright = CUP$right.right;
              String an_id = (String) CUP$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typearglist ::= typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              String list = (String) CUP$left.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeargument ::= type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= wildcard 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int wleft = CUP$right.left;
              int wright = CUP$right.right;
              String w = (String) CUP$right.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "?"; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int term_idleft = CUP$right.left;
              int term_idright = CUP$right.right;
              String term_id = (String) CUP$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id",19, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_non_term_id ::= ID 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int non_term_idleft = CUP$right.left;
              int non_term_idright = CUP$right.right;
              String non_term_id = (String) CUP$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id",20, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // nt_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id",32, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= CODE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "code"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= ACTION 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "action"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= PARSER 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "parser"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "terminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= NON 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "non"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonterminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= INIT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "init"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= SCAN 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "scan"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= WITH 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "with"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= START 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "start"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "precedence"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= LEFT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "left"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "right"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonassoc"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= error 
            {
              String RESULT =null;
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_terminal ::= NON TERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              java_cup.runtime.Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // empty ::= 
            {
              java_cup.runtime.Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty",23, CUP$right, CUP$right);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

