
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Sat Nov 15 23:55:52 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081115 generated parser.
  * @version Sat Nov 15 23:55:52 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\336\000\002\040\007\040\005\001\003\001\000" +
    "\002\002\002\000\020\003\011\001\011\001\011" +
    "\001\011\001\011\001\011\001\010\000\010\002" +
    "\003\003\003\006\004\003\005\003\005\001\006" +
    "\001\006\003\007\004\014\004\021\004\022\004" +
    "\015\002\015\001\023\005\057\000\023\003\023" +
    "\005\060\000\023\003\023\003\023\003\024\003" +
    "\024\001\025\003\025\001\033\002\033\000\034" +
    "\004\035\001\035\001\035\001\036\003\036\001" +
    "\037\001\053\001\016\004\016\000\017\002\017" +
    "\001\026\005\061\000\026\002\031\003\031\001" +
    "\056\002\056\000\032\002\055\002\055\000\054" +
    "\002\054\001\043\002\043\000\050\003\050\001" +
    "\045\001\045\003\046\001\046\001\047\001\047" +
    "\003\047\003\051\003\051\001\052\001\052\003" +
    "\052\004\027\001\030\001\041\001\041\001\041" +
    "\001\041\001\042\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\013\002\013\001\012" +
    "\000\012\001\261\261\271\361\261\261\u0131\275" +
    "\261\u0173\301\261\261\261\261\261\261\261\261" +
    "\261\261\261\261\261\261\261\261\261\261\261" +
    "\263\263\261\273\261\261\u0183\u019b\275\261\261" +
    "\323\261\261\301\303\261\261\263\261\371\261" +
    "\u01dd\u021d\u022f\261\261\261\345\u026d\265\u010d\261" +
    "\261\u0125\u014f\313\351\u01d1\261\261\313\323\u0103" +
    "\u02ad\371\u0117\u02ed\261\261\261\261\261\u0189\261" +
    "\261\261\261\261\261\u0117\261\u0117\375\261\u018b" +
    "\261\u0191\u01b9\261\261\261\u0211\u0147\u0289\261\261" +
    "\u032d\261\u0125\u0131\u01e1\u0149\u0167\u023f\261\u0183\u01bb" +
    "\u036d\261\u03ad\u03ed\261\261\u01b1\u0243\261\261\261" +
    "\261\261\u01ab\261\u01bd\u01e9\261\u042d\u01f3\u01ff\261" +
    "\u046d\u04ad\u02a1\261\u01ed\u0205\261\261\u022b\261\261" +
    "\261\261\u0273\261\261\261\261\u0309\261\u026d\261" +
    "\u02e1\u0233\261\261\u0321\261\u0245\261\261\261\261" +
    "\261\u04ed\261\261\261\u0537\000\000\000\016\000" +
    "\000\000\332\000\126\072\326\272\274\276\300" +
    "\302\306\310\312\314\316\320\322\324\304\270" +
    "\266\216\000\036\002\326\260\262\256\254\000" +
    "\116\250\242\076\330\326\000\122\252\104\070" +
    "\152\010\000\000\000\014\110\100\000\000\000" +
    "\000\112\106\000\000\000\000\000\124\214\240" +
    "\000\000\000\000\000\000\024\022\026\040\030" +
    "\126\032\034\256\254\114\230\000\220\226\224" +
    "\244\000\120\000\000\132\134\136\000\000\000" +
    "\156\162\000\020\000\272\000\000\000\000\052" +
    "\054\152\000\246\000\000\074\102\000\000\142" +
    "\146\144\164\154\000\236\334\334\042\000\334" +
    "\334\046\000\000\000\222\234\232\150\130\000" +
    "\202\336\060\062\000\064\066\050\056\000\140" +
    "\000\170\174\000\160\202\000\206\212\200\176" +
    "\044\166\172\000\204\210\264\000\003\004\077" +
    "\000\005\000\012\036\151\000\012\000\012\000" +
    "\012\000\012\000\012\000\012\001\013\001\015" +
    "\006\125\035\145\011\013\011\015\035\147\040" +
    "\157\045\161\045\163\053\173\054\175\054\177" +
    "\101\303\051\167\057\167\000\012\073\273\106" +
    "\325\107\327\001\017\002\027\050\147\000\012" +
    "\011\017\002\031\002\033\002\035\002\037\002" +
    "\041\002\043\002\045\002\047\002\051\110\331" +
    "\050\165\112\337\061\203\102\305\102\307\102" +
    "\311\002\053\002\055\002\057\002\061\061\205" +
    "\071\103\071\105\002\063\071\253\071\255\113" +
    "\341\134\167\005\101\131\353\002\065\002\067" +
    "\005\031\005\033\005\035\005\037\005\041\005" +
    "\043\005\045\005\047\005\051\074\103\074\105" +
    "\131\355\074\253\074\255\133\357\133\361\005" +
    "\053\005\055\005\057\005\061\146\u0101\077\103" +
    "\077\105\005\063\077\253\077\255\154\u0109\005" +
    "\103\005\105\010\127\005\107\005\111\155\u010b" +
    "\010\031\010\033\010\035\010\037\010\041\010" +
    "\043\010\045\010\047\010\051\100\103\100\105" +
    "\157\u0111\100\253\100\255\122\013\122\015\010" +
    "\053\010\055\010\057\010\061\043\270\136\363" +
    "\136\163\010\063\140\365\140\177\160\u0113\010" +
    "\103\010\105\043\270\010\107\010\111\044\266" +
    "\043\270\122\017\043\270\043\270\163\u0119\043" +
    "\270\043\270\173\u0123\044\266\202\u0129\103\315" +
    "\164\203\044\266\204\u012b\044\266\044\266\063" +
    "\027\044\266\044\266\164\205\063\031\063\033" +
    "\063\035\063\037\063\041\063\043\063\045\063" +
    "\047\063\051\141\103\141\105\156\u010d\141\253" +
    "\141\255\156\147\205\u012b\063\053\063\055\063" +
    "\057\063\061\210\u012b\103\103\103\105\063\063" +
    "\103\253\103\255\211\u012b\156\u010f\064\027\217" +
    "\167\063\065\063\067\064\031\064\033\064\035" +
    "\064\037\064\041\064\043\064\045\064\047\064" +
    "\051\220\167\065\221\065\223\065\013\065\015" +
    "\065\225\065\227\064\053\064\055\064\057\064" +
    "\061\242\u0155\145\103\145\105\064\063\145\253" +
    "\145\255\161\u0115\161\u0117\174\u0125\174\u0127\064" +
    "\065\064\067\065\017\247\u015b\223\103\223\105" +
    "\072\027\223\253\223\255\065\231\072\031\072" +
    "\033\072\035\072\037\072\041\072\043\072\045" +
    "\072\047\072\051\237\u0147\147\315\147\006\261" +
    "\000\230\353\261\000\237\u0149\072\053\072\055" +
    "\072\057\072\061\261\000\261\000\215\315\072" +
    "\063\261\000\261\000\072\261\230\u0145\111\027" +
    "\261\000\072\065\072\067\111\333\111\033\111" +
    "\035\111\037\111\041\111\043\111\045\111\047" +
    "\111\051\147\103\147\105\261\000\147\253\147" +
    "\255\261\000\261\000\111\053\111\055\111\057" +
    "\111\061\261\000\215\103\215\105\111\063\215" +
    "\253\215\255\261\000\261\000\114\027\261\000" +
    "\111\065\111\067\114\031\114\033\114\035\114" +
    "\037\114\041\114\043\114\045\114\047\114\051" +
    "\261\000\235\315\235\004\261\000\261\000\241" +
    "\u014b\261\000\114\053\114\055\114\057\114\061" +
    "\261\000\241\103\241\105\114\063\241\253\241" +
    "\255\241\u014d\261\000\152\027\261\000\114\065" +
    "\114\067\152\031\152\033\152\035\152\037\152" +
    "\041\152\043\152\045\152\047\152\051\235\103" +
    "\235\105\152\u0107\235\253\235\255\261\000\261" +
    "\000\152\053\152\055\152\057\152\061\261\000" +
    "\245\103\245\105\152\063\245\253\245\255\261" +
    "\000\261\000\165\027\261\000\152\065\152\067" +
    "\165\031\165\033\165\035\165\037\165\041\165" +
    "\043\165\045\165\047\165\051\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\261\000\165" +
    "\053\165\055\165\057\165\061\261\000\261\000" +
    "\261\000\165\063\261\000\261\000\165\261\261" +
    "\000\167\027\261\000\165\065\165\067\167\031" +
    "\167\033\167\035\167\037\167\041\167\043\167" +
    "\045\167\047\167\051\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\167\053\167" +
    "\055\167\057\167\061\261\000\261\000\261\000" +
    "\167\063\261\000\261\000\261\000\261\000\170" +
    "\027\261\000\167\065\167\067\170\031\170\033" +
    "\170\035\170\037\170\041\170\043\170\045\170" +
    "\047\170\051\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\170\053\170\055\170" +
    "\057\170\061\261\000\261\000\261\000\170\063" +
    "\261\000\261\000\261\000\261\000\207\027\261" +
    "\000\170\065\170\067\207\031\207\033\207\035" +
    "\207\037\207\041\207\043\207\045\207\047\207" +
    "\051\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\207\053\207\055\207\057\207" +
    "\061\261\000\261\000\261\000\207\063\261\000" +
    "\261\000\207\261\261\000\213\027\261\000\207" +
    "\065\207\067\213\031\213\033\213\035\213\037" +
    "\213\041\213\043\213\045\213\047\213\051\261" +
    "\000\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\213\053\213\055\213\057\213\061\261" +
    "\000\261\000\261\000\213\063\261\000\261\000" +
    "\261\000\261\000\214\027\261\000\213\065\213" +
    "\067\214\031\214\033\214\035\214\037\214\041" +
    "\214\043\214\045\214\047\214\051\261\000\261" +
    "\000\261\000\261\000\261\000\261\000\261\000" +
    "\214\053\214\055\214\057\214\061\261\000\261" +
    "\000\261\000\214\063\261\000\261\000\261\000" +
    "\261\000\255\027\261\000\214\065\214\067\255" +
    "\031\255\033\255\035\255\037\255\041\255\043" +
    "\255\045\255\047\255\051\261\000\261\000\261" +
    "\000\261\000\261\000\261\000\261\000\255\053" +
    "\255\055\255\057\255\061\261\000\261\000\261" +
    "\000\255\063\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\255\065\255\067\261\000\u013e" +
    "\260\260\260\260\260\261\260\260\262\261\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\261\260\263\271\340\260" +
    "\260\260\307\320\260\345\260\260\315\346\260" +
    "\261\356\260\260\260\260\260\302\260\260\352" +
    "\260\260\260\260\260\266\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\336\260" +
    "\260\260\342\260\357\260\321\344\260\260\260" +
    "\260\260\260\260\260\260\373\356\260\365\366" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\264\260\375\270\274\260\u0104\347\u0117\260" +
    "\260\260\260\260\u010a\u0102\260\260\260\260\260" +
    "\260\260\260\u0116\260\260\260\u010d\260\260\u0110" +
    "\u010f\260\351\260\260\260\260\260\357\260\260" +
    "\260\003\036\000\000\000\000\000\065\000\226" +
    "\010\010\011\227\103\066\010\231\012\060\045" +
    "\232\054\046\060\055\000\061\104\145\000\004" +
    "\164\047\056\034\034\034\105\035\050\050\051" +
    "\057\034\127\074\100\106\107\115\116\137\034" +
    "\117\047\120\156\010\121\122\056\161\162\123" +
    "\124\012\034\131\132\133\050\136\134\140\046" +
    "\147\055\173\174\175\202\176\150\201\047\056" +
    "\105\215\233\234\256\177\163\151\151\257\034" +
    "\260\216\133\050\104\134\034\034\237\240\050" +
    "\050\217\220\034\230\132\133\050\235\134\163" +
    "\236\253\176\201\150\247\241\176\000\000\000" +
    "\000\177\000\151\151\250\254\251\000\241"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
              java_cup.runtime.Symbol start_val$ = CUP$stack.elementAt(CUP$size - 2);
              Grammar start_val = (Grammar) start_val$.value;
RESULT = start_val;
              CUP$result = parser.getSymbolFactory().newSymbol("$START", 0, start_val$, CUP$stack.peek(), RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 7), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_spec ::= PACKAGE multipart_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_list ::= import_list import_spec 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec", 16, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= option_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= parser_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parser_spec ::= PARSER multipart_id SEMI 
            {
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
            {
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 3);
              String types = (String) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 6), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // option_spec ::= OPTION option_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_spec", 4, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // option_list ::= option_list COMMA option_ 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // option_list ::= option_ 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // option_ ::= robust_id 
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.peek();
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, opt$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // option_ ::= robust_id EQUALS robust_id 
            {
              java_cup.runtime.Symbol val$ = CUP$stack.peek();
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.elementAt(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, val$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part", 7, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part", 12, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code", 17, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code", 18, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol_list ::= symbol_list symbol 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= TERMINAL type_id NT$0 decl_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$0 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0", 47, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol ::= TERMINAL decl_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbol ::= non_terminal type_id NT$1 decl_non_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1", 48, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= non_terminal decl_non_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // symbol ::= TERMINAL error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // symbol ::= non_terminal error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl_term_list ::= decl_term_list COMMA new_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl_term_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decl_non_term_list ::= decl_non_term_list COMMA new_non_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl_non_term_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // precedence_list ::= precedence_list preced 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // precedence_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE assoc precterminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 28, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assoc ::= LEFT 
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assoc ::= RIGHT 
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assoc ::= NONASSOC 
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // precterminal_list ::= precterminal_list COMMA precterminal_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // precterminal_list ::= precterminal_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // precterminal_id ::= term_id 
            {
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
	
	  term.set_precedence(_cur_side, _cur_prec);
	
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_id", 31, term$, term$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term_id ::= symbol_id 
            {
              terminal RESULT = null;
              java_cup.runtime.Symbol sym$ = CUP$stack.peek();
              String sym = (String) sym$.value;
 RESULT = get_term(sym); 
              CUP$result = parser.getSymbolFactory().newSymbol("term_id", 43, sym$, sym$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH symbol_id SEMI 
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.elementAt(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // production ::= symbol_id NT$2 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.elementAt(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, lhs_id$, CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$2 ::= 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.peek();
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id);
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2", 49, lhs_id$, lhs_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // production ::= error SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rhs_list ::= rhs_list BAR rhs 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT = null;
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
 RESULT = term; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$stack.elementAt(CUP$size - 2), term$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= 
            {
              symbol RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.peek();
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> rhs = (ArrayList<production_part>) rhs$.value;

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      grammar.build_production(lhs_nt, rhs, (terminal) precsym);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs", 26, rhs$, precsym$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT = null;
              java_cup.runtime.Symbol prod$ = CUP$stack.peek();
              production_part prod = (production_part) prod$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> list = (ArrayList<production_part>) list$.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, list$, prod$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= 
            {
              ArrayList<production_part> RESULT = null;
 RESULT = new ArrayList<production_part>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symid$ = CUP$stack.elementAt(CUP$size - 2);
              String symid = (String) symid$.value;
 
	  /* try to look up the id */
	  symbol symb = symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = new symbol_part(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, symid$, labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= CODE_STRING 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol code_str$ = CUP$stack.peek();
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, code_str$, code_str$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_label ::= COLON label_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$stack.elementAt(CUP$size - 2), labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= 
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol another_id$ = CUP$stack.peek();
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, id$, another_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol an_id$ = CUP$stack.peek();
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, an_id$, an_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typearglist ::= typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, arg$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 3);
              String list = (String) list$.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, list$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typeargument ::= type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeargument ::= wildcard 
            {
              String RESULT = null;
              java_cup.runtime.Symbol w$ = CUP$stack.peek();
              String w = (String) w$.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, w$, w$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // wildcard ::= QUESTION 
            {
              String RESULT = null;
 RESULT = "?"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // wildcard ::= wildcard EXTENDS type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= wildcard SUPER type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 2);
              String types = (String) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol term_id$ = CUP$stack.peek();
              String term_id = (String) term_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */
	      terminal term = grammar.add_terminal(term_id, _cur_symbol_type);
	      symbols.put(term_id, term);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id", 23, term_id$, term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_non_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol non_term_id$ = CUP$stack.peek();
              String non_term_id = (String) non_term_id$.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
              	grammar.add_non_terminal(non_term_id, _cur_symbol_type); 

	      /* put it in the symbols table */ 
	      symbols.put(non_term_id, this_nt);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id", 24, non_term_id$, non_term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // symbol_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // symbol_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= SUPER 
            {
              String RESULT = null;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= EXTENDS 
            {
              String RESULT = null;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id", 34, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT = null;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT = null;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT = null;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT = null;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT = null;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT = null;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT = null;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT = null;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT = null;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT = null;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT = null;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT = null;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT = null;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT = null;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT = null;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
