
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Sun May 02 14:26:08 CEST 2010
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081115 generated parser.
  * @version Sun May 02 14:26:08 CEST 2010
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\302\000\002\036\007\036\005\001\003\001\000" +
    "\002\002\002\000\017\003\011\001\010\000\010" +
    "\002\003\003\003\006\004\003\005\003\005\001" +
    "\006\001\006\003\007\004\013\004\020\004\021" +
    "\004\014\002\014\001\022\005\053\000\022\003" +
    "\023\001\023\002\023\001\024\003\024\001\025" +
    "\001\026\002\026\000\027\004\030\001\030\001" +
    "\030\001\031\003\031\001\032\001\015\004\015" +
    "\000\016\002\016\001\033\005\054\000\033\002" +
    "\034\003\034\001\052\002\052\000\035\002\051" +
    "\002\051\000\050\002\050\001\040\002\040\000" +
    "\042\003\042\001\043\003\043\001\044\001\044" +
    "\003\044\004\045\001\045\003\046\001\046\001" +
    "\047\001\047\003\047\003\037\001\037\001\037" +
    "\001\037\001\041\001\041\001\041\001\041\001" +
    "\041\001\041\001\041\001\041\001\041\001\041" +
    "\001\041\001\041\001\041\001\041\001\041\001" +
    "\041\001\041\001\012\000\012\001\243\u0479\u019f" +
    "\u0431\265\317\243\351\243\u019b\243\257\243\243" +
    "\243\243\243\243\243\243\243\243\243\243\243" +
    "\243\243\243\243\243\u0213\245\243\243\243\u01fb" +
    "\u01c7\243\243\u0253\u023b\u01fb\243\243\u01ef\255\243" +
    "\u03f1\u03b1\u045f\243\u015d\u02e1\u01a5\243\243\243\u02a5" +
    "\u01b1\u025b\u028d\243\u01cf\u01bd\315\u0371\u014b\u013f\u0331" +
    "\243\243\243\243\243\u011b\243\243\u0265\243\243" +
    "\243\u024d\u01b9\243\243\u014d\243\u020b\243\243\u0241" +
    "\u0137\243\u0257\243\u0187\u0171\243\u0287\u026b\365\u0267" +
    "\u0265\u017b\243\u025f\u01f9\u01b5\u0107\243\243\243\243" +
    "\u0207\u0131\243\u02f1\u02b1\243\243\u020b\u01f3\243\361" +
    "\u01b3\261\243\u0271\u0231\u0125\243\243\u0225\263\243" +
    "\u022f\u021d\243\243\243\373\243\243\243\243\315" +
    "\243\u0131\243\243\u01b1\243\251\u020d\243\247\243" +
    "\243\243\243\243\u01f1\243\243\u04c5\000\000\000" +
    "\016\000\070\000\074\106\060\000\276\242\244" +
    "\246\250\252\256\260\262\264\266\270\272\274" +
    "\254\240\236\174\000\024\002\072\056\130\276" +
    "\232\234\240\236\000\100\102\202\064\010\000" +
    "\000\000\014\000\000\000\104\066\066\000\000" +
    "\000\000\172\200\000\000\000\000\000\000\022" +
    "\022\022\026\022\106\022\022\000\112\114\116" +
    "\000\000\230\226\000\134\000\076\220\214\000" +
    "\210\216\204\000\000\020\000\242\000\000\000" +
    "\000\040\042\130\000\000\122\124\142\132\000" +
    "\000\206\000\000\062\176\300\300\030\000\300" +
    "\300\034\000\000\000\126\110\000\160\212\224" +
    "\222\302\046\050\000\052\054\036\044\000\120" +
    "\000\146\152\000\136\160\000\164\170\156\154" +
    "\032\144\150\000\162\166\224\000\036\000\232" +
    "\000\227\000\036\137\054\000\012\107\174\000" +
    "\204\000\003\000\012\031\012\033\012\035\012" +
    "\037\012\041\012\043\012\045\012\047\012\051" +
    "\232\u0141\174\u0111\220\243\220\004\004\077\224" +
    "\u0131\077\303\012\053\012\055\012\057\012\061" +
    "\054\165\224\111\224\113\012\063\224\245\224" +
    "\247\224\u0133\012\111\012\113\172\027\012\115" +
    "\012\117\006\101\172\031\172\033\172\035\172" +
    "\037\172\041\172\043\172\045\172\047\172\051" +
    "\220\111\220\113\143\363\220\245\220\247\143" +
    "\135\213\343\172\053\172\055\172\057\172\061" +
    "\153\u0105\153\u0107\200\243\172\063\111\013\111" +
    "\015\172\261\143\365\161\027\213\u012b\172\065" +
    "\172\067\161\031\161\033\161\035\161\037\161" +
    "\041\161\043\161\045\161\047\161\051\222\u012d" +
    "\124\243\124\006\111\017\132\343\102\313\222" +
    "\u012f\161\053\161\055\161\057\161\061\101\311" +
    "\200\111\200\113\161\063\200\245\200\247\161" +
    "\261\132\345\137\027\062\231\161\065\161\067" +
    "\137\031\137\033\137\035\137\037\137\041\137" +
    "\043\137\045\137\047\137\051\124\111\124\113" +
    "\137\355\124\245\124\247\146\373\146\375\137" +
    "\053\137\055\137\057\137\061\136\353\136\161" +
    "\064\243\137\063\010\013\010\015\001\013\001" +
    "\015\071\027\173\000\137\065\137\067\071\031" +
    "\071\033\071\035\071\037\071\041\071\043\071" +
    "\045\071\047\071\051\225\u013b\173\u0111\152\u0103" +
    "\010\017\121\335\001\017\076\301\071\053\071" +
    "\055\071\057\071\061\043\155\064\111\064\113" +
    "\071\063\064\245\064\247\071\261\075\277\240" +
    "\027\170\000\071\065\071\067\240\031\240\033" +
    "\240\035\240\037\240\041\240\043\240\045\240" +
    "\047\240\051\167\000\170\u0111\053\135\151\145" +
    "\042\145\050\157\050\161\240\053\240\055\240" +
    "\057\240\061\151\147\042\147\167\u0111\240\063" +
    "\053\163\160\u0109\035\133\126\140\177\027\035" +
    "\135\240\065\240\067\177\031\177\033\177\035" +
    "\177\037\177\041\177\043\177\045\177\047\177" +
    "\051\230\111\230\113\207\165\230\245\230\247" +
    "\047\226\047\226\177\053\177\055\177\057\177" +
    "\061\206\165\203\111\203\113\177\063\203\245" +
    "\203\247\046\230\046\230\176\027\131\165\177" +
    "\065\177\067\176\031\176\033\176\035\176\037" +
    "\176\041\176\043\176\045\176\047\176\051\120" +
    "\111\120\113\072\273\120\245\120\247\134\347" +
    "\134\351\176\053\176\055\176\057\176\061\150" +
    "\377\114\111\114\113\176\063\114\245\114\247" +
    "\145\371\144\367\164\027\142\361\176\065\176" +
    "\067\164\031\164\033\164\035\164\037\164\041" +
    "\164\043\164\045\164\047\164\051\073\111\073" +
    "\113\141\357\073\245\073\247\243\001\243\001" +
    "\164\053\164\055\164\057\164\061\243\001\070" +
    "\111\070\113\164\063\070\245\070\247\243\001" +
    "\243\001\163\027\243\001\164\065\164\067\163" +
    "\031\163\033\163\035\163\037\163\041\163\043" +
    "\163\045\163\047\163\051\063\233\063\235\063" +
    "\237\243\001\243\001\243\001\243\001\163\053" +
    "\163\055\163\057\163\061\243\001\243\001\243" +
    "\001\163\063\243\001\243\001\243\001\243\001" +
    "\103\027\243\001\163\065\163\067\103\031\103" +
    "\033\103\035\103\037\103\041\103\043\103\045" +
    "\103\047\103\051\243\001\243\001\243\001\243" +
    "\001\243\001\243\001\243\001\103\053\103\055" +
    "\103\057\103\061\243\001\243\001\243\001\103" +
    "\063\243\001\243\001\243\001\243\001\100\027" +
    "\243\001\103\065\103\067\100\305\100\033\100" +
    "\035\100\037\100\041\100\043\100\045\100\047" +
    "\100\051\243\001\243\001\243\001\243\001\243" +
    "\001\243\001\243\001\100\053\100\055\100\057" +
    "\100\061\243\001\243\001\243\001\100\063\243" +
    "\001\243\001\243\001\243\001\057\027\243\001" +
    "\100\065\100\067\057\031\057\033\057\035\057" +
    "\037\057\041\057\043\057\045\057\047\057\051" +
    "\243\001\243\001\243\001\243\001\243\001\243" +
    "\001\243\001\057\053\057\055\057\057\057\061" +
    "\243\001\243\001\243\001\057\063\243\001\243" +
    "\001\243\001\243\001\056\027\243\001\057\065" +
    "\057\067\056\031\056\033\056\035\056\037\056" +
    "\041\056\043\056\045\056\047\056\051\243\001" +
    "\243\001\243\001\243\001\243\001\243\001\243" +
    "\001\056\053\056\055\056\057\056\061\243\001" +
    "\243\001\243\001\056\063\243\001\243\001\243" +
    "\001\243\001\002\027\243\001\056\065\056\067" +
    "\002\031\002\033\002\035\002\037\002\041\002" +
    "\043\002\045\002\047\002\051\243\001\243\001" +
    "\243\001\243\001\243\001\243\001\243\001\002" +
    "\053\002\055\002\057\002\061\243\001\243\001" +
    "\243\001\002\063\060\177\060\201\060\013\060" +
    "\015\060\203\060\205\002\065\002\067\000\003" +
    "\243\001\000\005\000\012\243\001\000\012\000" +
    "\012\000\012\000\012\000\012\000\012\243\001" +
    "\243\001\243\001\060\017\243\001\243\001\243" +
    "\001\243\001\243\001\243\001\060\207\243\001" +
    "\243\001\243\001\243\001\243\001\000\012\243" +
    "\001\243\001\243\001\243\001\243\001\243\001" +
    "\000\012\243\001\243\001\243\001\243\003\062" +
    "\200\003\003\036\001\001\143\216\004\146\147" +
    "\200\220\124\064\215\214\212\211\001\060\065" +
    "\050\051\065\125\125\061\016\126\126\004\003" +
    "\052\150\034\053\150\054\222\223\236\134\120" +
    "\141\101\125\136\051\025\001\127\224\224\040" +
    "\144\237\035\052\232\010\052\164\153\154\006" +
    "\011\012\233\155\234\073\221\152\054\041\012" +
    "\155\050\151\241\157\142\242\142\126\104\105" +
    "\034\053\106\207\107\121\110\111\034\075\076" +
    "\112\113\011\012\000\034\053\217\131\213\133" +
    "\134\153\074\172\071\041\012\012\011\042\111" +
    "\010\007\157\003\113\000\126\074\060\015\034" +
    "\053\073\131\132\133\134\034\053\160\131\070" +
    "\205\134\001\036\034\143\016\033\001\062\034" +
    "\053\001\206\001\064\034\035"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT = null;
              java_cup.runtime.Symbol start_val$ = CUP$stack.get(CUP$size - 2);
              Grammar start_val = (Grammar) start_val$.value;
RESULT = start_val;
              /* ACCEPT */
              parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, start_val$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
          case 1:
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 30, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol_list precedence_list start_spec production_list 
          case 2:
            {
              Grammar RESULT = null;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 30, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_list ::= import_list import_spec 
          case 5:
            {
              return parser.getSymbolFactory().newSymbol("import_list", 2, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // import_list ::= 
          case 6:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_list", 2, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 7:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_part ::= option_spec 
          // code_part ::= parser_spec 
          // code_part ::= action_code_part 
          // code_part ::= parser_code_part 
          // code_part ::= init_code 
          // code_part ::= scan_code 
          case 8:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }

          // code_parts ::= 
          case 9:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 11:
            {
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 12:
            {
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 13:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 14:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 5, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_ 
          case 15:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("option_list", 5, CUP$sym, CUP$sym);
            }

          // option_ ::= robust_id 
          case 16:
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 6, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 17:
            {
              java_cup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 6, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
          case 18:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 7, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
          case 19:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 11, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING opt_semi 
          case 20:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 16, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING opt_semi 
          case 21:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 17, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol_list ::= symbol_list symbol 
          case 22:
            {
              return parser.getSymbolFactory().newSymbol("symbol_list", 12, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol_list ::= symbol 
          case 23:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_list", 12, CUP$sym, CUP$sym);
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 24:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 18, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 25:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 43, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 26:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 18, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 27:
            {
 _cur_is_nonterm = false; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 19, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 28:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 19, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 29:
            {
 _cur_is_nonterm = true; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 19, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 30:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 20, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // decl_symbol_list ::= new_symbol_id 
          case 31:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 20, CUP$sym, CUP$sym);
            }

          // new_symbol_id ::= symbol_id 
          case 32:
            {
              java_cup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 21, sym_id$, sym_id$);
            }

          // precedence_list ::= precedence_list preced 
          case 33:
            {
              return parser.getSymbolFactory().newSymbol("precedence_list", 22, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= 
          case 34:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("precedence_list", 22, CUP$sym, CUP$sym);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 35:
            {
              return parser.getSymbolFactory().newSymbol("preced", 23, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 36:
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 24, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 37:
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 24, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 38:
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 24, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 39:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 25, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_list ::= precterminal_id 
          case 40:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("precterminal_list", 25, CUP$sym, CUP$sym);
            }

          // precterminal_id ::= symbol_id 
          case 41:
            {
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 26, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 42:
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 43:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 13, CUP$sym, CUP$sym);
            }

          // production_list ::= production_list production 
          case 44:
            {
              return parser.getSymbolFactory().newSymbol("production_list", 14, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production_list ::= production 
          case 45:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("production_list", 14, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 46:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 27, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 47:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 44, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 48:
            {
              return parser.getSymbolFactory().newSymbol("production", 27, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 49:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 28, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs 
          case 50:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("rhs_list", 28, CUP$sym, CUP$sym);
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 51:
            {
              symbol RESULT = null;
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 42, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 52:
            {
              symbol RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 42, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part_list prod_precedence 
          case 53:
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              ArrayList<production_part> rhs = (ArrayList<production_part>) rhs$.value;

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      grammar.build_production(lhs_nt, rhs, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 29, rhs$, precsym$);
            }

          // prod_part_list ::= prod_part_list prod_part 
          case 54:
            {
              ArrayList<production_part> RESULT = null;
              java_cup.runtime.Symbol prod$ = CUP$stack.get(CUP$size - 1);
              production_part prod = (production_part) prod$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 2);
              ArrayList<production_part> list = (ArrayList<production_part>) list$.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              return parser.getSymbolFactory().newSymbol("prod_part_list", 41, list$, prod$, RESULT);
            }

          // prod_part_list ::= 
          case 55:
            {
              ArrayList<production_part> RESULT = null;
 RESULT = new ArrayList<production_part>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part_list", 41, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part ::= symbol_id opt_label_id 
          case 56:
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 2);
              String symid = (String) symid$.value;
 
	  /* try to look up the id */
	  symbol symb = symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = new symbol_part(symb, labid);
	    }
	
              return parser.getSymbolFactory().newSymbol("prod_part", 40, symid$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 57:
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 40, code_str$, code_str$, RESULT);
            }

          // opt_label_id ::= COLON robust_id 
          case 58:
            {
              String RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("opt_label_id", 32, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // opt_label_id ::= 
          case 59:
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_label_id", 32, CUP$sym, CUP$sym, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 60:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 34, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 61:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 34, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 62:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 35, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // import_id ::= multipart_id 
          case 63:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 35, id$, id$, RESULT);
            }

          // type_id ::= multipart_id 
          case 64:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 36, id$, id$, RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 65:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 36, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 66:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 36, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 67:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
 RESULT = arg; 
              return parser.getSymbolFactory().newSymbol("typearglist", 37, arg$, arg$, RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 68:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 37, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 69:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("typeargument", 38, id$, id$, RESULT);
            }

          // typeargument ::= wildcard 
          case 70:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 1);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w; 
              return parser.getSymbolFactory().newSymbol("typeargument", 38, w$, w$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 71:
            {
              StringBuilder RESULT = null;
 RESULT = new StringBuilder("?"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 39, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 72:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 73:
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }

          // symbol_id ::= ID 
          case 74:
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("symbol_id", 31, the_id$, the_id$, RESULT);
            }

          // symbol_id ::= OPTION 
          case 75:
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 31, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= SUPER 
          case 76:
            {
              String RESULT = null;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 31, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= EXTENDS 
          case 77:
            {
              String RESULT = null;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 31, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ID 
          case 78:
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("robust_id", 33, the_id$, the_id$, RESULT);
            }

          // robust_id ::= OPTION 
          case 79:
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= CODE 
          case 80:
            {
              String RESULT = null;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ACTION 
          case 81:
            {
              String RESULT = null;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PARSER 
          case 82:
            {
              String RESULT = null;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= TERMINAL 
          case 83:
            {
              String RESULT = null;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NON 
          case 84:
            {
              String RESULT = null;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONTERMINAL 
          case 85:
            {
              String RESULT = null;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= INIT 
          case 86:
            {
              String RESULT = null;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= SCAN 
          case 87:
            {
              String RESULT = null;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= WITH 
          case 88:
            {
              String RESULT = null;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= START 
          case 89:
            {
              String RESULT = null;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PRECEDENCE 
          case 90:
            {
              String RESULT = null;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= LEFT 
          case 91:
            {
              String RESULT = null;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= RIGHT 
          case 92:
            {
              String RESULT = null;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONASSOC 
          case 93:
            {
              String RESULT = null;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= error 
          case 94:
            {
              String RESULT = null;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 33, CUP$sym, CUP$sym, RESULT);
            }

          // opt_semi ::= 
          case 95:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }

          // opt_semi ::= SEMI 
          case 96:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
