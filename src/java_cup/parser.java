
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081115
// Sun May 02 23:49:46 CEST 2010
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** CUP v0.12joho 20081115 generated parser.
  * @version Sun May 02 23:49:46 CEST 2010
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\312\000\002\033\007\033\005\001\003\001\000" +
    "\014\003\010\001\007\000\007\002\002\003\002" +
    "\006\003\003\004\003\004\001\005\001\005\003" +
    "\006\004\012\004\015\004\016\004\017\005\053" +
    "\000\017\003\020\001\020\002\020\001\021\003" +
    "\021\001\022\001\023\002\023\000\024\004\025" +
    "\001\025\001\025\001\026\003\026\001\027\001" +
    "\013\004\013\000\030\005\054\000\030\002\031" +
    "\003\031\001\047\002\047\000\032\002\046\002" +
    "\046\001\045\002\045\002\045\002\045\001\035" +
    "\002\035\000\037\003\037\001\040\003\040\001" +
    "\041\001\041\003\041\004\042\001\042\003\043" +
    "\001\043\001\044\001\044\003\044\003\034\001" +
    "\034\001\034\001\034\001\036\001\036\001\036" +
    "\001\036\001\036\001\036\001\036\001\036\001" +
    "\036\001\036\001\036\001\036\001\036\001\036" +
    "\001\036\001\036\001\036\001\011\000\011\001" +
    "\050\000\050\002\051\001\051\002\052\001\052" +
    "\002\055\000\055\002\247\u04cf\u0159\u0489\271\273" +
    "\247\321\247\247\355\263\247\247\247\247\247" +
    "\247\247\247\247\247\247\247\247\247\247\247" +
    "\247\247\u018b\u01a3\247\247\u01bf\247\247\u028f\u025b" +
    "\u0219\247\247\u0135\251\247\u0189\247\u0447\u0405\u04db" +
    "\247\247\247\u0255\u01f5\u01f5\u022b\u0107\u0135\u014d\247" +
    "\247\u01c3\u01bb\311\u03c3\375\371\u0381\247\247\247" +
    "\247\247\247\247\247\247\247\247\247\u01e9\u0177" +
    "\247\u0273\247\u0213\u0213\247\247\247\u01d1\u019d\247" +
    "\u01d5\341\u01b3\247\u021d\u0213\271\u020f\u020b\u020b\247" +
    "\u01f9\247\u0171\247\u033f\u02fd\247\u017d\u01d7\247\247" +
    "\247\u01c9\247\247\273\263\247\u012f\255\253\247" +
    "\u02bb\u0279\u010b\247\u01e5\u01e1\247\247\u01a7\261\247" +
    "\247\247\u0135\247\247\247\247\311\247\u010d\247" +
    "\247\u015b\247\257\u018f\247\247\u0485\247\247\247" +
    "\247\247\247\u0237\247\247\247\247\u0529\000\000" +
    "\000\274\000\060\000\064\300\000\076\266\232" +
    "\234\236\240\242\246\250\252\254\256\260\262" +
    "\264\244\230\226\164\000\020\002\062\266\222" +
    "\224\230\226\000\070\072\172\054\302\120\010" +
    "\000\000\000\276\056\056\000\000\000\000\000" +
    "\000\000\074\162\170\000\000\000\000\000\000" +
    "\016\016\016\022\016\016\016\076\220\216\066" +
    "\210\204\000\200\206\174\000\000\102\104\106" +
    "\000\000\304\000\000\000\014\000\232\000\000" +
    "\000\000\034\036\120\000\176\000\000\052\000" +
    "\000\112\114\126\000\306\166\270\270\024\000" +
    "\270\270\030\000\000\000\202\214\212\116\100" +
    "\000\310\272\042\044\000\046\050\032\040\000" +
    "\110\000\132\136\000\122\310\000\144\154\160" +
    "\312\140\026\130\134\146\000\152\150\142\156" +
    "\224\000\052\000\174\000\173\000\227\000\207" +
    "\000\170\000\113\013\113\015\003\000\167\000" +
    "\004\077\151\161\012\013\012\015\174\u0111\173" +
    "\u0111\220\267\220\004\170\u0111\151\163\077\303" +
    "\143\363\167\u0111\224\u0131\143\135\052\155\113" +
    "\017\006\101\136\267\136\006\224\105\224\107" +
    "\012\017\224\231\011\103\224\233\224\u0133\143" +
    "\365\011\031\011\033\011\035\011\037\011\041" +
    "\011\043\011\045\011\047\011\051\220\105\220" +
    "\107\200\267\220\231\102\313\220\233\101\311" +
    "\011\053\011\055\011\057\011\061\070\255\136" +
    "\105\136\107\011\063\136\231\222\u012d\136\233" +
    "\011\105\011\107\172\027\011\111\222\u012f\011" +
    "\113\172\031\172\033\172\035\172\037\172\041" +
    "\172\043\172\045\172\047\172\051\200\105\200" +
    "\107\072\267\200\231\213\325\200\233\051\135" +
    "\172\053\172\055\172\057\172\061\071\257\071" +
    "\261\071\263\172\063\001\013\001\015\172\237" +
    "\213\u012b\051\153\152\027\172\065\225\u013d\172" +
    "\067\152\031\152\033\152\035\152\037\152\041" +
    "\152\043\152\045\152\047\152\051\072\105\072" +
    "\107\001\017\072\231\121\325\072\233\157\u0109" +
    "\152\053\152\055\152\057\152\061\054\161\036" +
    "\000\035\133\152\063\036\137\035\135\152\237" +
    "\121\327\054\163\137\027\152\065\133\347\152" +
    "\067\137\031\137\033\137\035\137\037\137\041" +
    "\137\043\137\045\137\047\137\051\230\105\230" +
    "\107\137\355\230\231\076\301\230\233\041\145" +
    "\137\053\137\055\137\057\137\061\075\277\206" +
    "\105\206\107\137\063\206\231\164\u010f\206\233" +
    "\160\u010b\160\u010d\065\027\137\065\135\124\137" +
    "\067\065\031\065\033\065\035\065\037\065\041" +
    "\065\043\065\045\065\047\065\051\132\105\132" +
    "\107\203\155\132\231\202\155\132\233\120\155" +
    "\065\053\065\055\065\057\065\061\146\373\146" +
    "\375\066\251\065\063\125\335\125\151\065\237" +
    "\046\147\046\151\242\027\065\065\150\377\065" +
    "\067\242\031\242\033\242\035\242\037\242\041" +
    "\242\043\242\045\242\047\242\051\126\105\126" +
    "\107\145\371\126\231\144\367\126\233\142\361" +
    "\242\053\242\055\242\057\242\061\141\357\067" +
    "\105\067\107\242\063\067\231\247\001\067\233" +
    "\045\216\045\216\177\027\242\065\247\001\242" +
    "\067\177\031\177\033\177\035\177\037\177\041" +
    "\177\043\177\045\177\047\177\051\064\105\064" +
    "\107\247\001\064\231\247\001\064\233\247\001" +
    "\177\053\177\055\177\057\177\061\044\220\044" +
    "\220\247\001\177\063\123\331\123\333\247\001" +
    "\247\001\247\001\176\027\177\065\247\001\177" +
    "\067\176\031\176\033\176\035\176\037\176\041" +
    "\176\043\176\045\176\047\176\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\176\053\176\055\176\057\176\061\247\001\247" +
    "\001\247\001\176\063\247\001\247\001\247\001" +
    "\247\001\247\001\155\027\176\065\247\001\176" +
    "\067\155\031\155\033\155\035\155\037\155\041" +
    "\155\043\155\045\155\047\155\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\155\053\155\055\155\057\155\061\247\001\247" +
    "\001\247\001\155\063\247\001\247\001\247\001" +
    "\247\001\247\001\154\027\155\065\247\001\155" +
    "\067\154\031\154\033\154\035\154\037\154\041" +
    "\154\043\154\045\154\047\154\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\154\053\154\055\154\057\154\061\247\001\247" +
    "\001\247\001\154\063\247\001\247\001\247\001" +
    "\247\001\247\001\103\027\154\065\247\001\154" +
    "\067\103\031\103\033\103\035\103\037\103\041" +
    "\103\043\103\045\103\047\103\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\103\053\103\055\103\057\103\061\247\001\247" +
    "\001\247\001\103\063\247\001\247\001\247\001" +
    "\247\001\247\001\100\027\103\065\247\001\103" +
    "\067\100\305\100\033\100\035\100\037\100\041" +
    "\100\043\100\045\100\047\100\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\100\053\100\055\100\057\100\061\247\001\247" +
    "\001\247\001\100\063\247\001\247\001\247\001" +
    "\247\001\247\001\057\027\100\065\247\001\100" +
    "\067\057\031\057\033\057\035\057\037\057\041" +
    "\057\043\057\045\057\047\057\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\057\053\057\055\057\057\057\061\247\001\247" +
    "\001\247\001\057\063\247\001\247\001\247\001" +
    "\247\001\247\001\056\027\057\065\247\001\057" +
    "\067\056\031\056\033\056\035\056\037\056\041" +
    "\056\043\056\045\056\047\056\051\247\001\247" +
    "\001\247\001\247\001\247\001\247\001\247\001" +
    "\056\053\056\055\056\057\056\061\247\001\247" +
    "\001\247\001\056\063\247\001\247\001\247\001" +
    "\233\000\247\001\002\027\056\065\247\001\056" +
    "\067\002\031\002\033\002\035\002\037\002\041" +
    "\002\043\002\045\002\047\002\051\233\u0143\247" +
    "\001\233\u0145\247\001\247\001\247\001\247\001" +
    "\002\053\002\055\002\057\002\061\247\001\247" +
    "\001\247\001\002\063\233\u0147\247\001\247\001" +
    "\247\001\247\001\233\u0149\002\065\000\003\002" +
    "\067\000\005\000\012\247\001\000\012\000\012" +
    "\000\012\000\012\000\012\000\012\060\177\060" +
    "\201\060\013\060\015\060\203\060\205\247\001" +
    "\247\001\247\001\247\001\247\001\247\001\247" +
    "\001\247\001\247\001\247\001\000\012\247\001" +
    "\247\001\247\001\247\001\247\001\060\017\000" +
    "\012\247\001\247\001\247\001\247\001\247\001" +
    "\060\207\247\001\247\001\247\001\247\001\243" +
    "\006\015\201\116\001\146\147\003\001\064\130" +
    "\104\105\216\215\106\060\107\200\110\214\061" +
    "\111\112\010\011\237\073\010\011\011\150\212" +
    "\004\072\211\222\223\150\116\125\047\122\073" +
    "\027\224\122\143\011\050\113\050\025\120\012" +
    "\027\224\047\045\134\132\134\232\135\177\135" +
    "\240\001\157\046\047\233\234\235\165\110\221" +
    "\220\135\136\050\162\034\051\245\052\050\053" +
    "\011\246\156\151\217\140\135\104\034\051\074" +
    "\120\213\122\123\053\011\007\152\054\173\164" +
    "\034\051\074\120\121\122\123\165\036\032\027" +
    "\135\102\013\005\067\010\076\043\034\075\076" +
    "\160\161\065\013\034\051\162\120\164\201\123" +
    "\001\062\001\034\051\042\203\001\000\046\034" +
    "\051\067\202\034\143\034\035\001\073"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Main main;
  emit emit;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", terminal.error);
    symbols.put("EOF", terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(Symbol location, String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (non_terminal)sym;
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              java_cup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec* code_parts symbol+ precedence_list start_spec production+ 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 27, CUP$stack.get(CUP$size - 7), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol+ precedence_list start_spec production+ 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 27, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 12, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_part ::= option_spec 
          // code_part ::= parser_spec 
          // code_part ::= action_code_part 
          // code_part ::= parser_code_part 
          // code_part ::= init_code 
          // code_part ::= scan_code 
          case 6:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_part", 8, CUP$sym, CUP$sym);
            }

          // code_parts ::= 
          case 7:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 8:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 7, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 9:
            {
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 10:
            {
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 2, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 12:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_ 
          case 13:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("option_list", 4, CUP$sym, CUP$sym);
            }

          // option_ ::= robust_id 
          case 14:
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 15:
            {
              java_cup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 5, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
          case 16:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 6, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
          case 17:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 10, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING opt_semi 
          case 18:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING opt_semi 
          case 19:
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 14, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 20:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 21:
            {
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 43, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 22:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 23:
            {
 _cur_is_nonterm = false; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 24:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 25:
            {
 _cur_is_nonterm = true; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 26:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 17, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // decl_symbol_list ::= new_symbol_id 
          case 27:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 17, CUP$sym, CUP$sym);
            }

          // new_symbol_id ::= symbol_id 
          case 28:
            {
              java_cup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      symbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.add_non_terminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.add_terminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 18, sym_id$, sym_id$);
            }

          // precedence_list ::= precedence_list preced 
          case 29:
            {
              return parser.getSymbolFactory().newSymbol("precedence_list", 19, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // precedence_list ::= 
          case 30:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("precedence_list", 19, CUP$sym, CUP$sym);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 31:
            {
              return parser.getSymbolFactory().newSymbol("preced", 20, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 32:
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 33:
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 34:
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 21, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 35:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 22, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_list ::= precterminal_id 
          case 36:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("precterminal_list", 22, CUP$sym, CUP$sym);
            }

          // precterminal_id ::= symbol_id 
          case 37:
            {
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  get_term(term$, term).set_precedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 23, term$, term$);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 38:
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name$, start_name);
	   if (nt != null) 
	     grammar.set_start_symbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 11, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 39:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 11, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 40:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 24, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 41:
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 44, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 42:
            {
              return parser.getSymbolFactory().newSymbol("production", 24, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 43:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs 
          case 44:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$sym, CUP$sym);
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 45:
            {
              symbol RESULT;
              java_cup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = get_term(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 39, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 46:
            {
              symbol RESULT;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 39, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part* prod_precedence 
          case 47:
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              int CUP$len$rhs = ((Integer) rhs$.value).intValue();
              production_part[] rhs = new production_part[CUP$len$rhs];
              while (CUP$len$rhs-- > 0)
                {
                  CUP$stack.remove(--CUP$size);
                  rhs[CUP$len$rhs] = (production_part) CUP$stack.get(CUP$size - 2).value;
                }

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<production_part> rhs_list = 
	      	new ArrayList<production_part>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.build_production(lhs_nt, rhs_list, (terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 26, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id opt_label_id 
          case 48:
            {
              production_part RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              symbol symb = (symbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new symbol_part(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 38, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 49:
            {
              production_part RESULT;
              java_cup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 38, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 50:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.star_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 51:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.plus_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 52:
            {
              symbol RESULT;
              java_cup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              symbol s = (symbol) s$.value;
 RESULT = grammar.opt_symbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 53:
            {
              symbol RESULT;
              java_cup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   symbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	       if (ErrorManager.getManager().getErrorCount() == 0)
	         ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			        "\" has not been declared");
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 37, symid$, symid$, RESULT);
            }

          // opt_label_id ::= COLON robust_id 
          case 54:
            {
              String RESULT;
              java_cup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("opt_label_id", 29, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // opt_label_id ::= 
          case 55:
            {
              String RESULT;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_label_id", 29, CUP$sym, CUP$sym, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 56:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 31, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 57:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 31, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 58:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // import_id ::= multipart_id 
          case 59:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 32, id$, id$, RESULT);
            }

          // type_id ::= multipart_id 
          case 60:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, id$, RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 61:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 62:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 33, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typeargument 
          case 63:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
 RESULT = arg; 
              return parser.getSymbolFactory().newSymbol("typearglist", 34, arg$, arg$, RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 64:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 34, list$, arg$, RESULT);
            }

          // typeargument ::= type_id 
          case 65:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              return parser.getSymbolFactory().newSymbol("typeargument", 35, id$, id$, RESULT);
            }

          // typeargument ::= wildcard 
          case 66:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 1);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w; 
              return parser.getSymbolFactory().newSymbol("typeargument", 35, w$, w$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 67:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 36, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 68:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 36, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 69:
            {
              StringBuilder RESULT;
              java_cup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 36, w$, id$, RESULT);
            }

          // symbol_id ::= ID 
          case 70:
            {
              String RESULT;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, the_id$, the_id$, RESULT);
            }

          // symbol_id ::= OPTION 
          case 71:
            {
              String RESULT;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= SUPER 
          case 72:
            {
              String RESULT;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // symbol_id ::= EXTENDS 
          case 73:
            {
              String RESULT;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol_id", 28, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ID 
          case 74:
            {
              String RESULT;
              java_cup.runtime.Symbol the_id$ = CUP$stack.get(CUP$size - 1);
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              return parser.getSymbolFactory().newSymbol("robust_id", 30, the_id$, the_id$, RESULT);
            }

          // robust_id ::= OPTION 
          case 75:
            {
              String RESULT;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= CODE 
          case 76:
            {
              String RESULT;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= ACTION 
          case 77:
            {
              String RESULT;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PARSER 
          case 78:
            {
              String RESULT;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= TERMINAL 
          case 79:
            {
              String RESULT;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NON 
          case 80:
            {
              String RESULT;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONTERMINAL 
          case 81:
            {
              String RESULT;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= INIT 
          case 82:
            {
              String RESULT;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= SCAN 
          case 83:
            {
              String RESULT;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= WITH 
          case 84:
            {
              String RESULT;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= START 
          case 85:
            {
              String RESULT;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= PRECEDENCE 
          case 86:
            {
              String RESULT;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= LEFT 
          case 87:
            {
              String RESULT;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= RIGHT 
          case 88:
            {
              String RESULT;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= NONASSOC 
          case 89:
            {
              String RESULT;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // robust_id ::= error 
          case 90:
            {
              String RESULT;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("robust_id", 30, CUP$sym, CUP$sym, RESULT);
            }

          // opt_semi ::= 
          case 91:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_semi", 9, CUP$sym, CUP$sym);
            }

          // opt_semi ::= SEMI 
          case 92:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("opt_semi", 9, CUP$sym, CUP$sym);
            }

          // import_spec* ::= 
          case 93:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec*", 40, CUP$sym, CUP$sym);
            }

          // import_spec* ::= import_spec* import_spec 
          case 94:
            {
              return parser.getSymbolFactory().newSymbol("import_spec*", 40, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol+ ::= symbol 
          case 95:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("symbol+", 41, CUP$sym, CUP$sym);
            }

          // symbol+ ::= symbol+ symbol 
          case 96:
            {
              return parser.getSymbolFactory().newSymbol("symbol+", 41, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production+ ::= production 
          case 97:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("production+", 42, CUP$sym, CUP$sym);
            }

          // production+ ::= production+ production 
          case 98:
            {
              return parser.getSymbolFactory().newSymbol("production+", 42, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // prod_part* ::= 
          case 99:
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$sym, CUP$sym, Integer.valueOf(0));
            }

          // prod_part* ::= prod_part* prod_part 
          case 100:
            {
              java_cup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              java_cup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              CUP$1.parse_state = CUP$stack.get(CUP$size - 3).parse_state;
              CUP$stack.set(CUP$size - 2, CUP$1);
              CUP$stack.add(CUP$0);
              return parser.getSymbolFactory().newSymbol("prod_part*", 45, CUP$0, CUP$1, Integer.valueOf(((Integer)CUP$0.value).intValue()+1));
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
