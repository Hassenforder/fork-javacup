
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sun Nov 09 11:00:31 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sun Nov 09 11:00:31 CET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Instance of action encapsulation class. */
  private final static String CUP$tables = 
    "\000\340\000\000\002\056\000\000\010\000\005" +
    "\057\000\001\004\001\001\002\002\002\001\014" +
    "\003\005\001\005\001\005\001\005\001\004\000" +
    "\004\002\003\004\010\004\015\004\016\004\011" +
    "\002\011\001\060\000\017\004\017\002\061\000" +
    "\017\004\017\002\017\003\017\003\034\002\035" +
    "\002\020\003\020\001\021\003\021\001\030\001" +
    "\030\001\033\002\033\001\062\000\031\005\063" +
    "\000\031\005\064\000\031\005\032\003\032\001" +
    "\042\001\043\001\065\000\012\005\012\001\013" +
    "\002\013\001\066\000\022\005\067\000\022\003" +
    "\025\003\025\001\055\002\055\001\026\002\054" +
    "\002\054\001\053\002\053\001\041\002\041\001" +
    "\050\003\050\004\050\001\045\001\045\003\046" +
    "\001\046\001\047\001\047\003\047\003\051\003" +
    "\051\001\052\001\052\003\023\001\024\001\036" +
    "\001\036\001\037\001\037\001\040\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\007\002\007" +
    "\001\006\000\006\001\027\000\000\u0aae\160\u01d4" +
    "\160\u01dc\160\u01ea\160\u01d4\160\u01dc\160\u021a\160" +
    "\u0254\160\u0264\160\u0274\160\u0292\160\u02a2\160\u0282" +
    "\160\u02d2\160\u02ea\160\u0316\160\u0324\160\u0350\160" +
    "\u035e\160\u038a\160\u0398\160\u03c4\160\u03d2\160\u01fa" +
    "\160\u03fe\160\u040c\160\u0438\160\u0446\160\u0472\160" +
    "\u01d8\160\u0480\160\u04ac\160\u04ba\160\u04fa\160\u050e" +
    "\160\u054a\160\u02b6\160\u01e6\160\u021a\160\u021c\160" +
    "\u0550\160\u021e\160\u058c\160\u058e\160\u01d4\160\u05a0" +
    "\160\u05ba\160\u05f6\160\u0220\160\u0632\160\u066e\160" +
    "\u029e\160\u0302\160\u01e6\160\u01ee\160\u067e\160\u0692" +
    "\160\u06b4\160\u01fe\160\u06d4\160\u01f6\160\u06f0\160" +
    "\u072c\160\u0200\160\u073c\160\u076a\160\u0776\160\u0208" +
    "\160\u07a6\160\u068c\160\u07c8\160\u01fc\160\u023a\160" +
    "\u0224\160\u07a8\160\u0208\160\u07e4\160\u02a2\160\u07ea" +
    "\160\u020a\160\u02a6\160\u0806\160\u0280\160\u078a\160" +
    "\u0826\160\u0840\160\u0856\160\u0698\160\u02b0\160\u0878" +
    "\160\u02c0\160\u0858\160\u02f2\160\u0284\160\u0894\160" +
    "\u030e\160\u089a\160\u028c\160\u0348\160\u08b6\160\u02ac" +
    "\160\u08d6\160\u08f0\160\u02b4\160\u0904\160\u091e\160" +
    "\u0382\160\u0932\160\u04a6\160\u0526\160\u060e\160\u0528" +
    "\160\u034a\160\u02fc\160\u03a6\160\u02fc\160\u0314\160" +
    "\u0358\160\u0564\160\u057c\160\u05e6\160\u031e\160\u091e" +
    "\160\u0922\160\u0954\160\u03bc\160\u03f6\160\u095c\160" +
    "\u05ee\160\u0430\160\u0988\160\u0998\160\u09ba\160\u046a" +
    "\160\u09be\160\u09ea\160\u04dc\160\u03b8\160\u05c4\160" +
    "\u0554\160\u09ee\160\u0a32\160\u0a4a\160\u0a50\160\u0a6a" +
    "\160\u0354\160\u0612\160\u0582\160\u035a\160\u036c\160" +
    "\u0382\160\u05da\160\u0944\160\u0614\160\u0616\160\u0628" +
    "\160\u062c\160\u0406\160\u0440\160\u047a\160\u098e\160" +
    "\u06ac\160\u04b4\160\u06ce\160\u04de\160\u09d0\160\u06d4" +
    "\160\u04f8\160\u0a56\160\u035a\160\u0a96\160\u0aa8\160" +
    "\u0592\160\u039c\160\u0ac4\160\u0ad8\160\u0710\160\u06ea" +
    "\160\u0722\160\163\165\160\162\160\156\160\156" +
    "\164\157\160\156\160\156\160\156\160\156\160" +
    "\156\160\156\161\264\161\257\162\166\162\000" +
    "\214\221\162\000\162\000\162\000\162\000\162" +
    "\000\162\000\244\037\224\237\245\u0119\251\327" +
    "\233\235\160\156\253\324\256\306\262\302\161" +
    "\255\206\036\266\276\266\277\206\222\165\176" +
    "\224\236\162\000\165\212\165\217\165\201\165" +
    "\220\165\211\165\177\165\202\165\216\165\200" +
    "\206\223\225\046\226\044\230\043\237\045\270" +
    "\116\270\116\165\206\165\214\165\205\165\210" +
    "\272\275\276\275\226\234\165\204\225\046\226" +
    "\044\230\043\237\045\166\151\165\213\166\151" +
    "\166\151\166\151\166\151\166\151\166\151\167" +
    "\000\267\234\167\000\167\000\167\000\167\000" +
    "\167\000\167\000\170\147\267\131\170\147\170" +
    "\147\170\147\170\147\170\147\170\147\166\151" +
    "\173\263\173\252\173\264\173\257\173\246\173" +
    "\254\171\175\167\000\171\141\171\141\171\141" +
    "\171\141\171\141\171\141\172\150\170\147\172" +
    "\150\172\150\172\150\172\150\172\150\172\150" +
    "\173\255\242\040\274\033\274\033\277\117\277" +
    "\117\301\303\314\317\171\141\307\320\307\321" +
    "\320\317\242\234\223\042\174\176\242\040\172" +
    "\150\174\212\174\217\174\201\174\220\174\211" +
    "\174\177\174\202\174\216\174\200\175\005\223" +
    "\042\323\325\311\234\223\242\223\241\326\330" +
    "\174\206\174\214\174\205\174\210\311\126\175" +
    "\005\175\005\174\204\175\005\313\114\313\114" +
    "\175\005\340\u0103\174\213\342\066\176\015\175" +
    "\005\175\005\243\041\342\030\175\005\175\005" +
    "\177\012\316\032\316\032\175\005\175\005\176" +
    "\015\176\015\243\234\176\015\343\070\243\041" +
    "\176\015\177\012\177\012\350\352\177\012\176" +
    "\015\176\015\177\012\337\073\176\015\176\015" +
    "\200\021\177\012\177\012\176\015\176\015\177" +
    "\012\177\012\201\014\321\115\321\115\177\012" +
    "\177\012\200\021\200\021\u0100\u0102\200\021\344" +
    "\031\u0103\030\200\021\201\014\201\014\344\031" +
    "\201\014\200\021\200\021\201\014\u0104\075\200" +
    "\021\200\021\337\073\201\014\201\014\200\021" +
    "\200\021\201\014\201\014\203\016\u0105\u0107\u0118" +
    "\u011a\201\014\201\014\202\047\202\047\341\343" +
    "\202\047\331\u010a\331\u010b\331\u0109\203\016\203" +
    "\016\u011c\u011e\203\016\370\363\202\047\203\016" +
    "\u0122\160\202\047\202\047\204\007\203\016\203" +
    "\016\202\047\u0122\160\203\016\203\016\205\011" +
    "\354\063\u0122\160\203\016\203\016\204\007\204" +
    "\007\354\063\204\007\u0122\160\341\345\204\007" +
    "\205\011\205\011\u0122\160\205\011\204\007\204" +
    "\007\205\011\370\367\204\007\204\007\207\006" +
    "\205\011\205\011\204\007\204\007\205\011\205" +
    "\011\210\017\355\360\u0122\160\205\011\205\011" +
    "\207\006\207\006\355\357\207\006\u010c\077\u010c" +
    "\077\207\006\210\017\210\017\u0122\160\210\017" +
    "\207\006\207\006\210\017\u0122\160\207\006\207" +
    "\006\211\023\210\017\210\017\207\006\207\006" +
    "\210\017\210\017\212\024\360\064\u0122\160\210" +
    "\017\210\017\211\023\211\023\360\064\211\023" +
    "\u010d\u0110\u010d\u0111\211\023\212\024\212\024\u0122" +
    "\160\212\024\211\023\211\023\212\024\u0122\160" +
    "\211\023\211\023\213\010\212\024\212\024\211" +
    "\023\211\023\212\024\212\024\215\013\364\061" +
    "\u0122\160\212\024\212\024\213\010\213\010\364" +
    "\061\213\010\u010e\100\u010e\100\213\010\215\013" +
    "\215\013\u0122\160\215\013\213\010\213\010\215" +
    "\013\333\112\213\010\213\010\216\022\215\013" +
    "\215\013\213\010\213\010\215\013\215\013\217" +
    "\020\333\112\u0122\160\215\013\215\013\216\022" +
    "\216\022\u0122\160\216\022\u0111\101\u0111\101\216" +
    "\022\217\020\217\020\u0122\160\217\020\216\022" +
    "\216\022\217\020\u0122\160\216\022\216\022\333" +
    "\112\217\020\217\020\216\022\216\022\217\020" +
    "\217\020\367\060\u0113\u0115\u0113\u0111\217\020\217" +
    "\020\220\146\367\060\220\146\220\146\220\146" +
    "\220\146\220\146\220\146\221\176\u0116\u0118\u0116" +
    "\u0111\221\212\221\217\221\201\221\220\221\211" +
    "\221\177\221\202\221\216\221\200\334\113\336" +
    "\000\221\245\u0122\160\220\146\u0122\160\u0122\160" +
    "\221\206\221\214\221\205\221\210\334\113\336" +
    "\341\u0122\160\221\204\u0122\160\u0122\160\u0122\160" +
    "\222\176\334\332\221\213\222\212\222\217\222" +
    "\201\222\220\222\211\222\177\222\202\222\216" +
    "\222\200\345\155\345\343\334\113\336\000\227" +
    "\035\372\062\227\232\222\206\222\214\222\205" +
    "\222\210\372\062\346\071\346\071\222\204\227" +
    "\035\u0102\u0104\222\224\227\035\227\223\222\213" +
    "\231\176\u0122\160\227\035\231\212\231\217\231" +
    "\201\231\220\231\211\231\177\231\202\231\216" +
    "\231\200\345\345\232\051\232\051\u011b\153\232" +
    "\051\u0122\160\u011b\232\231\206\231\214\231\205" +
    "\231\210\234\034\346\071\232\051\231\204\u0102" +
    "\345\232\051\232\051\u0122\160\u011b\223\231\213" +
    "\232\051\234\034\235\050\235\050\234\034\235" +
    "\050\u0106\074\371\076\371\076\234\034\u0122\160" +
    "\347\072\347\072\371\076\235\050\357\067\357" +
    "\067\235\050\235\050\u0122\160\236\176\u0122\160" +
    "\235\050\236\212\236\217\236\201\236\220\236" +
    "\211\236\177\236\202\236\216\236\200\335\110" +
    "\u0101\065\u0101\065\u0108\103\u0109\107\u0122\160\u0106" +
    "\074\236\206\236\214\236\205\236\210\335\110" +
    "\347\072\u010a\105\236\204\u010b\363\357\067\236" +
    "\224\240\176\335\110\236\213\240\212\240\217" +
    "\240\201\240\220\240\211\240\177\240\202\240" +
    "\216\240\200\u0122\160\u0122\160\335\110\u0122\160" +
    "\u0101\065\u0108\103\u0109\107\240\206\240\214\240" +
    "\205\240\210\u0122\160\u0122\160\u0122\160\240\204" +
    "\u010a\105\u0122\160\u010b\367\241\176\u0122\160\240" +
    "\213\241\212\241\217\241\201\241\220\241\211" +
    "\241\177\241\202\241\216\241\200\246\143\246" +
    "\143\246\143\246\143\246\143\246\143\247\132" +
    "\241\206\241\214\241\205\241\210\u0122\160\247" +
    "\132\247\132\241\204\264\301\u0122\160\247\132" +
    "\264\005\u0110\363\241\213\306\323\246\143\250" +
    "\000\306\005\247\132\u0122\160\264\005\u0122\160" +
    "\250\264\250\257\264\005\247\132\306\005\250" +
    "\000\264\005\u0112\363\306\005\247\132\u0115\363" +
    "\u0122\160\306\005\250\332\252\140\252\140\252" +
    "\140\252\140\252\140\252\140\250\255\u0120\343" +
    "\u0110\367\u0122\160\254\003\u0122\160\250\000\254" +
    "\003\254\003\254\003\254\003\254\003\254\003" +
    "\254\003\254\003\254\003\252\140\u0122\160\u0122" +
    "\160\u0112\367\u011f\000\u0122\160\u0115\367\254\003" +
    "\254\003\254\003\254\003\u0122\160\u0121\154\u0121" +
    "\343\254\003\u011f\341\u0122\160\u0120\345\255\307" +
    "\u0122\160\254\003\255\212\255\217\255\201\255" +
    "\220\255\211\255\177\255\202\255\216\255\200" +
    "\257\145\257\145\257\145\257\145\257\145\257" +
    "\145\u011f\000\255\206\255\214\255\205\255\210" +
    "\u0122\160\u0122\160\u0122\160\255\204\u0121\345\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\255\313\u0122\160" +
    "\257\145\260\142\260\142\260\142\260\142\260" +
    "\142\260\142\261\144\261\144\261\144\261\144" +
    "\261\144\261\144\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\302\002\302\002\302\002\302\002\302\002" +
    "\302\002\260\142\u0122\160\302\305\u0122\160\263" +
    "\265\u0122\160\261\144\263\212\263\217\263\201" +
    "\263\220\263\211\263\177\263\202\263\216\263" +
    "\200\302\002\271\033\271\033\u0122\160\271\024" +
    "\265\127\u0122\160\263\206\263\214\263\205\263" +
    "\210\265\127\265\127\271\024\263\204\u0122\160" +
    "\265\127\271\024\u0122\160\273\130\263\272\271" +
    "\024\275\121\u0122\160\265\127\273\130\273\130" +
    "\u0122\160\275\121\275\121\273\130\265\127\u0122" +
    "\160\275\121\u0122\160\u0122\160\300\123\265\127" +
    "\273\130\u0122\160\u0122\160\275\121\300\123\300" +
    "\123\u0122\160\273\130\u0122\160\300\123\275\121" +
    "\u0122\160\u0122\160\273\130\u0122\160\u0122\160\275" +
    "\121\300\123\303\137\303\137\303\137\303\137" +
    "\303\137\303\137\300\123\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\300\123\304\001\304\001" +
    "\304\001\304\001\304\001\304\001\u0122\160\305" +
    "\004\u0122\160\303\137\305\004\305\004\305\004" +
    "\305\004\305\004\305\004\305\004\305\004\305" +
    "\004\u0122\160\312\032\312\032\304\001\312\024" +
    "\310\124\u0122\160\305\004\305\004\305\004\305" +
    "\004\310\124\310\124\312\024\305\004\u0122\160" +
    "\310\124\312\024\u0122\160\315\125\305\004\312" +
    "\024\317\120\u0122\160\310\124\315\125\315\125" +
    "\u0122\160\317\120\317\120\315\125\310\124\u0122" +
    "\160\317\120\u0122\160\u0122\160\322\122\310\124" +
    "\315\125\u0122\160\u0122\160\317\120\322\122\322" +
    "\122\u0122\160\315\125\u0122\160\322\122\317\120" +
    "\u0122\160\u0122\160\315\125\u0122\160\u0122\160\317" +
    "\120\322\122\324\002\324\002\324\002\324\002" +
    "\324\002\324\002\322\122\u0122\160\324\305\u0122" +
    "\160\u0122\160\u0122\160\322\122\325\134\325\134" +
    "\325\134\325\134\325\134\325\134\u0122\160\u0122" +
    "\160\u0122\160\324\002\327\002\327\002\327\002" +
    "\327\002\327\002\327\002\u0122\160\u0122\160\327" +
    "\305\351\000\u0122\160\352\363\325\134\330\136" +
    "\330\136\330\136\330\136\330\136\330\136\332" +
    "\133\u0122\160\351\000\327\002\352\000\u0122\160" +
    "\332\133\332\133\351\000\u0107\111\352\000\332" +
    "\133\u0122\160\351\000\u0122\160\352\371\330\136" +
    "\353\056\u0122\160\332\133\u0107\111\356\000\351" +
    "\000\351\000\352\367\352\366\332\133\u0122\160" +
    "\u0107\111\353\056\u0122\160\u0122\160\332\133\356" +
    "\000\u0122\160\353\056\u0122\160\u0122\160\u0122\160" +
    "\356\000\353\056\u0107\111\u0122\160\361\000\356" +
    "\000\u0122\160\u010f\104\u0122\160\u0122\160\353\056" +
    "\353\056\362\026\u0122\160\356\000\356\000\361" +
    "\000\u0122\160\u010f\104\u0122\160\361\375\u0122\160" +
    "\361\000\u0122\160\362\026\362\026\u010f\104\361" +
    "\000\362\026\363\057\362\026\365\054\u0122\160" +
    "\u0122\160\u0122\160\362\026\361\000\361\000\u0122" +
    "\160\u010f\104\u0114\106\363\057\u0122\160\365\054" +
    "\362\026\362\026\u0122\160\363\057\u0122\160\365" +
    "\054\u0122\160\u0114\106\363\057\366\027\365\054" +
    "\373\052\u0122\160\u0122\160\u0122\160\u0114\106\u0122" +
    "\160\363\057\363\057\365\054\365\054\366\027" +
    "\366\027\373\052\u0122\160\366\027\u0122\160\366" +
    "\027\u0114\106\373\052\u0122\160\u0122\160\366\027" +
    "\u0122\160\373\052\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\366\027\366\027\373\052" +
    "\373\052\374\176\u0122\160\u0122\160\374\212\374" +
    "\217\374\201\374\220\374\211\374\177\374\202" +
    "\374\216\374\200\375\055\u0122\160\u0122\160\376" +
    "\053\u0122\160\u0122\160\u0117\102\374\206\374\214" +
    "\374\205\374\210\u0122\160\375\055\u0122\160\374" +
    "\204\376\053\377\025\u0117\102\375\055\u0122\160" +
    "\374\213\376\053\u0122\160\375\055\u0122\160\u0117" +
    "\102\376\053\u0122\160\377\025\u0122\160\u0122\160" +
    "\u0122\160\375\055\375\055\377\025\376\053\376" +
    "\053\u0122\160\u0117\102\377\025\u0122\160\u0122\160" +
    "\u0119\002\u0119\002\u0119\002\u0119\002\u0119\002\u0119" +
    "\002\377\025\377\025\u0119\305\u011a\135\u011a\135" +
    "\u011a\135\u011a\135\u011a\135\u011a\135\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\u011d\152" +
    "\u0119\002\u011d\152\u011d\152\u011d\152\u011d\152\u011d" +
    "\152\u011d\152\u011e\000\u0122\160\u011a\135\u0122\160" +
    "\u0122\160\u0122\160\u011e\264\u011e\257\u0122\160\u0122" +
    "\160\u0122\160\u011e\000\u0122\160\u0122\160\u0122\160" +
    "\u0122\160\u011d\152\u0122\160\u0122\160\u011e\332\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\u0122\160" +
    "\u011e\255\u0122\160\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\u011e\000\u0122\160\000\u0166\000\262\262\262" +
    "\262\262\262\262\263\262\262\262\277\263\262" +
    "\262\262\262\262\262\262\262\262\262\262\262" +
    "\262\262\262\262\262\262\262\262\264\275\262" +
    "\262\262\262\262\262\265\262\262\262\262\302" +
    "\262\307\312\262\262\262\262\262\262\346\262" +
    "\262\262\262\337\262\262\262\262\262\346\262" +
    "\262\262\307\262\262\301\262\262\262\262\262" +
    "\262\262\262\262\262\262\262\262\262\307\262" +
    "\262\301\262\262\262\267\262\262\262\264\262" +
    "\262\266\262\262\262\262\266\262\271\262\262" +
    "\371\303\305\262\301\262\262\262\374\351\262" +
    "\262\262\357\262\262\370\262\262\262\262\262" +
    "\262\371\262\262\262\372\262\262\262\262\262" +
    "\356\262\330\262\262\262\341\353\354\u0107\262" +
    "\262\262\262\u0101\262\u010d\262\262\u0113\262\262" +
    "\262\267\262\363\262\262\u0124\u0127\u012e\u011c\003" +
    "\007\000\011\013\000\123\075\145\256\150\252" +
    "\012\000\000\067\077\161\072\117\075\101\070" +
    "\006\010\141\066\100\067\227\157\106\127\167" +
    "\110\133\022\022\052\052\253\026\034\113\135" +
    "\163\002\022\044\045\050\047\022\046\057\050" +
    "\047\022\046\075\022\047\127\063\047\133\062" +
    "\152\106\112\134\110\220\170\130\153\156\155" +
    "\204\154\105\022\165\200\173\047\201\131\022" +
    "\166\224\225\047\213\107\175\174\173\203\245" +
    "\207\163\211\215\216\172\212\242\217\233\211" +
    "\235\254\241\234\000\211\243\172\236\234\075" +
    "\211\246\167\236\234\260\211\152\000\236\234" +
    "\000\000\261\163\153\257\155\157\154\166\000" +
    "\000\000\000\000\000\000\000\000\000\000\163" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000";

  /** Instance of action encapsulation class. */
  protected CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$actions(this);
    }
  
  protected String action_table()
    {
      return CUP$tables;
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;
  
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$left, CUP$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

          /* declare "error" as a terminal */
          symbols.put("error", new symbol_part(terminal.error));

          /* declare start non terminal */
          non_terms.put("$START", non_terminal.START_nt);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0",46, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-8);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1",47, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-2);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2",48, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3",49, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term",28, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term",29, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4",50, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5",51, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6",52, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id",34, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id",35, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Symbol CUP$symstart_name = CUP$stack.peek();
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7",53, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH nt_id NT$7 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symstart_name = CUP$stack.elementAt(CUP$size-3);
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              Symbol CUP$symlhs_id = CUP$stack.peek();
              int lhs_idleft = CUP$symlhs_id.left;
              int lhs_idright = CUP$symlhs_id.right;
              String lhs_id = (String) CUP$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8",54, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= nt_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              int lhs_idleft = CUP$left.left;
              int lhs_idright = CUP$left.right;
              String lhs_id = (String) CUP$left.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$9",55, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int term_nameleft = CUP$right.left;
              int term_nameright = CUP$right.right;
              String term_name = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs ::= prod_part_list prod_precedence 
            {
              Symbol CUP$right = CUP$stack.peek();
              int precsymleft = CUP$right.left;
              int precsymright = CUP$right.right;
              symbol precsym = (symbol) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int rhsleft = CUP$left.left;
              int rhsright = CUP$left.right;
              ArrayList<production_part> rhs = (ArrayList<production_part>) CUP$left.value;

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs",22, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int prodleft = CUP$right.left;
              int prodright = CUP$right.right;
              production_part prod = (production_part) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              ArrayList<production_part> list = (ArrayList<production_part>) CUP$left.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = new ArrayList<production_part>(); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int symidleft = CUP$left.left;
              int symidright = CUP$left.right;
              String symid = (String) CUP$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int code_strleft = CUP$right.left;
              int code_strright = CUP$right.right;
              String code_str = (String) CUP$right.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_label ::= empty 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int another_idleft = CUP$right.left;
              int another_idright = CUP$right.right;
              String another_id = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symtypes = CUP$stack.elementAt(CUP$size-2);
              int typesleft = CUP$symtypes.left;
              int typesright = CUP$symtypes.right;
              String types = (String) CUP$symtypes.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int an_idleft = CUP$right.left;
              int an_idright = CUP$right.right;
              String an_id = (String) CUP$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typeargument 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              String list = (String) CUP$left.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeargument ::= wildcard 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int wleft = CUP$right.left;
              int wright = CUP$right.right;
              String w = (String) CUP$right.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "?"; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_term_id ::= ID 
            {
              Symbol CUP$right = CUP$stack.peek();
              int term_idleft = CUP$right.left;
              int term_idright = CUP$right.right;
              String term_id = (String) CUP$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id",19, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_non_term_id ::= ID 
            {
              Symbol CUP$right = CUP$stack.peek();
              int non_term_idleft = CUP$right.left;
              int non_term_idright = CUP$right.right;
              String non_term_id = (String) CUP$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id",20, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nt_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // symbol_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // label_id ::= robust_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id",32, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "code"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "action"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "parser"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "terminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "non"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonterminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "init"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "scan"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "with"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "start"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "precedence"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "left"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "right"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonassoc"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // empty ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty",23, CUP$right, CUP$right);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

