
//----------------------------------------------------
// The following code was generated by CUP v0.11joho 20081107
// Sat Nov 08 20:07:53 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.Hashtable;

/** CUP v0.11joho 20081107 generated parser.
  * @version Sat Nov 08 20:07:53 CET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  private static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\057\002\000\002\002" +
    "\012\000\002\002\007\000\002\060\002\000\002\003\006" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\016\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\006\002\000\002\006" +
    "\004\000\002\005\006\000\002\012\006\000\002\017\006" +
    "\000\002\020\006\000\002\013\004\000\002\013\003\000" +
    "\002\061\002\000\002\021\006\000\002\021\004\000\002" +
    "\062\002\000\002\021\006\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\040\004\000\002\041\004" +
    "\000\002\022\005\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\034\003\000\002\034\003\000\002" +
    "\037\004\000\002\037\003\000\002\063\002\000\002\035" +
    "\007\000\002\064\002\000\002\035\007\000\002\065\002" +
    "\000\002\035\007\000\002\036\005\000\002\036\003\000" +
    "\002\046\003\000\002\047\003\000\002\066\002\000\002" +
    "\014\007\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\067\002\000\002\024\007\000\002\070\002" +
    "\000\002\024\005\000\002\031\005\000\002\031\003\000" +
    "\002\032\005\000\002\032\003\000\002\025\004\000\002" +
    "\025\003\000\002\026\004\000\002\026\003\000\002\045" +
    "\004\000\002\045\003\000\002\054\005\000\002\054\006" +
    "\000\002\054\003\000\002\051\003\000\002\051\005\000" +
    "\002\052\003\000\002\052\003\000\002\053\003\000\002" +
    "\053\005\000\002\053\005\000\002\055\005\000\002\055" +
    "\003\000\002\056\003\000\002\056\005\000\002\027\003" +
    "\000\002\030\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\011" +
    "\004\000\002\011\003\000\002\010\002\000\002\010\003" +
    "\000\002\033\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  private static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\026\003\006\004\000\005\000\007\000\010" +
    "\000\011\000\012\000\013\000\014\000\035\000\001\002" +
    "\000\024\004\213\005\uff93\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\013\uff93\014\uff93\035\uff93\001\002\000\004\002\210" +
    "\001\002\000\010\011\013\012\007\035\012\001\002\000" +
    "\004\011\207\001\002\000\020\003\uff93\011\013\012\007" +
    "\016\uff93\026\116\035\012\043\uff93\001\002\000\042\003" +
    "\102\006\032\007\040\010\020\011\041\012\025\013\033" +
    "\014\031\015\035\016\022\026\037\027\021\030\034\031" +
    "\017\035\036\043\077\001\002\000\042\003\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\026\uff96\027\uff96\030\uff96\031\uff96\035\uff96" +
    "\043\uff96\001\002\000\042\003\042\006\032\007\040\010" +
    "\020\011\041\012\025\013\033\014\031\015\035\016\022" +
    "\026\037\027\021\030\034\031\017\035\036\043\026\001" +
    "\002\000\020\003\uffec\011\uffec\012\uffec\016\uffec\026\uffec" +
    "\035\uffec\043\uffec\001\002\000\020\003\uffe9\011\uffe9\012" +
    "\uffe9\016\uffe9\026\uffe9\035\uffe9\043\uffe9\001\002\000\016" +
    "\020\uffb0\022\055\033\uffb0\036\uffb0\037\054\043\uffb0\001" +
    "\002\000\030\003\uff99\017\uff99\020\uff99\022\uff99\025\uff99" +
    "\032\uff99\033\uff99\036\uff99\037\uff99\043\uff99\044\uff99\001" +
    "\002\000\030\003\uffa4\017\uffa4\020\uffa4\022\uffa4\025\uffa4" +
    "\032\uffa4\033\uffa4\036\uffa4\037\uffa4\043\uffa4\044\uffa4\001" +
    "\002\000\030\003\uff9b\017\uff9b\020\uff9b\022\uff9b\025\uff9b" +
    "\032\uff9b\033\uff9b\036\uff9b\037\uff9b\043\uff9b\044\uff9b\001" +
    "\002\000\030\003\uff9d\017\uff9d\020\uff9d\022\uff9d\025\uff9d" +
    "\032\uff9d\033\uff9d\036\uff9d\037\uff9d\043\uff9d\044\uff9d\001" +
    "\002\000\006\017\uffe0\020\uffe0\001\002\000\020\017\uffba" +
    "\020\uffba\022\uffba\033\uffba\036\uffba\037\uffba\043\uffba\001" +
    "\002\000\030\003\uffa2\017\uffa2\020\uffa2\022\uffa2\025\uffa2" +
    "\032\uffa2\033\uffa2\036\uffa2\037\uffa2\043\uffa2\044\uffa2\001" +
    "\002\000\016\017\uffae\020\uffae\022\uffa7\033\uffa7\037\uffa7" +
    "\043\uffa7\001\002\000\006\017\052\020\051\001\002\000" +
    "\006\033\044\043\uffeb\001\002\000\030\003\uff9f\017\uff9f" +
    "\020\uff9f\022\uff9f\025\uff9f\032\uff9f\033\uff9f\036\uff9f\037" +
    "\uff9f\043\uff9f\044\uff9f\001\002\000\030\003\uffa6\017\uffa6" +
    "\020\uffa6\022\uffa6\025\uffa6\032\uffa6\033\uffa6\036\uffa6\037" +
    "\uffa6\043\uffa6\044\uffa6\001\002\000\030\003\uffa0\017\uffa0" +
    "\020\uffa0\022\uffa0\025\uffa0\032\uffa0\033\uffa0\036\uffa0\037" +
    "\uffa0\043\uffa0\044\uffa0\001\002\000\030\003\uff9a\017\uff9a" +
    "\020\uff9a\022\uff9a\025\uff9a\032\uff9a\033\uff9a\036\uff9a\037" +
    "\uff9a\043\uff9a\044\uff9a\001\002\000\030\003\uff9e\017\uff9e" +
    "\020\uff9e\022\uff9e\025\uff9e\032\uff9e\033\uff9e\036\uff9e\037" +
    "\uff9e\043\uff9e\044\uff9e\001\002\000\030\003\uffa1\017\uffa1" +
    "\020\uffa1\022\uffa1\025\uffa1\032\uffa1\033\uffa1\036\uffa1\037" +
    "\uffa1\043\uffa1\044\uffa1\001\002\000\030\003\uff9c\017\uff9c" +
    "\020\uff9c\022\uff9c\025\uff9c\032\uff9c\033\uff9c\036\uff9c\037" +
    "\uff9c\043\uff9c\044\uff9c\001\002\000\030\003\uffa5\017\uffa5" +
    "\020\uffa5\022\uffa5\025\uffa5\032\uffa5\033\uffa5\036\uffa5\037" +
    "\uffa5\043\uffa5\044\uffa5\001\002\000\030\003\uffa3\017\uffa3" +
    "\020\uffa3\022\uffa3\025\uffa3\032\uffa3\033\uffa3\036\uffa3\037" +
    "\uffa3\043\uffa3\044\uffa3\001\002\000\014\017\043\022\uff98" +
    "\033\uff98\037\uff98\043\uff98\001\002\000\020\003\uffe5\011" +
    "\uffe5\012\uffe5\016\uffe5\026\uffe5\035\uffe5\043\uffe5\001\002" +
    "\000\004\034\050\001\002\000\004\043\047\001\002\000" +
    "\020\003\uffea\011\uffea\012\uffea\016\uffea\026\uffea\035\uffea" +
    "\043\uffea\001\002\000\006\017\uffae\020\uffae\001\002\000" +
    "\012\020\uffaf\033\uffaf\036\uffaf\043\uffaf\001\002\000\004" +
    "\043\047\001\002\000\020\003\uffe3\011\uffe3\012\uffe3\016" +
    "\uffe3\026\uffe3\035\uffe3\043\uffe3\001\002\000\006\017\uffe1" +
    "\020\uffe1\001\002\000\044\003\060\006\032\007\040\010" +
    "\020\011\041\012\025\013\033\014\031\015\035\016\022" +
    "\026\037\027\021\030\034\031\017\035\036\040\062\043" +
    "\057\001\002\000\042\003\060\006\032\007\040\010\020" +
    "\011\041\012\025\013\033\014\031\015\035\016\022\026" +
    "\037\027\021\030\034\031\017\035\036\043\057\001\002" +
    "\000\020\017\uffbc\020\uffbc\022\uffbc\033\uffbc\036\uffbc\037" +
    "\uffbc\043\uffbc\001\002\000\030\003\uffa7\017\uffa7\020\uffa7" +
    "\022\uffa7\025\uffa7\032\uffa7\033\uffa7\036\uffa7\037\uffa7\043" +
    "\uffa7\044\uffa7\001\002\000\030\003\uff98\017\uff98\020\uff98" +
    "\022\uff98\025\uff98\032\uff98\033\uff98\036\uff98\037\uff98\043" +
    "\uff98\044\uff98\001\002\000\006\020\uffb9\036\uffb9\001\002" +
    "\000\012\020\uffb5\036\uffb5\041\071\042\072\001\002\000" +
    "\006\020\067\036\066\001\002\000\010\020\uffb7\033\044" +
    "\036\uffb7\001\002\000\006\020\uffb6\036\uffb6\001\002\000" +
    "\020\017\uffbb\020\uffbb\022\uffbb\033\uffbb\036\uffbb\037\uffbb" +
    "\043\uffbb\001\002\000\044\003\060\006\032\007\040\010" +
    "\020\011\041\012\025\013\033\014\031\015\035\016\022" +
    "\026\037\027\021\030\034\031\017\035\036\040\062\043" +
    "\057\001\002\000\006\020\uffb8\036\uffb8\001\002\000\042" +
    "\003\060\006\032\007\040\010\020\011\041\012\025\013" +
    "\033\014\031\015\035\016\022\026\037\027\021\030\034" +
    "\031\017\035\036\043\057\001\002\000\042\003\060\006" +
    "\032\007\040\010\020\011\041\012\025\013\033\014\031" +
    "\015\035\016\022\026\037\027\021\030\034\031\017\035" +
    "\036\043\057\001\002\000\010\020\uffb4\033\044\036\uffb4" +
    "\001\002\000\010\020\uffb3\033\044\036\uffb3\001\002\000" +
    "\006\017\uffde\020\uffde\001\002\000\006\017\110\020\107" +
    "\001\002\000\016\017\uffad\020\uffad\022\uffa7\033\uffa7\037" +
    "\uffa7\043\uffa7\001\002\000\006\033\044\043\uffe8\001\002" +
    "\000\020\003\uffe6\011\uffe6\012\uffe6\016\uffe6\026\uffe6\035" +
    "\uffe6\043\uffe6\001\002\000\014\017\103\022\uff98\033\uff98" +
    "\037\uff98\043\uff98\001\002\000\020\003\uffe4\011\uffe4\012" +
    "\uffe4\016\uffe4\026\uffe4\035\uffe4\043\uffe4\001\002\000\004" +
    "\043\105\001\002\000\006\017\uffad\020\uffad\001\002\000" +
    "\020\003\uffe7\011\uffe7\012\uffe7\016\uffe7\026\uffe7\035\uffe7" +
    "\043\uffe7\001\002\000\004\043\105\001\002\000\020\003" +
    "\uffe2\011\uffe2\012\uffe2\016\uffe2\026\uffe2\035\uffe2\043\uffe2" +
    "\001\002\000\006\017\uffdf\020\uffdf\001\002\000\010\003" +
    "\uff93\016\146\043\uff93\001\002\000\010\003\uffdc\016\uffdc" +
    "\043\uffdc\001\002\000\012\003\uffdd\016\uffdd\026\116\043" +
    "\uffdd\001\002\000\012\003\uffda\016\uffda\026\uffda\043\uffda" +
    "\001\002\000\010\027\122\030\121\031\120\001\002\000" +
    "\020\003\uffed\011\uffed\012\uffed\016\uffed\026\uffed\035\uffed" +
    "\043\uffed\001\002\000\006\003\uffd5\043\uffd5\001\002\000" +
    "\006\003\uffd7\043\uffd7\001\002\000\006\003\uffd9\043\uffd9" +
    "\001\002\000\006\003\131\043\124\001\002\000\022\003" +
    "\uffaa\017\uffaa\020\uffaa\023\uffaa\025\uffaa\032\uffaa\043\uffaa" +
    "\044\uffaa\001\002\000\006\017\uffd2\020\uffd2\001\002\000" +
    "\006\017\uffd1\020\uffd1\001\002\000\006\017\133\020\132" +
    "\001\002\000\010\017\uffd0\020\uffd0\025\uffd0\001\002\000" +
    "\022\003\uffa9\017\uffa9\020\uffa9\023\uffa9\025\uffa9\032\uffa9" +
    "\043\uffa9\044\uffa9\001\002\000\006\003\131\043\124\001" +
    "\002\000\012\003\uffd8\016\uffd8\026\uffd8\043\uffd8\001\002" +
    "\000\006\017\uffd3\020\uffd3\001\002\000\006\003\131\043" +
    "\124\001\002\000\006\017\137\020\132\001\002\000\012" +
    "\003\uffd6\016\uffd6\026\uffd6\043\uffd6\001\002\000\006\003" +
    "\131\043\124\001\002\000\006\017\142\020\132\001\002" +
    "\000\012\003\uffd4\016\uffd4\026\uffd4\043\uffd4\001\002\000" +
    "\012\003\uffdb\016\uffdb\026\uffdb\043\uffdb\001\002\000\006" +
    "\003\uffcd\043\uffcd\001\002\000\006\003\160\043\150\001" +
    "\002\000\004\015\147\001\002\000\006\003\152\043\150" +
    "\001\002\000\006\017\uffac\024\uffac\001\002\000\004\017" +
    "\uffcf\001\002\000\004\017\uffab\001\002\000\004\017\154" +
    "\001\002\000\006\003\uffce\043\uffce\001\002\000\010\002" +
    "\ufffe\003\160\043\150\001\002\000\004\024\uffca\001\002" +
    "\000\010\002\uffcb\003\uffcb\043\uffcb\001\002\000\006\017" +
    "\uffc8\024\uffab\001\002\000\004\017\162\001\002\000\010" +
    "\002\uffc7\003\uffc7\043\uffc7\001\002\000\004\024\164\001" +
    "\002\000\016\003\uff93\017\uff93\025\uff93\032\uff93\043\uff93" +
    "\044\uff93\001\002\000\006\017\uffc5\025\uffc5\001\002\000" +
    "\006\017\204\025\203\001\002\000\016\003\uffc1\017\uffc1" +
    "\025\uffc1\032\uffc1\043\uffc1\044\uffc1\001\002\000\016\003" +
    "\131\017\uffc3\025\uffc3\032\174\043\124\044\171\001\002" +
    "\000\016\003\uffbf\017\uffbf\025\uffbf\032\uffbf\043\uffbf\044" +
    "\uffbf\001\002\000\020\003\uff93\017\uff93\023\176\025\uff93" +
    "\032\uff93\043\uff93\044\uff93\001\002\000\016\003\uffc2\017" +
    "\uffc2\025\uffc2\032\uffc2\043\uffc2\044\uffc2\001\002\000\006" +
    "\003\131\043\124\001\002\000\006\017\uffc4\025\uffc4\001" +
    "\002\000\042\003\060\006\032\007\040\010\020\011\041" +
    "\012\025\013\033\014\031\015\035\016\022\026\037\027" +
    "\021\030\034\031\017\035\036\043\057\001\002\000\016" +
    "\003\uffbd\017\uffbd\025\uffbd\032\uffbd\043\uffbd\044\uffbd\001" +
    "\002\000\016\003\uffc0\017\uffc0\025\uffc0\032\uffc0\043\uffc0" +
    "\044\uffc0\001\002\000\016\003\uffa8\017\uffa8\025\uffa8\032" +
    "\uffa8\043\uffa8\044\uffa8\001\002\000\016\003\uffbe\017\uffbe" +
    "\025\uffbe\032\uffbe\043\uffbe\044\uffbe\001\002\000\016\003" +
    "\uff93\017\uff93\025\uff93\032\uff93\043\uff93\044\uff93\001\002" +
    "\000\010\002\uffc9\003\uffc9\043\uffc9\001\002\000\006\017" +
    "\uffc6\025\uffc6\001\002\000\010\002\uffcc\003\uffcc\043\uffcc" +
    "\001\002\000\042\003\uff97\006\uff97\007\uff97\010\uff97\011" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\026\uff97" +
    "\027\uff97\030\uff97\031\uff97\035\uff97\043\uff97\001\002\000" +
    "\004\002\001\001\002\000\022\005\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\013\uff93\014\uff93\035\uff93\001\002\000" +
    "\022\005\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\035\ufffb\001\002\000\042\003\060\006\032\007" +
    "\040\010\020\011\041\012\025\013\033\014\031\015\035" +
    "\016\022\026\037\027\021\030\034\031\017\035\036\043" +
    "\057\001\002\000\010\017\ufffd\022\055\037\054\001\002" +
    "\000\004\017\216\001\002\000\022\005\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\035\ufffc\001\002" +
    "\000\022\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\035\ufff9\001\002\000\022\005\223\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\035\ufff3\001" +
    "\002\000\020\007\241\010\235\011\013\012\007\013\237" +
    "\014\240\035\012\001\002\000\022\005\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\035\ufffa\001\002" +
    "\000\042\003\060\006\032\007\040\010\020\011\041\012" +
    "\025\013\033\014\031\015\035\016\022\026\037\027\021" +
    "\030\034\031\017\035\036\043\057\001\002\000\010\017" +
    "\uffb1\022\227\037\054\001\002\000\004\017\226\001\002" +
    "\000\022\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\014\ufff8\035\ufff8\001\002\000\044\003\060\006\032" +
    "\007\040\010\020\011\041\012\025\013\033\014\031\015" +
    "\035\016\022\021\230\026\037\027\021\030\034\031\017" +
    "\035\036\043\057\001\002\000\004\017\uffb2\001\002\000" +
    "\020\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\035\ufff7\001\002\000\020\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\035\ufff6\001\002\000\020\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\035\ufff4\001" +
    "\002\000\020\003\uff93\011\013\012\007\016\uff93\026\116" +
    "\035\012\043\uff93\001\002\000\004\006\255\001\002\000" +
    "\020\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\035\ufff5\001\002\000\004\015\252\001\002\000\004\015" +
    "\247\001\002\000\004\006\243\001\002\000\020\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\035\ufff2\001" +
    "\002\000\004\044\244\001\002\000\022\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\017\245\035\uff95\001" +
    "\002\000\020\007\uff94\010\uff94\011\uff94\012\uff94\013\uff94" +
    "\014\uff94\035\uff94\001\002\000\020\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\035\ufff1\001\002\000\004" +
    "\044\250\001\002\000\022\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\014\uff95\017\245\035\uff95\001\002\000\020" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\035" +
    "\uffee\001\002\000\004\044\253\001\002\000\022\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\017\245\035" +
    "\uff95\001\002\000\020\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\035\uffef\001\002\000\004\044\256\001" +
    "\002\000\022\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95" +
    "\014\uff95\017\245\035\uff95\001\002\000\020\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\035\ufff0\001\002" +
    "\000\010\003\uff93\016\146\043\uff93\001\002\000\006\003" +
    "\160\043\150\001\002\000\010\002\uffff\003\160\043\150" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  private static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\002\004\057\003\001\001\000\006\003" +
    "\210\033\211\001\001\000\002\001\001\000\010\011\010" +
    "\013\007\021\013\001\001\000\002\001\001\000\016\011" +
    "\010\021\116\033\112\034\111\035\114\037\113\001\001" +
    "\000\016\023\075\030\074\041\100\050\023\054\015\056" +
    "\077\001\001\000\002\001\001\000\016\022\026\027\022" +
    "\040\014\050\023\054\015\056\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\026\027" +
    "\022\040\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\023\051\062\052\060" +
    "\053\064\054\015\056\063\001\001\000\004\050\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\050\023\052\067\053\064\054\015\056\063\001\001\000" +
    "\002\001\001\000\010\050\023\054\015\056\073\001\001" +
    "\000\010\050\023\054\015\056\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\075" +
    "\030\074\041\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\144\033\143\001\001\000\002\001" +
    "\001\000\004\035\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\137\001\001\000" +
    "\004\064\134\001\001\000\004\063\122\001\001\000\012" +
    "\036\126\043\127\046\124\047\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\043\127\046" +
    "\133\047\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\135\043\127\046\124\047\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\036\140\043\127" +
    "\046\124\047\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\154" +
    "\024\156\042\155\001\001\000\002\001\001\000\004\042" +
    "\150\001\001\000\002\001\001\000\004\066\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\024\205\042\155\001\001\000\004\067\162\001\001" +
    "\000\002\001\001\000\004\070\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\167" +
    "\031\165\032\164\033\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\172\043\171" +
    "\001\001\000\002\001\001\000\006\033\176\045\177\001" +
    "\001\000\002\001\001\000\006\043\127\047\174\001\001" +
    "\000\002\001\001\000\006\044\201\050\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\025\167\032\204\033\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\217\033\216\001" +
    "\001\000\002\001\001\000\006\050\023\054\213\001\001" +
    "\000\004\060\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\220\016\221\001\001" +
    "\000\022\005\230\007\241\011\010\012\231\013\233\017" +
    "\235\020\232\021\013\001\001\000\002\001\001\000\010" +
    "\050\023\054\223\055\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\010\021\116\033\112\034\257" +
    "\035\114\037\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\256\001\001\000\002\001\001\000" +
    "\006\014\260\033\143\001\001\000\010\015\261\024\156" +
    "\042\155\001\001\000\006\024\205\042\155\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }



 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** max size of right hand side we will support */
  private final int MAX_RHS = 200;

  /** array for accumulating right hand side parts */
  private production_part[] rhs_parts = new production_part[MAX_RHS];

  /** where we are currently in building a right hand side */
  private int rhs_pos = 0;

  /** start a new right hand side */
  private void new_rhs() {rhs_pos = 0; }

  /** add a new right hand side part */
  private void add_rhs_part(production_part part) throws java.lang.Exception
    {
      if (rhs_pos >= MAX_RHS)
	throw new Exception("Internal Error: Productions limited to " + 
			     MAX_RHS + " symbols and actions"); 

      rhs_parts[rhs_pos] = part;
      rhs_pos++;
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private Hashtable<String, symbol_part> symbols = new Hashtable<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private Hashtable<String, non_terminal> non_terms = new Hashtable<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;
  
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$parser$size = CUP$parser$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int start_valleft = CUP$parser$left.left;
              int start_valright = CUP$parser$left.right;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$parser$left, CUP$parser$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

          /* declare "error" as a terminal */
          symbols.put("error", new symbol_part(terminal.error));

          /* declare start non terminal */
          non_terms.put("$START", non_terminal.START_nt);
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-8);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Symbol CUP$parser$symid = CUP$parser$stack.peek();
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;

	  /* save the package name */
	  emit.package_name = id.toString();
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symid = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symid = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
 
	  /* save this import on the imports list */
	  emit.import_list.add(id.toString());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symuser_code = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int user_codeleft = CUP$parser$symuser_code.left;
              int user_coderight = CUP$parser$symuser_code.right;
              String user_code = (String) CUP$parser$symuser_code.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);

	  if (emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    emit.parser_code = user_code;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symuser_code = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int user_codeleft = CUP$parser$symuser_code.left;
              int user_coderight = CUP$parser$symuser_code.right;
              String user_code = (String) CUP$parser$symuser_code.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);

	  if (emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    emit.action_code = user_code;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symuser_code = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int user_codeleft = CUP$parser$symuser_code.left;
              int user_coderight = CUP$parser$symuser_code.right;
              String user_code = (String) CUP$parser$symuser_code.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
 
	  if (emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    emit.scan_code = user_code;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symuser_code = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int user_codeleft = CUP$parser$symuser_code.left;
              int user_coderight = CUP$parser$symuser_code.right;
              String user_code = (String) CUP$parser$symuser_code.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
 
	  if (emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    emit.init_code = user_code;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symid = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
 _cur_symbol_type = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Symbol CUP$parser$symid = CUP$parser$stack.peek();
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Symbol CUP$parser$symid = CUP$parser$stack.peek();
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symid = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$symid.left;
              int idright = CUP$parser$symid.right;
              StringBuilder id = (StringBuilder) CUP$parser$symid.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
 _cur_symbol_type = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
 _cur_symbol_type = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
 _cur_symbol_type = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares_non_term",31, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declares_term",30, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_l",29, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_l",29, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_list",26, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("precedence_list",26, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",27, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",27, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_list",28, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_list",28, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("preced",27, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH nt_id NT$7 SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symstart_name = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int start_nameleft = CUP$parser$symstart_name.left;
              int start_nameright = CUP$parser$symstart_name.right;
              String start_name = (String) CUP$parser$symstart_name.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Symbol CUP$parser$symstart_name = CUP$parser$stack.peek();
              int start_nameleft = CUP$parser$symstart_name.left;
              int start_nameright = CUP$parser$symstart_name.right;
              String start_name = (String) CUP$parser$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      /* remember the non-terminal for later */
	      start_nt = nt;

	      /* build a special start production */
	      new_rhs();
	      add_rhs_part(add_lab(new symbol_part(start_nt), "start_val"));
	      add_rhs_part(new symbol_part(terminal.EOF));
	      if (start_nt.stack_type() != null)
	      	add_rhs_part(new action_part("RESULT = start_val;"));
	      emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);
	      new_rhs();
	    }
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int symleft = CUP$parser$right.left;
              int symright = CUP$parser$right.right;
              String sym = (String) CUP$parser$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_id",37, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int symleft = CUP$parser$right.left;
              int symright = CUP$parser$right.right;
              String sym = (String) CUP$parser$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminal_id",36, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              Symbol CUP$parser$symlhs_id = CUP$parser$stack.peek();
              int lhs_idleft = CUP$parser$symlhs_id.left;
              int lhs_idright = CUP$parser$symlhs_id.right;
              String lhs_id = (String) CUP$parser$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }

	  /* reset the rhs accumulation */
	  new_rhs();
	
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs_list",23, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("production",18, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= nt_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-5);
              int lhs_idleft = CUP$parser$left.left;
              int lhs_idright = CUP$parser$left.right;
              String lhs_id = (String) CUP$parser$left.value;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("production",18, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prod_part_list ::= prod_part_list prod_part 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part_list",19, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rhs ::= prod_part_list 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 
	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      production p = new production(lhs_nt, rhs_parts, rhs_pos);

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  add_rhs_part(new action_part("RESULT = start_val;"));
	          emit.start_production = 
		     new production(non_terminal.START_nt, rhs_parts, rhs_pos);

	          new_rhs();
		}
	    }
	  
	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",24, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rhs ::= prod_part_list PERCENT_PREC term_id 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int term_nameleft = CUP$parser$right.left;
              int term_nameright = CUP$parser$right.right;
              String term_name = (String) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);

	  java_cup.symbol sym = null;
	  if (lhs_nt != null) 
	    {
	      /* Find the precedence symbol */
	      if (term_name == null) {
		System.err.println("No terminal for contextual precedence");
		sym = null;
	      } else {
		sym = symbols.get(term_name).the_symbol();
	      }
	      /* build the production */
	      production p;
	      if ((sym!=null) && (sym instanceof terminal)) {
		p = new production(lhs_nt, rhs_parts, rhs_pos,
				   ((terminal)sym).precedence_num(),
				   ((terminal)sym).precedence_side());
		symbols.get(term_name).the_symbol().note_use();
	      } else {
		System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		p = new production(lhs_nt, rhs_parts, rhs_pos);
	      }

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
              if (start_nt == null)
		{
		  start_nt = lhs_nt;

	          /* build a special start production */
	          new_rhs();
	          add_rhs_part(add_lab(new symbol_part(start_nt),"start_val"));
	          add_rhs_part(new symbol_part(terminal.EOF));
		  add_rhs_part(new action_part("RESULT = start_val;"));
		  if ((sym!=null) && (sym instanceof terminal)) {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, 
				     rhs_pos, ((terminal)sym).precedence_num(),
				     ((terminal)sym).precedence_side());
		  } else {
		    emit.start_production = 
		      new production(non_terminal.START_nt, rhs_parts, rhs_pos);
		  }
	          new_rhs();
		}
	    }

	  /* reset the rhs accumulation in any case */
	  new_rhs();
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs",24, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rhs_list",23, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= empty 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_label",35, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int another_idleft = CUP$parser$right.left;
              int another_idright = CUP$parser$right.right;
              String another_id = (String) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$left.left;
              int idright = CUP$parser$left.right;
              StringBuilder id = (StringBuilder) CUP$parser$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",42, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$symtypes = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int typesleft = CUP$parser$symtypes.left;
              int typesright = CUP$parser$symtypes.right;
              String types = (String) CUP$parser$symtypes.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-4);
              int idleft = CUP$parser$left.left;
              int idright = CUP$parser$left.right;
              StringBuilder id = (StringBuilder) CUP$parser$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",42, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int an_idleft = CUP$parser$right.left;
              int an_idright = CUP$parser$right.right;
              String an_id = (String) CUP$parser$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipart_id",42, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= empty 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part_list",19, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part ::= symbol_id opt_label 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int labidleft = CUP$parser$right.left;
              int labidright = CUP$parser$right.right;
              String labid = (String) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              int symidleft = CUP$parser$left.left;
              int symidright = CUP$parser$left.right;
              String symid = (String) CUP$parser$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	    }
	  else
	    {
	      /* add a labeled production part */
	      add_rhs_part(add_lab(symb, labid));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part",20, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= CODE_STRING 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int code_strleft = CUP$parser$right.left;
              int code_strright = CUP$parser$right.right;
              String code_str = (String) CUP$parser$right.value;
 
	  /* add a new production part */
	  add_rhs_part(new action_part(code_str));
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prod_part",20, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int labidleft = CUP$parser$right.left;
              int labidright = CUP$parser$right.right;
              String labid = (String) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
 RESULT = labid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_label",35, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "?"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",41, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int idleft = CUP$parser$right.left;
              int idright = CUP$parser$right.right;
              StringBuilder id = (StringBuilder) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
 RESULT = "? extends "+id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",41, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int idleft = CUP$parser$right.left;
              int idright = CUP$parser$right.right;
              StringBuilder id = (StringBuilder) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
 RESULT = "? super "+id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("wildcard",41, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$left.left;
              int idright = CUP$parser$left.right;
              StringBuilder id = (StringBuilder) CUP$parser$left.value;
 id.append(".*"); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_id",43, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typearglist ::= typeargument 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int argleft = CUP$parser$right.left;
              int argright = CUP$parser$right.right;
              String arg = (String) CUP$parser$right.value;
 RESULT = arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearglist",39, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int argleft = CUP$parser$right.left;
              int argright = CUP$parser$right.right;
              String arg = (String) CUP$parser$right.value;
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int listleft = CUP$parser$left.left;
              int listright = CUP$parser$left.right;
              String list = (String) CUP$parser$left.value;
 RESULT = list + "," + arg; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typearglist",39, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeargument ::= type_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int idleft = CUP$parser$right.left;
              int idright = CUP$parser$right.right;
              StringBuilder id = (StringBuilder) CUP$parser$right.value;
 RESULT = id.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeargument",40, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= wildcard 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int wleft = CUP$parser$right.left;
              int wright = CUP$parser$right.right;
              String w = (String) CUP$parser$right.value;
 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeargument",40, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // nt_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int the_idleft = CUP$parser$right.left;
              int the_idright = CUP$parser$right.right;
              String the_id = (String) CUP$parser$right.value;
 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_id",32, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_non_term_id ::= ID 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int non_term_idleft = CUP$parser$right.left;
              int non_term_idright = CUP$parser$right.right;
              String non_term_id = (String) CUP$parser$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_non_term_id",22, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int the_idleft = CUP$parser$right.left;
              int the_idright = CUP$parser$right.right;
              String the_id = (String) CUP$parser$right.value;
 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_id",33, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_id",32, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int idleft = CUP$parser$right.left;
              int idright = CUP$parser$right.right;
              StringBuilder id = (StringBuilder) CUP$parser$right.value;
 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",44, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int idleft = CUP$parser$right.left;
              int idright = CUP$parser$right.right;
              StringBuilder id = (StringBuilder) CUP$parser$right.value;
 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_id",43, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_term_id ::= ID 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int term_idleft = CUP$parser$right.left;
              int term_idright = CUP$parser$right.right;
              String term_id = (String) CUP$parser$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("new_term_id",21, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-3);
              int idleft = CUP$parser$left.left;
              int idright = CUP$parser$left.right;
              StringBuilder id = (StringBuilder) CUP$parser$left.value;
 id.append("[]"); RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_id",44, CUP$parser$left, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= PARSER 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "parser"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= ACTION 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "action"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= NON 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "non"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "terminal"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int the_idleft = CUP$parser$right.left;
              int the_idright = CUP$parser$right.right;
              String the_id = (String) CUP$parser$right.value;
 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("label_id",34, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("symbol_id",33, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= CODE 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "code"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              int the_idleft = CUP$parser$right.left;
              int the_idright = CUP$parser$right.right;
              String the_id = (String) CUP$parser$right.value;
 RESULT = the_id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= LEFT 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "left"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "right"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= START 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "start"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "precedence"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= SCAN 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "scan"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= WITH 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "with"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "nonterminal"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= INIT 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "init"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // empty ::= 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",25, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opt_semi ::= 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= SEMI 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_terminal ::= NON TERMINAL 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              Symbol CUP$parser$left = CUP$parser$stack.elementAt(CUP$parser$size-2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$parser$left, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NONTERMINAL 
            {
              Symbol CUP$parser$right = CUP$parser$stack.peek();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$parser$right, CUP$parser$right);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();
 RESULT = "nonassoc"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$parser$right = CUP$parser$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("robust_id",38, CUP$parser$right, CUP$parser$right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

