
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sun Nov 09 02:03:50 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sun Nov 09 02:03:50 CET 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super(CUP$tables);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s,CUP$tables);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf,CUP$tables);}
  /** Instance of action encapsulation class. */
  private final static String CUP$tables = 
    "\000\340\000\000\002\056\000\000\010\000\005" +
    "\057\000\001\004\001\001\002\002\002\001\014" +
    "\003\005\001\005\001\005\001\005\001\004\000" +
    "\004\002\003\004\010\004\015\004\016\004\011" +
    "\002\011\001\060\000\017\004\017\002\061\000" +
    "\017\004\017\002\017\003\017\003\034\002\035" +
    "\002\020\003\020\001\021\003\021\001\030\001" +
    "\030\001\033\002\033\001\062\000\031\005\063" +
    "\000\031\005\064\000\031\005\032\003\032\001" +
    "\042\001\043\001\065\000\012\005\012\001\013" +
    "\002\013\001\066\000\022\005\067\000\022\003" +
    "\025\003\025\001\055\002\055\001\026\002\054" +
    "\002\054\001\053\002\053\001\041\002\041\001" +
    "\050\003\050\004\050\001\045\001\045\003\046" +
    "\001\046\001\047\001\047\003\047\003\051\003" +
    "\051\001\052\001\052\003\023\001\024\001\036" +
    "\001\036\001\037\001\037\001\040\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\007\002\007" +
    "\001\006\000\006\001\027\000\000\u0b50\160\u01d4" +
    "\160\u01e6\160\u01d4\160\u01ee\160\u01fe\160\u01e0\160" +
    "\u023a\160\u0276\160\u0298\160\u02d4\160\u02ec\160\u0318" +
    "\160\u0326\160\u0360\160\u0374\160\u03a6\160\u03d2\160" +
    "\u03e0\160\u01e8\160\u0278\160\u0400\160\u0424\160\u0432" +
    "\160\u045e\160\u046c\160\u0498\160\u01ea\160\u01de\160" +
    "\u01f8\160\u04a6\160\u04d2\160\u04e0\160\u01d6\160\u051a" +
    "\160\u0212\160\u0216\160\u01dc\160\u01f4\160\u0292\160" +
    "\u051e\160\u055c\160\u0598\160\u05b0\160\u05dc\160\u0520" +
    "\160\u021c\160\u021e\160\u023c\160\u0242\160\u029a\160" +
    "\u061a\160\u0620\160\u0298\160\u065c\160\u0698\160\u02dc" +
    "\160\u0304\160\u06ba\160\u06ce\160\u02f8\160\u0388\160" +
    "\u0240\160\u037a\160\u03cc\160\u0406\160\u0234\160\u02d6" +
    "\160\u0228\160\u0302\160\u0246\160\u02a2\160\u0258\160" +
    "\u0276\160\u032a\160\u0272\160\u0372\160\u02a4\160\u0382" +
    "\160\u04e4\160\u0282\160\u04f6\160\u029e\160\u06d2\160" +
    "\u0360\160\u0366\160\u06ec\160\u06f2\160\u070c\160\u037c" +
    "\160\u0384\160\u0726\160\u03b6\160\u0740\160\u076c\160" +
    "\u0770\160\u0792\160\u07a0\160\u07de\160\u07f6\160\u07fc" +
    "\160\u0410\160\u03c0\160\u0816\160\u054a\160\u0416\160" +
    "\u047a\160\u0492\160\u04cc\160\u04ee\160\u02d6\160\u02da" +
    "\160\u034a\160\u04f2\160\u05bc\160\u0456\160\u04fc\160" +
    "\u0466\160\u0674\160\u0506\160\u0490\160\u06e2\160\u055c" +
    "\160\u078a\160\u082e\160\u0834\160\u054c\160\u0560\160" +
    "\u02e0\160\u0854\160\u0566\160\u057a\160\u02e8\160\u0870" +
    "\160\u0876\160\u08b2\160\u01dc\160\u08ec\160\u08fc\160" +
    "\u092c\160\u05cc\160\u0334\160\u0966\160\u0976\160\u0986" +
    "\160\u09b6\160\u09f0\160\u09fc\160\u033e\160\u0a08\160" +
    "\u0a36\160\u0a42\160\u0a4e\160\u0a7c\160\u0a90\160\u0390" +
    "\160\u0394\160\u039c\160\u0376\160\u0ab0\160\u0aca\160" +
    "\u0ade\160\u0384\160\u0aea\160\u0afc\160\u038e\160\u0b1a" +
    "\160\u0b2c\160\u05d6\160\u0514\160\u05b8\160\u03ac\160" +
    "\u0b38\160\u0b4a\160\u03dc\160\u065e\160\u0b7a\160\u03e4" +
    "\160\u0b66\160\162\370\160\164\160\156\160\156" +
    "\367\157\160\156\160\156\160\156\160\156\160" +
    "\156\160\156\161\373\161\000\165\367\161\000" +
    "\161\000\161\000\161\000\161\000\161\000\163" +
    "\172\163\166\164\132\202\252\212\116\212\116" +
    "\202\005\160\156\164\132\164\132\213\226\214" +
    "\222\214\221\164\132\220\224\202\005\161\000" +
    "\224\224\213\131\202\005\163\167\164\132\225" +
    "\227\202\005\222\117\222\117\223\033\223\033" +
    "\164\132\261\275\235\042\236\243\166\003\263" +
    "\265\164\132\166\003\166\003\166\003\166\003" +
    "\166\003\166\003\166\003\166\003\166\003\235" +
    "\042\236\244\237\043\235\246\235\247\240\046" +
    "\265\075\166\003\166\003\166\003\166\003\255" +
    "\332\255\334\255\333\166\003\267\030\237\043" +
    "\261\267\167\353\240\046\166\003\167\220\167" +
    "\207\167\210\167\206\167\173\167\175\167\212" +
    "\167\202\167\177\270\272\203\033\203\033\272" +
    "\070\203\024\170\000\277\301\167\201\167\174" +
    "\167\216\167\211\170\172\170\166\203\024\167" +
    "\200\226\034\170\000\203\024\244\045\241\044" +
    "\167\354\203\024\266\031\274\066\170\256\301" +
    "\303\226\034\266\031\274\030\226\034\241\226" +
    "\170\167\244\045\241\044\226\034\171\203\262" +
    "\073\170\000\171\220\171\207\171\210\171\206" +
    "\171\173\171\175\171\212\171\202\171\177\172" +
    "\017\335\342\335\341\336\100\336\100\247\041" +
    "\253\112\171\201\171\174\171\216\171\211\264" +
    "\270\172\017\172\017\171\200\172\017\247\226" +
    "\253\112\172\017\247\041\171\204\262\073\173" +
    "\010\172\017\172\017\250\040\357\363\172\017" +
    "\172\017\174\015\363\363\271\074\172\017\172" +
    "\017\173\010\173\010\250\226\173\010\253\112" +
    "\250\040\173\010\174\015\174\015\264\267\174" +
    "\015\173\010\173\010\174\015\374\376\173\010" +
    "\173\010\u0103\u011b\174\015\174\015\173\010\173" +
    "\010\174\015\174\015\175\127\337\077\337\077" +
    "\174\015\174\015\271\074\175\127\175\127\273" +
    "\071\273\071\176\012\175\127\303\330\256\000" +
    "\310\316\304\063\275\154\275\275\303\327\175" +
    "\127\254\110\304\063\176\012\176\012\256\264" +
    "\176\012\175\127\u010a\u0115\176\012\u010b\u0112\311" +
    "\061\254\110\175\127\176\012\176\012\177\016" +
    "\311\061\176\012\176\012\254\110\u010c\u010e\273" +
    "\071\176\012\176\012\u010d\u010f\256\000\310\315" +
    "\177\016\177\016\275\267\177\016\u0111\u0113\254" +
    "\110\177\016\257\113\313\060\u0114\u0116\200\011" +
    "\177\016\177\016\325\062\313\060\177\016\177" +
    "\016\201\013\257\113\325\062\177\016\177\016" +
    "\200\011\200\011\u011a\u011c\200\011\257\256\u011d" +
    "\u0122\200\011\201\013\201\013\u0120\037\201\013" +
    "\200\011\200\011\201\013\260\111\200\011\200" +
    "\011\257\113\201\013\201\013\200\011\200\011" +
    "\201\013\201\013\204\035\260\111\204\232\201" +
    "\013\201\013\205\020\u0122\160\324\076\324\076" +
    "\260\111\330\064\204\035\206\022\324\076\204" +
    "\035\204\231\330\064\205\020\205\020\204\035" +
    "\205\020\u0122\160\260\111\205\020\206\022\206" +
    "\022\u0122\160\206\022\205\020\205\020\206\022" +
    "\u0122\160\205\020\205\020\207\021\206\022\206" +
    "\022\205\020\205\020\206\022\206\022\210\006" +
    "\342\101\342\101\206\022\206\022\207\021\207" +
    "\021\331\107\207\021\344\346\344\341\207\021" +
    "\210\006\210\006\u0122\160\210\006\207\021\207" +
    "\021\210\006\332\103\207\021\207\021\211\014" +
    "\210\006\210\006\207\021\207\021\210\006\210" +
    "\006\215\007\347\351\347\341\210\006\210\006" +
    "\211\014\211\014\u0122\160\211\014\u0122\160\331" +
    "\107\211\014\215\007\215\007\u0122\160\215\007" +
    "\211\014\211\014\215\007\333\105\211\014\211" +
    "\014\332\103\215\007\215\007\211\014\211\014" +
    "\215\007\215\007\217\023\276\072\276\072\215" +
    "\007\215\007\216\047\216\047\334\316\216\047" +
    "\340\316\300\065\300\065\217\023\217\023\343" +
    "\316\217\023\u0122\160\216\047\217\023\346\316" +
    "\216\047\216\047\333\105\217\023\217\023\216" +
    "\047\u0118\275\217\023\217\023\221\121\u0122\160" +
    "\227\130\217\023\217\023\276\072\221\121\221" +
    "\121\227\130\227\130\334\315\221\121\340\315" +
    "\227\130\300\065\234\051\234\051\343\315\234" +
    "\051\221\121\u0122\160\227\130\346\315\327\067" +
    "\327\067\u0122\160\221\121\234\051\227\130\u0118" +
    "\267\234\051\234\051\221\121\230\234\227\130" +
    "\234\051\230\220\230\207\230\210\230\206\230" +
    "\173\230\175\230\212\230\202\230\177\351\114" +
    "\351\114\356\361\356\360\355\226\361\115\361" +
    "\115\230\201\230\174\230\216\230\211\327\067" +
    "\355\126\u0122\160\230\200\362\032\362\032\230" +
    "\236\231\234\u0122\160\230\233\231\220\231\207" +
    "\231\210\231\206\231\173\231\175\231\212\231" +
    "\202\231\177\232\024\u0122\160\u0122\160\u0119\155" +
    "\u0119\275\u0122\160\341\104\231\201\231\174\231" +
    "\216\231\211\u0122\160\232\024\232\024\231\200" +
    "\232\024\u0122\160\341\104\232\024\u0117\000\231" +
    "\233\u0122\160\233\005\232\024\232\024\341\104" +
    "\373\153\232\024\232\024\373\232\u0117\264\u0122" +
    "\160\232\024\232\024\233\005\233\005\u0119\267" +
    "\233\005\341\104\u0122\160\233\005\u0122\160\373" +
    "\231\u0122\160\u0122\160\233\005\233\005\u0122\160" +
    "\u0122\160\233\005\233\005\u0117\000\u0122\160\242" +
    "\234\233\005\233\005\242\220\242\207\242\210" +
    "\242\206\242\173\242\175\242\212\242\202\242" +
    "\177\u0122\160\u0122\160\u0122\160\243\050\243\050" +
    "\u0122\160\243\050\242\201\242\174\242\216\242" +
    "\211\u0122\160\u0122\160\u0122\160\242\200\243\050" +
    "\u0122\160\242\236\243\050\243\050\242\233\245" +
    "\234\u0122\160\243\050\245\220\245\207\245\210" +
    "\245\206\245\173\245\175\245\212\245\202\245" +
    "\177\345\102\u011e\036\u0122\160\u0122\160\u011e\u0120" +
    "\u0122\160\u0122\160\245\201\245\174\245\216\245" +
    "\211\345\102\u0122\160\u0122\160\245\200\u0122\160" +
    "\u0122\160\u011e\231\246\234\345\102\245\233\246" +
    "\220\246\207\246\210\246\206\246\173\246\175" +
    "\246\212\246\202\246\177\u0122\160\u0122\160\345" +
    "\102\u0122\160\u0122\160\251\123\u0122\160\246\201" +
    "\246\174\246\216\246\211\251\123\251\123\u0122" +
    "\160\246\200\252\133\251\123\302\000\u0122\160" +
    "\u0122\160\246\233\252\133\252\133\u0122\160\251" +
    "\123\350\106\252\133\u0122\160\u0122\160\302\000" +
    "\305\316\251\123\u0122\160\306\056\252\133\302" +
    "\000\350\106\251\123\u0122\160\u0122\160\302\000" +
    "\252\133\305\000\u0122\160\350\106\306\056\307" +
    "\057\252\133\305\000\302\000\302\000\306\056" +
    "\u0122\160\305\311\u0122\160\u0122\160\306\056\350" +
    "\106\307\057\312\000\u0122\160\u0122\160\305\315" +
    "\305\317\307\057\306\056\306\056\u0122\160\u0122" +
    "\160\307\057\u0122\160\312\000\314\027\u0122\160" +
    "\u0122\160\312\322\u0122\160\312\000\307\057\307" +
    "\057\u0122\160\u0122\160\312\000\u0122\160\314\027" +
    "\314\027\u0122\160\u0122\160\314\027\u0122\160\314" +
    "\027\312\000\312\000\u0122\160\315\026\314\027" +
    "\316\054\u0122\160\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\314\027\314\027\315\026" +
    "\315\026\316\054\u0122\160\315\026\u0122\160\315" +
    "\026\317\052\316\054\u0122\160\u0122\160\315\026" +
    "\u0122\160\316\054\320\055\352\366\u0122\160\u0122" +
    "\160\352\005\317\052\315\026\315\026\316\054" +
    "\316\054\u0122\160\317\052\320\055\352\005\u0122" +
    "\160\u0122\160\317\052\352\005\320\055\u0122\160" +
    "\u0122\160\352\005\u0122\160\320\055\u0122\160\317" +
    "\052\317\052\u0122\160\u0122\160\u0122\160\u0122\160" +
    "\321\234\320\055\320\055\321\220\321\207\321" +
    "\210\321\206\321\173\321\175\321\212\321\202" +
    "\321\177\322\053\u0122\160\u0122\160\323\025\u0122" +
    "\160\u0122\160\u0122\160\321\201\321\174\321\216" +
    "\321\211\u0122\160\322\053\u0122\160\321\200\323" +
    "\025\326\000\u0122\160\322\053\u0122\160\321\233" +
    "\323\025\u0122\160\322\053\u0122\160\u0122\160\323" +
    "\025\u0122\160\326\000\u0122\160\u0122\160\354\124" +
    "\322\053\322\053\326\000\323\025\323\025\354" +
    "\124\354\124\326\000\353\032\353\032\354\124" +
    "\353\024\u0122\160\u0122\160\u0122\160\360\120\326" +
    "\000\326\000\354\124\u0122\160\353\024\360\120" +
    "\360\120\u0122\160\353\024\354\124\360\120\u0122" +
    "\160\353\024\364\125\u0122\160\354\124\365\122" +
    "\u0122\160\360\120\364\125\364\125\u0122\160\365" +
    "\122\365\122\364\125\360\120\u0122\160\365\122" +
    "\u0122\160\u0122\160\u0122\160\360\120\364\125\u0122" +
    "\160\u0122\160\365\122\u0122\160\u0122\160\u0122\160" +
    "\364\125\u0122\160\u0122\160\365\122\u0122\160\u0122" +
    "\160\364\125\366\004\u0122\160\365\122\366\004" +
    "\366\004\366\004\366\004\366\004\366\004\366" +
    "\004\366\004\366\004\u0122\160\u0122\160\u0122\160" +
    "\u0122\160\u0122\160\u0122\160\u0122\160\366\004\366" +
    "\004\366\004\366\004\u0122\160\u0122\160\u0122\160" +
    "\366\004\u0122\160\u0122\160\u0122\160\u0122\160\370" +
    "\151\366\004\370\151\370\151\370\151\370\151" +
    "\370\151\370\151\371\000\u0122\160\371\000\371" +
    "\000\371\000\371\000\371\000\371\000\u0122\160" +
    "\u0122\160\u0122\160\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\370\151\u0122\160\u0122\160\u0122\160" +
    "\u0122\160\u0122\160\372\234\u0122\160\371\000\372" +
    "\220\372\207\372\210\372\206\372\173\372\175" +
    "\372\212\372\202\372\177\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\372\201" +
    "\372\174\372\216\372\211\u0122\160\u0122\160\u0122" +
    "\160\372\200\u0122\160\u0122\160\u0122\160\u0122\160" +
    "\375\152\372\233\375\152\375\152\375\152\375" +
    "\152\375\152\375\152\376\u0101\u0122\160\376\141" +
    "\376\141\376\141\376\141\376\141\376\141\377" +
    "\147\u0122\160\377\147\377\147\377\147\377\147" +
    "\377\147\377\147\375\152\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\376\141" +
    "\u0122\160\u0122\160\u0122\160\u0122\160\u0122\160\u0100" +
    "\234\u0122\160\377\147\u0100\220\u0100\207\u0100\210" +
    "\u0100\206\u0100\173\u0100\175\u0100\212\u0100\202\u0100" +
    "\177\u0122\160\u0122\160\u0122\160\u0122\160\u0122\160" +
    "\u0122\160\u0122\160\u0100\201\u0100\174\u0100\216\u0100" +
    "\211\u0122\160\u0122\160\u0122\160\u0100\200\u0122\160" +
    "\u0122\160\u0122\160\u0122\160\u0101\150\u0100\233\u0101" +
    "\150\u0101\150\u0101\150\u0101\150\u0101\150\u0101\150" +
    "\u0102\u010b\u0102\u010c\u0102\172\u0102\166\u0102\u0104\u0102" +
    "\u010d\u0104\145\u0104\145\u0104\145\u0104\145\u0104\145" +
    "\u0104\145\u0122\160\u0122\160\u0122\160\u0122\160\u0101" +
    "\150\u0122\160\u0122\160\u0122\160\u0122\160\u0122\160" +
    "\u0102\167\u0122\160\u0122\160\u0122\160\u0122\160\u0122" +
    "\160\u0104\145\u0105\140\u0105\140\u0105\140\u0105\140" +
    "\u0105\140\u0105\140\u0106\144\u0106\144\u0106\144\u0106" +
    "\144\u0106\144\u0106\144\u0107\142\u0107\142\u0107\142" +
    "\u0107\142\u0107\142\u0107\142\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0105\140\u0122\160\u0122\160\u0122\160" +
    "\u0122\160\u0122\160\u0106\144\u0122\160\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\u0107\142\u0108\143\u0108\143" +
    "\u0108\143\u0108\143\u0108\143\u0108\143\u0109\000\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\u0109\172" +
    "\u0109\166\u0122\160\u0122\160\u0122\160\u0109\000\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0108\143\u0122\160" +
    "\u0122\160\u0109\256\u010e\002\u010e\002\u010e\002\u010e" +
    "\002\u010e\002\u010e\002\u0109\167\u0122\160\u010e\u0111" +
    "\u0122\160\u0122\160\u0122\160\u0109\000\u010f\134\u010f" +
    "\134\u010f\134\u010f\134\u010f\134\u010f\134\u0122\160" +
    "\u0122\160\u0122\160\u010e\002\u0110\001\u0110\001\u0110" +
    "\001\u0110\001\u0110\001\u0110\001\u0112\002\u0112\002" +
    "\u0112\002\u0112\002\u0112\002\u0112\002\u010f\134\u0122" +
    "\160\u0112\u0111\u0113\136\u0113\136\u0113\136\u0113\136" +
    "\u0113\136\u0113\136\u0122\160\u0110\001\u0122\160\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0112\002\u0122\160" +
    "\u0115\002\u0115\002\u0115\002\u0115\002\u0115\002\u0115" +
    "\002\u0122\160\u0113\136\u0115\u0111\u0116\137\u0116\137" +
    "\u0116\137\u0116\137\u0116\137\u0116\137\u011b\002\u011b" +
    "\002\u011b\002\u011b\002\u011b\002\u011b\002\u0122\160" +
    "\u0115\002\u011b\u0111\u011c\135\u011c\135\u011c\135\u011c" +
    "\135\u011c\135\u011c\135\u0122\160\u0116\137\u0122\160" +
    "\u0122\160\u0122\160\u0122\160\u0121\146\u011b\002\u0121" +
    "\146\u0121\146\u0121\146\u0121\146\u0121\146\u0121\146" +
    "\u011f\234\u0122\160\u011c\135\u011f\220\u011f\207\u011f" +
    "\210\u011f\206\u011f\173\u011f\175\u011f\212\u011f\202" +
    "\u011f\177\u0122\160\u0122\160\u011f\u0121\u0122\160\u0121" +
    "\146\u0122\160\u0122\160\u011f\201\u011f\174\u011f\216" +
    "\u011f\211\u0122\160\u0122\160\u0122\160\u011f\200\u0122" +
    "\160\u0122\160\u0122\160\u0122\160\u0122\160\u011f\233" +
    "\u0122\160\000\u015f\000\262\262\262\262\262\262" +
    "\262\262\263\265\262\262\262\262\262\262\262" +
    "\262\262\262\262\262\262\262\262\262\262\262" +
    "\262\262\262\262\264\262\262\262\302\262\262" +
    "\262\277\263\262\262\262\262\262\262\262\262" +
    "\304\262\262\311\314\262\262\262\262\262\262" +
    "\262\266\267\262\347\262\262\265\272\262\262" +
    "\262\262\277\262\300\346\262\262\262\262\345" +
    "\262\262\347\262\262\265\262\346\262\262\262" +
    "\262\262\262\337\262\262\262\262\352\262\262" +
    "\320\324\326\366\262\262\262\353\262\262\375" +
    "\262\262\u0103\262\262\262\262\262\262\332\262" +
    "\307\262\262\262\u010a\262\262\262\262\262\u010a" +
    "\353\262\262\262\262\262\u0100\262\u0127\262\262" +
    "\262\262\262\262\u0124\262\262\262\262\262\262" +
    "\262\262\266\262\262\267\262\u0123\u0126\u0120\262" +
    "\271\262\262\262\366\262\262\002\211\000\000" +
    "\222\000\237\007\007\010\243\246\221\254\101" +
    "\004\072\176\000\034\171\042\032\210\073\076" +
    "\074\102\077\174\100\015\034\105\144\032\036" +
    "\054\145\036\024\201\175\024\047\033\001\214" +
    "\044\036\056\060\057\024\036\061\064\057\024" +
    "\036\061\110\036\024\115\070\024\121\067\117" +
    "\116\113\123\124\126\137\131\142\150\126\166" +
    "\143\112\112\132\140\163\154\144\203\216\162" +
    "\157\036\155\125\127\213\133\144\125\164\156" +
    "\157\054\176\144\167\171\156\157\217\144\000" +
    "\036\156\157\204\256\255\224\007\225\250\007" +
    "\226\231\251\116\072\230\227\004\000\113\000" +
    "\102\073\247\074\112\077\000\000\000\000\112" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000\000\000\000\000\000\000\000" +
    "\000\000\000\000";

  /** Instance of action encapsulation class. */
  protected CUP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$actions {


  /** helper routine to clone a new production part adding a given label */
  private production_part add_lab(production_part part, String lab)
    {
      /* if there is no label, or this is an action, just return the original */
      if (lab == null || part.is_action()) return part;

      /* otherwise build a new one with the given label attached */
      return new symbol_part(((symbol_part)part).the_symbol(),lab);
    }

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol_part> symbols = new HashMap<String, symbol_part>();

  /** table of just non terminals -- contains non_terminals indexed by name */
  private HashMap<String, non_terminal> non_terms = new HashMap<String, non_terminal>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;
  
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p) {
    _cur_side = p;
    _cur_prec++;
  }
  /** add relevant data to terminals */ 
  protected void add_precedence(String term) {
    if (term == null) {
      System.err.println("Unable to add precedence to nonexistent terminal");
    } else {
      symbol_part sp = symbols.get(term);
      if (sp == null) {
	System.err.println("Could find terminal " + term + " while declaring precedence");
      } else {
	java_cup.symbol sym = sp.the_symbol();
	if (sym instanceof terminal) 
	  ((terminal)sym).set_precedence(_cur_side, _cur_prec);
	else System.err.println("Precedence declaration: Can't find terminal " + term);
      }
    }
  }
  
  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      production_part[] rhs;
      if (start_nt.stack_type() != null)
	{
	  rhs = new production_part[] 
	    {
	      add_lab(new symbol_part(start_nt),"start_val"),
	      new symbol_part(terminal.EOF),
	      new action_part("RESULT = start_val;")
	    };
	}
      else
	{
	  rhs = new production_part[] 
	    {
	      new symbol_part(start_nt),
	      new symbol_part(terminal.EOF)
	    };
	}
      parser.emit.start_production = 
	  new production(non_terminal.START_nt, rhs, rhs.length);
    }

  private final parser parser;

  /** Constructor */
  CUP$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.lr_parser CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack,
    int                        CUP$top)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$left, CUP$right, RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {

          /* declare "error" as a terminal */
          symbols.put("error", new symbol_part(terminal.error));

          /* declare start non terminal */
          non_terms.put("$START", non_terminal.START_nt);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0",46, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= NT$0 package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-8);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("spec",0, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;

	  /* save the package name */
	  parser.emit.package_name = id.toString();
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1",47, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_spec ::= PACKAGE multipart_id NT$1 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_spec ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec",1, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_list ::= import_list import_spec 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_list ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list",2, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_spec ::= IMPORT import_id SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-2);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec",12, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part",5, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts",4, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part",3, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part",8, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code",13, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symuser_code = CUP$stack.elementAt(CUP$size-2);
              int user_codeleft = CUP$symuser_code.left;
              int user_coderight = CUP$symuser_code.right;
              String user_code = (String) CUP$symuser_code.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code",14, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // symbol_list ::= symbol_list symbol 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // symbol_list ::= symbol 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list",9, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$2 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2",48, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // symbol ::= TERMINAL type_id NT$2 declares_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // symbol ::= TERMINAL declares_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Symbol CUP$symid = CUP$stack.peek();
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
 _cur_symbol_type = id.toString(); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$3",49, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // symbol ::= non_terminal type_id NT$3 declares_non_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symid = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$symid.left;
              int idright = CUP$symid.right;
              StringBuilder id = (StringBuilder) CUP$symid.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol ::= non_terminal declares_non_term 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol ::= TERMINAL error SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= non_terminal error SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol",15, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declares_term ::= term_name_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_term",28, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declares_non_term ::= non_term_name_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("declares_non_term",29, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term_name_list ::= new_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("term_name_list",16, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_term_name_list ::= new_non_term_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_term_name_list",17, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // precedence_list ::= precedence_l 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // precedence_list ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list",24, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // precedence_l ::= precedence_l preced 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // precedence_l ::= preced 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_l",27, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$4 ::= 
            {

	  update_precedence(assoc.left);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$4",50, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // preced ::= PRECEDENCE LEFT NT$4 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$5 ::= 
            {

	  update_precedence(assoc.right);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$5",51, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE RIGHT NT$5 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$6 ::= 
            {

	  update_precedence(assoc.nonassoc);
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$6",52, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // preced ::= PRECEDENCE NONASSOC NT$6 terminal_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("preced",25, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // terminal_list ::= terminal_id 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_list",26, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // terminal_id ::= term_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;
	
	  add_precedence(sym);
	  RESULT = sym;
	
              CUP$result = parser.getSymbolFactory().newSymbol("terminal_id",34, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term_id ::= symbol_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int symleft = CUP$right.left;
              int symright = CUP$right.right;
              String sym = (String) CUP$right.value;

	  /* check that the symbol_id is a terminal */
	  if (symbols.get(sym) == null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Terminal \"" + sym + 
			   "\" has not been declared");
	    }
          RESULT = sym;
         
              CUP$result = parser.getSymbolFactory().newSymbol("term_id",35, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Symbol CUP$symstart_name = CUP$stack.peek();
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
 
	  /* verify that the name has been declared as a non terminal */
	  non_terminal nt = non_terms.get(start_name);
	  if (nt == null)
	    {
	    ErrorManager.getManager().emit_error( "Start non terminal \"" + start_name + 
	  		         "\" has not been declared");
	    }
          else
	    {
	      set_start_symbol(nt);
	    }
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$7",53, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH nt_id NT$7 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symstart_name = CUP$stack.elementAt(CUP$size-3);
              int start_nameleft = CUP$symstart_name.left;
              int start_nameright = CUP$symstart_name.right;
              String start_name = (String) CUP$symstart_name.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= empty 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec",10, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list",11, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$8 ::= 
            {
              Symbol CUP$symlhs_id = CUP$stack.peek();
              int lhs_idleft = CUP$symlhs_id.left;
              int lhs_idright = CUP$symlhs_id.right;
              String lhs_id = (String) CUP$symlhs_id.value;

	  /* lookup the lhs nt */
	  lhs_nt = non_terms.get(lhs_id);

          /* if it wasn't declared, emit a message */
	  if (lhs_nt == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	      ErrorManager.getManager().emit_warning("LHS non terminal \"" + lhs_id + 
			       "\" has not been declared");
	    }
	
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$8",54, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // production ::= nt_id NT$8 COLON_COLON_EQUALS rhs_list SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-5);
              int lhs_idleft = CUP$left.left;
              int lhs_idright = CUP$left.right;
              String lhs_id = (String) CUP$left.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$9 ::= 
            {
 ErrorManager.getManager().emit_error("Syntax Error"); 
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("NT$9",55, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // production ::= error NT$9 SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("production",18, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs_list BAR rhs 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rhs_list ::= rhs 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list",21, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int term_nameleft = CUP$right.left;
              int term_nameright = CUP$right.right;
              String term_name = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 
	      RESULT = null;
	      /* Find the precedence symbol */
	      if (term_name == null)
	        {
		  System.err.println("No terminal for contextual precedence");
	        }
	      else
		{
		  symbol sym = symbols.get(term_name).the_symbol();
		  if ((sym!=null) && (sym instanceof terminal))
		    {
		      RESULT = sym;
		      sym.note_use();
		    }
		  else
		    System.err.println("Invalid terminal " + term_name + 
				   " for contextual precedence assignment");
		}
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prod_precedence ::= empty 
            {
              symbol RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence",45, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rhs ::= prod_part_list prod_precedence 
            {
              Symbol CUP$right = CUP$stack.peek();
              int precsymleft = CUP$right.left;
              int precsymright = CUP$right.right;
              symbol precsym = (symbol) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int rhsleft = CUP$left.left;
              int rhsright = CUP$left.right;
              ArrayList<production_part> rhs = (ArrayList<production_part>) CUP$left.value;

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      production p;
	      production_part[] rhs_parts = rhs.toArray(new production_part[rhs.size()]);
	      if (precsym!=null) {
		p = new production(lhs_nt, rhs_parts, rhs.size(),
				   ((terminal)precsym).precedence_num(),
				   ((terminal)precsym).precedence_side());
	      } else {
		p = new production(lhs_nt, rhs_parts, rhs.size());
	      }

	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs",22, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int prodleft = CUP$right.left;
              int prodright = CUP$right.right;
              production_part prod = (production_part) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              ArrayList<production_part> list = (ArrayList<production_part>) CUP$left.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part_list ::= empty 
            {
              ArrayList<production_part> RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = new ArrayList<production_part>(); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list",44, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              int symidleft = CUP$left.left;
              int symidright = CUP$left.right;
              String symid = (String) CUP$left.value;
 
	  /* try to look up the id */
	  production_part symb = (production_part)symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = add_lab(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // prod_part ::= CODE_STRING 
            {
              production_part RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int code_strleft = CUP$right.left;
              int code_strright = CUP$right.right;
              String code_str = (String) CUP$right.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part",43, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= COLON label_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int labidleft = CUP$right.left;
              int labidright = CUP$right.right;
              String labid = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_label ::= empty 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label",33, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int another_idleft = CUP$right.left;
              int another_idright = CUP$right.right;
              String another_id = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multipart_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$symtypes = CUP$stack.elementAt(CUP$size-2);
              int typesleft = CUP$symtypes.left;
              int typesright = CUP$symtypes.right;
              String types = (String) CUP$symtypes.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-4);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int an_idleft = CUP$right.left;
              int an_idright = CUP$right.right;
              String an_id = (String) CUP$right.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id",40, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typearglist ::= typeargument 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int argleft = CUP$right.left;
              int argright = CUP$right.right;
              String arg = (String) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int listleft = CUP$left.left;
              int listright = CUP$left.right;
              String list = (String) CUP$left.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist",37, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeargument ::= type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeargument ::= wildcard 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int wleft = CUP$right.left;
              int wright = CUP$right.right;
              String w = (String) CUP$right.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument",38, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= QUESTION 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "?"; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // wildcard ::= QUESTION EXTENDS type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // wildcard ::= QUESTION SUPER type_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
 RESULT = "? super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard",39, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id",41, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int idleft = CUP$right.left;
              int idright = CUP$right.right;
              StringBuilder id = (StringBuilder) CUP$right.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-3);
              int idleft = CUP$left.left;
              int idright = CUP$left.right;
              StringBuilder id = (StringBuilder) CUP$left.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id",42, CUP$left, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_term_id ::= ID 
            {
              Symbol CUP$right = CUP$stack.peek();
              int term_idleft = CUP$right.left;
              int term_idright = CUP$right.right;
              String term_id = (String) CUP$right.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */ 
	      symbols.put(term_id, 
	        new symbol_part(new terminal(term_id, _cur_symbol_type)));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id",19, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // new_non_term_id ::= ID 
            {
              Symbol CUP$right = CUP$stack.peek();
              int non_term_idleft = CUP$right.left;
              int non_term_idright = CUP$right.right;
              String non_term_id = (String) CUP$right.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "java_cup.runtime.Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type);

	      /* put it in the non_terms table */
	      non_terms.put(non_term_id, this_nt);

	      /* build a production_part and put it in the symbols table */ 
	      symbols.put(non_term_id, new symbol_part(this_nt));
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id",20, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nt_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nt_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("nt_id",30, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // symbol_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id",31, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // label_id ::= robust_id 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id",32, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= ID 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
              int the_idleft = CUP$right.left;
              int the_idright = CUP$right.right;
              String the_id = (String) CUP$right.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "code"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "action"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "parser"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "terminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "non"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonterminal"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "init"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "scan"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "with"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "start"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "precedence"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "left"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "right"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();
 RESULT = "nonassoc"; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT =null;
              Symbol CUP$right = CUP$stack.peek();

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id",36, CUP$right, CUP$right, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              Symbol CUP$right = CUP$stack.peek();
              Symbol CUP$left = CUP$stack.elementAt(CUP$size-2);
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$left, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal",7, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi",6, CUP$right, CUP$right);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // empty ::= 
            {
              Symbol CUP$right = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("empty",23, CUP$right, CUP$right);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

