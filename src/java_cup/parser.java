
//----------------------------------------------------
// The following code was generated by CUP v0.12joho 20081109
// Sat Nov 15 16:22:36 CET 2008
//----------------------------------------------------

package java_cup;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Iterator;

/** CUP v0.12joho 20081109 generated parser.
  * @version Sat Nov 15 16:22:36 CET 2008
  */
public class parser extends java_cup.runtime.LRParser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}
  /** Return action table */
  protected String[] action_table() { 
    return new String[] {
    "\336\000\002\040\007\040\005\001\003\001\000" +
    "\002\002\002\000\020\003\011\001\011\001\011" +
    "\001\011\001\011\001\011\001\010\000\010\002" +
    "\003\003\003\006\004\003\005\003\005\001\006" +
    "\001\006\003\007\004\014\004\021\004\022\004" +
    "\015\002\015\001\023\005\057\000\023\003\023" +
    "\005\060\000\023\003\023\003\023\003\024\003" +
    "\024\001\025\003\025\001\033\002\033\000\034" +
    "\004\035\001\035\001\035\001\036\003\036\001" +
    "\037\001\053\001\016\004\016\000\017\002\017" +
    "\001\026\005\061\000\026\002\031\003\031\001" +
    "\056\002\056\000\032\002\055\002\055\000\054" +
    "\002\054\001\043\002\043\000\050\003\050\001" +
    "\045\001\045\003\046\001\046\001\047\001\047" +
    "\003\047\003\051\003\051\001\052\001\052\003" +
    "\052\004\027\001\030\001\041\001\041\001\041" +
    "\001\041\001\042\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\044\001\044\001\044" +
    "\001\044\001\044\001\044\001\044\001\044\001" +
    "\044\001\044\001\044\001\013\002\013\001\012" +
    "\000\012\001\261\261\271\361\261\261\275\301" +
    "\u0131\261\u0173\261\261\261\261\261\261\261\261" +
    "\261\261\261\261\263\261\261\261\261\261\261" +
    "\261\261\263\261\261\275\275\261\261\261\277" +
    "\303\261\307\267\323\321\365\261\261\273\261" +
    "\u01b5\u01f5\261\u0207\u0125\351\365\261\261\261\u010d" +
    "\355\u014f\u0245\261\261\u0167\u0191\261\u0103\u010f\261" +
    "\261\261\u011f\261\u0115\u0285\261\u02c5\u012b\u0139\261" +
    "\261\u013d\261\261\261\u01ef\261\u0203\261\261\261" +
    "\u0221\261\261\u017d\u01bf\u01a7\261\261\u012f\261\u020b" +
    "\u0305\261\u01c1\u0125\u024f\261\u0137\u0285\u0149\u015b\u0167" +
    "\261\u0197\261\261\261\261\u025b\u01b9\261\261\u0345" +
    "\u0385\u03c5\261\261\u0263\u01d3\261\u0405\u0445\261\u0485" +
    "\u01d9\u01f5\u020f\261\261\u02a1\261\261\u01ff\u0205\u0325" +
    "\261\261\261\261\u028f\261\261\261\u029b\261\u02b9" +
    "\261\u0225\261\261\u0257\u02f9\261\261\261\261\261" +
    "\u04c5\261\261\261\261\u050f\000\000\000\000\016" +
    "\000\126\000\072\000\332\326\312\316\310\270" +
    "\276\274\266\302\306\322\000\216\300\314\320" +
    "\272\324\304\002\036\330\070\152\326\252\262" +
    "\260\270\000\122\266\104\242\326\000\250\116" +
    "\076\010\000\000\014\000\000\000\000\124\112" +
    "\106\000\000\000\000\110\100\000\000\214\240" +
    "\000\030\040\034\126\032\000\000\022\000\000" +
    "\000\026\024\000\162\254\156\000\256\000\134" +
    "\132\136\000\120\244\000\000\226\220\230\224" +
    "\114\000\000\020\152\000\000\052\054\000\272" +
    "\000\000\164\000\154\144\146\142\000\000\102" +
    "\246\000\000\000\074\236\000\334\046\000\000" +
    "\042\000\334\334\334\202\130\000\150\222\232" +
    "\234\000\336\066\050\056\000\062\060\064\000" +
    "\170\174\140\000\202\160\212\000\200\176\206" +
    "\044\166\000\204\172\210\264\000\003\003\075" +
    "\000\005\000\012\037\151\000\012\000\012\000" +
    "\012\000\012\000\012\000\012\001\023\001\013" +
    "\005\101\026\145\006\023\006\013\026\147\042" +
    "\163\043\167\047\256\047\256\050\171\050\173" +
    "\052\254\052\254\042\161\000\012\053\175\055" +
    "\203\061\175\001\025\002\027\054\147\000\012" +
    "\006\025\002\067\002\043\002\041\002\061\002" +
    "\047\002\051\002\035\002\031\002\063\071\277" +
    "\054\201\056\205\056\207\070\273\070\271\070" +
    "\275\002\033\002\065\002\053\002\071\076\303" +
    "\106\325\067\253\002\073\107\327\115\333\113" +
    "\023\113\013\007\107\121\347\002\037\002\045" +
    "\007\067\007\043\007\041\007\061\007\047\007" +
    "\051\007\035\007\031\007\063\075\115\075\113" +
    "\122\351\075\265\075\257\113\025\125\353\007" +
    "\033\007\065\007\053\007\071\147\175\067\115" +
    "\067\113\007\073\067\265\067\257\155\u010b\007" +
    "\115\007\113\011\133\007\117\007\125\160\u0111" +
    "\011\067\011\043\011\041\011\061\011\047\011" +
    "\051\011\035\011\031\011\063\077\115\077\113" +
    "\162\u0117\077\265\077\257\142\373\142\173\011" +
    "\033\011\065\011\053\011\071\163\u0119\103\115" +
    "\103\113\011\073\103\265\103\257\164\u011b\011" +
    "\115\011\113\063\027\011\117\011\125\166\u011d" +
    "\063\067\063\043\063\041\063\061\063\047\063" +
    "\051\063\035\063\031\063\063\104\115\104\113" +
    "\174\u0123\104\265\104\257\154\163\143\377\063" +
    "\033\063\065\063\053\063\071\144\u0103\144\u0101" +
    "\154\161\063\073\205\u012d\131\253\131\006\213" +
    "\u012d\064\027\143\375\063\037\063\045\064\067" +
    "\064\043\064\041\064\061\064\047\064\051\064" +
    "\035\064\031\064\063\214\u012d\066\243\066\241" +
    "\066\023\066\013\066\245\066\233\064\033\064" +
    "\065\064\053\064\071\151\u0105\151\207\215\u012d" +
    "\064\073\131\115\131\113\223\175\131\265\131" +
    "\257\224\175\064\037\064\045\066\025\242\u0155" +
    "\133\115\133\113\100\027\133\265\133\257\066" +
    "\235\100\067\100\043\100\041\100\061\100\047" +
    "\100\051\100\035\100\031\100\063\137\115\137" +
    "\113\204\253\137\265\137\257\156\u010d\156\u010f" +
    "\100\033\100\065\100\053\100\071\173\u011f\173" +
    "\u0121\245\u0159\100\073\261\000\261\000\100\315" +
    "\261\000\116\027\261\000\100\037\100\045\116" +
    "\067\116\043\116\041\116\061\116\047\116\051" +
    "\116\035\116\031\116\063\161\u0113\204\115\204" +
    "\113\161\147\204\265\204\257\232\377\116\033" +
    "\116\065\116\053\116\071\236\u0149\261\000\261" +
    "\000\116\073\261\000\161\u0115\236\u0147\261\000" +
    "\120\027\232\u0145\116\037\116\045\120\345\120" +
    "\043\120\041\120\061\120\047\120\051\120\035" +
    "\120\031\120\063\220\115\220\113\261\000\220" +
    "\265\220\257\240\u014d\261\000\120\033\120\065" +
    "\120\053\120\071\261\000\240\115\240\113\120" +
    "\073\240\265\240\257\240\u0153\261\000\152\027" +
    "\261\000\120\037\120\045\152\067\152\043\152" +
    "\041\152\061\152\047\152\051\152\035\152\031" +
    "\152\063\261\000\261\000\152\u0107\225\253\225" +
    "\004\261\000\261\000\152\033\152\065\152\053" +
    "\152\071\261\000\246\115\246\113\152\073\246" +
    "\265\246\257\261\000\261\000\177\027\261\000" +
    "\152\037\152\045\177\067\177\043\177\041\177" +
    "\061\177\047\177\051\177\035\177\031\177\063" +
    "\261\000\261\000\225\115\225\113\261\000\225" +
    "\265\225\257\177\033\177\065\177\053\177\071" +
    "\261\000\261\000\261\000\177\073\261\000\261" +
    "\000\177\315\261\000\200\027\261\000\177\037" +
    "\177\045\200\067\200\043\200\041\200\061\200" +
    "\047\200\051\200\035\200\031\200\063\261\000" +
    "\261\000\261\000\261\000\261\000\261\000\261" +
    "\000\200\033\200\065\200\053\200\071\261\000" +
    "\261\000\261\000\200\073\261\000\261\000\261" +
    "\000\261\000\201\027\261\000\200\037\200\045" +
    "\201\067\201\043\201\041\201\061\201\047\201" +
    "\051\201\035\201\031\201\063\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\261\000\201" +
    "\033\201\065\201\053\201\071\261\000\261\000" +
    "\261\000\201\073\261\000\261\000\261\000\261" +
    "\000\207\027\261\000\201\037\201\045\207\067" +
    "\207\043\207\041\207\061\207\047\207\051\207" +
    "\035\207\031\207\063\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\207\033\207" +
    "\065\207\053\207\071\261\000\261\000\261\000" +
    "\207\073\261\000\261\000\261\000\261\000\210" +
    "\027\261\000\207\037\207\045\210\067\210\043" +
    "\210\041\210\061\210\047\210\051\210\035\210" +
    "\031\210\063\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\261\000\210\033\210\065\210" +
    "\053\210\071\261\000\261\000\261\000\210\073" +
    "\261\000\261\000\261\000\261\000\212\027\261" +
    "\000\210\037\210\045\212\067\212\043\212\041" +
    "\212\061\212\047\212\051\212\035\212\031\212" +
    "\063\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\261\000\212\033\212\065\212\053\212" +
    "\071\261\000\261\000\261\000\212\073\261\000" +
    "\261\000\212\315\261\000\254\027\261\000\212" +
    "\037\212\045\254\067\254\043\254\041\254\061" +
    "\254\047\254\051\254\035\254\031\254\063\261" +
    "\000\261\000\261\000\261\000\261\000\261\000" +
    "\261\000\254\033\254\065\254\053\254\071\261" +
    "\000\261\000\261\000\254\073\261\000\261\000" +
    "\261\000\261\000\261\000\261\000\254\037\254" +
    "\045\261\000\u0145\260\260\260\260\260\260\261" +
    "\261\260\266\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\263\260\260\260\260\260" +
    "\260\260\260\261\260\260\260\260\260\260\260" +
    "\262\276\260\341\332\261\260\260\260\260\260" +
    "\260\340\330\260\260\274\342\260\260\260\260" +
    "\260\260\371\260\260\u0100\260\307\260\260\260" +
    "\260\260\262\260\260\361\260\352\260\260\260" +
    "\273\260\260\260\260\260\260\260\260\260\260" +
    "\315\260\374\260\260\260\260\260\260\260\260" +
    "\260\260\260\260\260\260\260\260\260\260\351" +
    "\362\363\260\260\u010a\260\260\u0108\323\260\u0109" +
    "\264\265\270\u0105\260\u0109\260\260\260\260\u011f" +
    "\260\260\260\260\260\260\260\260\260\260\u0115" +
    "\260\260\u010b\260\327\u0119\260\260\260\260\260" +
    "\377\260\260\260\260\004\037\000\000\000\000" +
    "\000\066\000\227\007\007\006\233\234\065\067" +
    "\235\010\041\000\050\000\140\051\056\000\042" +
    "\060\133\072\003\044\044\150\027\027\105\057" +
    "\026\054\027\053\174\057\054\104\061\077\027" +
    "\166\124\117\106\107\123\131\111\027\007\110" +
    "\113\161\130\105\114\112\010\142\151\231\051" +
    "\060\255\126\027\143\145\144\054\044\147\057" +
    "\007\156\157\167\173\172\204\171\041\027\230" +
    "\222\144\054\126\147\154\170\027\027\072\225" +
    "\054\054\223\224\236\237\130\257\000\260\160" +
    "\253\000\000\241\000\171\126\160\027\232\145" +
    "\144\054\240\147\170\167\245\000\240\000\171" +
    "\000\000\000\000\000\126\247\000\250\256"
    };
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java.util.Stack<java_cup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, this, stack);
  }


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    ComplexSymbolFactory f = new ComplexSymbolFactory();
    symbolFactory = f;
    lexer = new Lexer(f); 

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.next_token(); 

    }


  Main main;
  emit emit;
  
 /* override error routines */
  protected Lexer lexer;
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      System.exit(1);
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof Symbol)
         ErrorManager.getManager().emit_error(message,(Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, symbol> symbols = new HashMap<String, symbol>();

  private ArrayList<terminal> terminals = new ArrayList<terminal>();
  private ArrayList<non_terminal> non_terminals = new ArrayList<non_terminal>();
  private ArrayList<production> productions = new ArrayList<production>();

  /** declared start non_terminal */
  private non_terminal start_nt = null;

  /** left hand side non terminal of the current production */
  private non_terminal lhs_nt;

  {
    /* declare "error" and "EOF" as a terminal */
    terminals.add(terminal.error);
    terminals.add(terminal.EOF);
    symbols.put("error", terminal.error);

    /* declare start non terminal */
    non_terminals.add(non_terminal.START_nt);
  }  

  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = assoc.no_prec;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private terminal get_term(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (terminal)sym;
    }
  
  private non_terminal get_nonterm(String id)
    {
      symbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof non_terminal))
	{
	  if (ErrorManager.getManager().getErrorCount() == 0)
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared");
	  return null;
	}
      return (non_terminal)sym;
    }

  /** set start non terminal symbol */
  private void set_start_symbol(non_terminal nt)
    {
      start_nt = nt;
      /* build a special start production */
      symbol_part[] rhs = new symbol_part[2];
      action_part action = null;
      if (start_nt.stack_type() != null)
	{
	  rhs[0] = new symbol_part(start_nt, "start_val");
	  action = new action_part("RESULT = start_val;");
	}
      else
	rhs[0] = new symbol_part(start_nt);
      rhs[1] = new symbol_part(terminal.EOF);
      parser.main.start_production = 
	  new production(0, non_terminal.START_nt, rhs, action, null);
      productions.add(parser.main.start_production);
      non_terminal.START_nt.note_use();
    }
  
  /* . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . */

  private int next_nt = 0; 
  non_terminal create_anon_nonterm(String type) 
    {
        non_terminal nt = new non_terminal
        	("NT$" + next_nt++, type, non_terminals.size());
        non_terminals.add(nt);
        return nt;
    }

  /**
   * Create a production. Takes a LHS non terminal, a list of
   * RHS parts (including terminals, non terminals, and actions) and a
   * precedence.  We factor out embedded actions into separate action_production
   * using temporary non-terminals.  Adjacent actions are merge immediately.
   * 
   * <p>Factoring out of actions is accomplished by creating new "hidden" non
   * terminals. For example if the production was originally:</p>
   * 
   * <pre>
   *    A ::= B {action} C D
   * </pre>
   * 
   * then it is factored into two productions:
   * 
   * <pre>
   *    A ::= B X C D
   *    X ::= {action}
   * </pre>
   * 
   * (where X is a unique new non terminal). This has the effect of placing all
   * actions at the end where they can be handled as part of a reduce by the
   * parser.
   */
  private void build_production(non_terminal lhs_sym, ArrayList<production_part> rhs_parts, terminal precedence)
    {
      int i;

      /* make sure we have a valid left-hand-side */
      assert lhs_sym != null : "Attempt to construct a production with a null LHS";

      /* count use of lhs */
      lhs_sym.note_use();
      if (precedence != null)
	precedence.note_use();

      /* merge adjacent actions (if any) */
      Iterator<production_part> it = rhs_parts.iterator();
      action_part prev_action = null;
      while (it.hasNext())
	{
	  production_part part = it.next();
	  if (part instanceof action_part)
	    {
	      if (prev_action != null)
		{
		  prev_action.add_code_string(((action_part)part).code_string());
		  it.remove();
		}
	      else
		prev_action = (action_part) part;
	    }
	  else
	    prev_action = null;
	}
      
      action_part action = null;
      /* strip off any trailing action */
      if (rhs_parts.size() > 0 && rhs_parts.get(rhs_parts.size() - 1).is_action())
	{
	  action = (action_part) rhs_parts.remove(rhs_parts.size()-1);
	}

      /* allocate and copy over the right-hand-side */
      symbol_part[] rhs = new symbol_part[rhs_parts.size()];
      /* count use of each rhs symbol */
      for (i = 0; i < rhs.length; i++)
	{
	  production_part prod = rhs_parts.get(i);
	  if (prod.is_action())
	    {
	      /* create a new non terminal for the action production */
	      non_terminal new_nt = create_anon_nonterm(lhs_sym.stack_type()); 
	      new_nt.is_embedded_action = true;
	      new_nt.note_use();
	      rhs[i] = new symbol_part(new_nt);
	    }
	  else
	    {
	      rhs[i] = (symbol_part) prod;
	    }
	}
      
      /* put the production in the production list of the lhs non terminal */
      production prod = new production(productions.size(), lhs_sym, rhs, action, precedence);
      productions.add(prod);
      int last_act_loc = -1;
      for (i = 0; i < rhs.length; i++)
	{
	  production_part part = rhs_parts.get(i);
	  if (part.is_action())
	    {
	      production actprod = new action_production
	      	(productions.size(), prod, (non_terminal) rhs[i].the_symbol(), 
	      	    (action_part) part, i, last_act_loc);
	      productions.add(actprod);
	      last_act_loc = i;
	    }
	}
    }

  private final parser parser;

  /** Constructor */
  Action$(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final java_cup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java_cup.runtime.LRParser  CUP$parser,
    java.util.Stack<java_cup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$result;

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
              java_cup.runtime.Symbol start_val$ = CUP$stack.elementAt(CUP$size - 2);
              Grammar start_val = (Grammar) start_val$.value;
RESULT = start_val;
              CUP$result = parser.getSymbolFactory().newSymbol("$START", 0, start_val$, CUP$stack.peek(), RESULT);
            }
          /* ACCEPT */
          CUP$parser.done_parsing();
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = new Grammar(terminals, non_terminals, productions); 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 7), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= error symbol_list precedence_list start_spec production_list 
            {
              Grammar RESULT = null;
 RESULT = new Grammar(terminals, non_terminals, productions); 
              CUP$result = parser.getSymbolFactory().newSymbol("spec", 32, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_spec ::= PACKAGE multipart_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.main.setOption("package", id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("package_spec", 1, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // import_list ::= import_list import_spec 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // import_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("import_list", 2, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // import_spec ::= IMPORT import_id SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;
 
	  /* save this import on the imports list */
	  parser.emit.import_list.add(id.toString());
	
              CUP$result = parser.getSymbolFactory().newSymbol("import_spec", 16, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // code_part ::= option_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // code_part ::= parser_spec 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // code_part ::= action_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // code_part ::= parser_code_part 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_part ::= init_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_part ::= scan_code 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_part", 9, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // code_parts ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // code_parts ::= code_parts code_part 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("code_parts", 8, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parser_spec ::= PARSER multipart_id SEMI 
            {
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
            {
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 3);
              String types = (String) types$.value;
              java_cup.runtime.Symbol name$ = CUP$stack.elementAt(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.main.setOption("parser", name.toString());
	    parser.main.setOption("typearg", types.toString()); 
              CUP$result = parser.getSymbolFactory().newSymbol("parser_spec", 3, CUP$stack.elementAt(CUP$size - 6), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // option_spec ::= OPTION option_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_spec", 4, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // option_list ::= option_list COMMA option_ 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // option_list ::= option_ 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("option_list", 5, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // option_ ::= robust_id 
            {
              java_cup.runtime.Symbol opt$ = CUP$stack.peek();
              String opt = (String) opt$.value;
 parser.main.setOption(opt); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, opt$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // option_ ::= robust_id EQUALS robust_id 
            {
              java_cup.runtime.Symbol val$ = CUP$stack.peek();
              String val = (String) val$.value;
              java_cup.runtime.Symbol opt$ = CUP$stack.elementAt(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.main.setOption(opt, val); 
              CUP$result = parser.getSymbolFactory().newSymbol("option_", 6, opt$, val$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_code_part ::= ACTION CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.emit.action_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("action_code_part", 7, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parser_code_part ::= PARSER CODE CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.emit.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.emit.parser_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("parser_code_part", 12, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // init_code ::= INIT WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.emit.init_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("init_code", 17, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scan_code ::= SCAN WITH CODE_STRING opt_semi 
            {
              java_cup.runtime.Symbol user_code$ = CUP$stack.elementAt(CUP$size - 2);
              String user_code = (String) user_code$.value;
 
	  if (parser.emit.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.emit.scan_code = user_code;
	
              CUP$result = parser.getSymbolFactory().newSymbol("scan_code", 18, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // symbol_list ::= symbol_list symbol 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // symbol_list ::= symbol 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_list", 13, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // symbol ::= TERMINAL type_id NT$0 decl_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$0 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$0", 47, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // symbol ::= TERMINAL decl_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // symbol ::= non_terminal type_id NT$1 decl_non_term_list SEMI 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 5), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$1 ::= 
            {
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("NT$1", 48, CUP$stack.elementAt(CUP$size - 2), id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // symbol ::= non_terminal decl_non_term_list SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // symbol ::= TERMINAL error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // symbol ::= non_terminal error SEMI 
            {
 _cur_symbol_type = null; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol", 19, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl_term_list ::= decl_term_list COMMA new_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl_term_list ::= new_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_term_list", 20, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // decl_non_term_list ::= decl_non_term_list COMMA new_non_term_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decl_non_term_list ::= new_non_term_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("decl_non_term_list", 21, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // precedence_list ::= precedence_list preced 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // precedence_list ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precedence_list", 27, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // preced ::= PRECEDENCE assoc precterminal_list SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("preced", 28, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assoc ::= LEFT 
            {
 update_precedence(assoc.left); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assoc ::= RIGHT 
            {
 update_precedence(assoc.right); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assoc ::= NONASSOC 
            {
 update_precedence(assoc.nonassoc); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("assoc", 29, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // precterminal_list ::= precterminal_list COMMA precterminal_id 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // precterminal_list ::= precterminal_id 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_list", 30, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // precterminal_id ::= term_id 
            {
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
	
	  term.set_precedence(_cur_side, _cur_prec);
	
              CUP$result = parser.getSymbolFactory().newSymbol("precterminal_id", 31, term$, term$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term_id ::= symbol_id 
            {
              terminal RESULT = null;
              java_cup.runtime.Symbol sym$ = CUP$stack.peek();
              String sym = (String) sym$.value;
 RESULT = get_term(sym); 
              CUP$result = parser.getSymbolFactory().newSymbol("term_id", 43, sym$, sym$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // start_spec ::= START WITH symbol_id SEMI 
            {
              java_cup.runtime.Symbol start_name$ = CUP$stack.elementAt(CUP$size - 2);
              String start_name = (String) start_name$.value;
 non_terminal nt = get_nonterm(start_name);
	   if (nt != null) 
	     set_start_symbol(nt); 
	
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$stack.elementAt(CUP$size - 4), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // start_spec ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("start_spec", 14, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // production_list ::= production_list production 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // production_list ::= production 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("production_list", 15, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // production ::= symbol_id NT$2 COLON_COLON_EQUALS rhs_list SEMI 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.elementAt(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, lhs_id$, CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$2 ::= 
            {
              java_cup.runtime.Symbol lhs_id$ = CUP$stack.peek();
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = get_nonterm(lhs_id);
	
              CUP$result = parser.getSymbolFactory().newSymbol("NT$2", 49, lhs_id$, lhs_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // production ::= error SEMI 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("production", 22, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rhs_list ::= rhs_list BAR rhs 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$stack.elementAt(CUP$size - 3), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rhs_list ::= rhs 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("rhs_list", 25, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // prod_precedence ::= PERCENT_PREC term_id 
            {
              symbol RESULT = null;
              java_cup.runtime.Symbol term$ = CUP$stack.peek();
              terminal term = (terminal) term$.value;
 RESULT = term; 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$stack.elementAt(CUP$size - 2), term$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // prod_precedence ::= 
            {
              symbol RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_precedence", 46, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rhs ::= prod_part_list prod_precedence 
            {
              java_cup.runtime.Symbol precsym$ = CUP$stack.peek();
              symbol precsym = (symbol) precsym$.value;
              java_cup.runtime.Symbol rhs$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> rhs = (ArrayList<production_part>) rhs$.value;

	  if (lhs_nt != null) 
	    {
	      /* if we have no start non-terminal declared and this is 
		 the first production, make its lhs nt the start_nt 
		 and build a special start production for it. */
	      if (start_nt == null)
		{
		  set_start_symbol(lhs_nt);
		}

	      /* build the production */
	      build_production(lhs_nt, rhs, (terminal) precsym);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("rhs", 26, rhs$, precsym$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prod_part_list ::= prod_part_list prod_part 
            {
              ArrayList<production_part> RESULT = null;
              java_cup.runtime.Symbol prod$ = CUP$stack.peek();
              production_part prod = (production_part) prod$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 2);
              ArrayList<production_part> list = (ArrayList<production_part>) list$.value;
 RESULT = list; if (prod != null) RESULT.add(prod); 
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, list$, prod$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // prod_part_list ::= 
            {
              ArrayList<production_part> RESULT = null;
 RESULT = new ArrayList<production_part>(); 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part_list", 45, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prod_part ::= symbol_id opt_label 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
              java_cup.runtime.Symbol symid$ = CUP$stack.elementAt(CUP$size - 2);
              String symid = (String) symid$.value;
 
	  /* try to look up the id */
	  symbol symb = symbols.get(symid);

	  /* if that fails, symbol is undeclared */
	  if (symb == null)
	    {
	      if (ErrorManager.getManager().getErrorCount() == 0)
	        ErrorManager.getManager().emit_error("java_cup.runtime.Symbol \"" + symid + 
			       "\" has not been declared");
	      RESULT = null;
	    }
	  else
	    {
	      /* add a labeled production part */
	      RESULT = new symbol_part(symb, labid);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, symid$, labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prod_part ::= CODE_STRING 
            {
              production_part RESULT = null;
              java_cup.runtime.Symbol code_str$ = CUP$stack.peek();
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new action_part(code_str);
	
              CUP$result = parser.getSymbolFactory().newSymbol("prod_part", 44, code_str$, code_str$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_label ::= COLON label_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol labid$ = CUP$stack.peek();
              String labid = (String) labid$.value;
 RESULT = labid; 
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$stack.elementAt(CUP$size - 2), labid$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_label ::= 
            {
              String RESULT = null;
 RESULT = null; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_label", 35, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // multipart_id ::= multipart_id DOT robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol another_id$ = CUP$stack.peek();
              String another_id = (String) another_id$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, id$, another_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multipart_id ::= robust_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol an_id$ = CUP$stack.peek();
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              CUP$result = parser.getSymbolFactory().newSymbol("multipart_id", 40, an_id$, an_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // typearglist ::= typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
 RESULT = arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, arg$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // typearglist ::= typearglist COMMA typeargument 
            {
              String RESULT = null;
              java_cup.runtime.Symbol arg$ = CUP$stack.peek();
              String arg = (String) arg$.value;
              java_cup.runtime.Symbol list$ = CUP$stack.elementAt(CUP$size - 3);
              String list = (String) list$.value;
 RESULT = list + "," + arg; 
              CUP$result = parser.getSymbolFactory().newSymbol("typearglist", 37, list$, arg$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // typeargument ::= type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id.toString(); 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeargument ::= wildcard 
            {
              String RESULT = null;
              java_cup.runtime.Symbol w$ = CUP$stack.peek();
              String w = (String) w$.value;
 RESULT = w; 
              CUP$result = parser.getSymbolFactory().newSymbol("typeargument", 38, w$, w$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // wildcard ::= QUESTION 
            {
              String RESULT = null;
 RESULT = "?"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // wildcard ::= wildcard EXTENDS type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " extends "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // wildcard ::= wildcard SUPER type_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
              java_cup.runtime.Symbol w$ = CUP$stack.elementAt(CUP$size - 3);
              String w = (String) w$.value;
 RESULT = w + " super "+id; 
              CUP$result = parser.getSymbolFactory().newSymbol("wildcard", 39, w$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // import_id ::= multipart_id DOT STAR 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("import_id", 41, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type_id ::= multipart_id 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.peek();
              StringBuilder id = (StringBuilder) id$.value;
 RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_id ::= type_id LBRACK RBRACK 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_id ::= multipart_id LT typearglist GT 
            {
              StringBuilder RESULT = null;
              java_cup.runtime.Symbol types$ = CUP$stack.elementAt(CUP$size - 2);
              String types = (String) types$.value;
              java_cup.runtime.Symbol id$ = CUP$stack.elementAt(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              CUP$result = parser.getSymbolFactory().newSymbol("type_id", 42, id$, CUP$stack.peek(), RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol term_id$ = CUP$stack.peek();
              String term_id = (String) term_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + term_id + 
			   "\" has already been declared");
	    }
	  else
	    {
	      /* build a production_part and put it in the table */
	      terminal term = new terminal(term_id, _cur_symbol_type, terminals.size());
	      terminals.add(term);
	      symbols.put(term_id, term);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_term_id", 23, term_id$, term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_non_term_id ::= symbol_id 
            {
              java_cup.runtime.Symbol non_term_id$ = CUP$stack.peek();
              String non_term_id = (String) non_term_id$.value;
 
	  /* see if this non terminal has been declared before */
	  if (symbols.get(non_term_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error( "Symbol \"" + non_term_id + 
			                      "\" has already been declared");
	    }
	  else
	    {
	      /* build the non terminal object */
              non_terminal this_nt = 
		new non_terminal(non_term_id, _cur_symbol_type, non_terminals.size());
	      non_terminals.add(this_nt);

	      /* put it in the symbols table */ 
	      symbols.put(non_term_id, this_nt);
	    }
	
              CUP$result = parser.getSymbolFactory().newSymbol("new_non_term_id", 24, non_term_id$, non_term_id$);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // symbol_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // symbol_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // symbol_id ::= SUPER 
            {
              String RESULT = null;
 RESULT = "super"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // symbol_id ::= EXTENDS 
            {
              String RESULT = null;
 RESULT = "extends"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("symbol_id", 33, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // label_id ::= robust_id 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("label_id", 34, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // robust_id ::= ID 
            {
              String RESULT = null;
              java_cup.runtime.Symbol the_id$ = CUP$stack.peek();
              String the_id = (String) the_id$.value;
 RESULT = the_id; 
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, the_id$, the_id$, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // robust_id ::= OPTION 
            {
              String RESULT = null;
 RESULT = "option"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // robust_id ::= CODE 
            {
              String RESULT = null;
 RESULT = "code"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // robust_id ::= ACTION 
            {
              String RESULT = null;
 RESULT = "action"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // robust_id ::= PARSER 
            {
              String RESULT = null;
 RESULT = "parser"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // robust_id ::= TERMINAL 
            {
              String RESULT = null;
 RESULT = "terminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // robust_id ::= NON 
            {
              String RESULT = null;
 RESULT = "non"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // robust_id ::= NONTERMINAL 
            {
              String RESULT = null;
 RESULT = "nonterminal"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // robust_id ::= INIT 
            {
              String RESULT = null;
 RESULT = "init"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // robust_id ::= SCAN 
            {
              String RESULT = null;
 RESULT = "scan"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // robust_id ::= WITH 
            {
              String RESULT = null;
 RESULT = "with"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // robust_id ::= START 
            {
              String RESULT = null;
 RESULT = "start"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // robust_id ::= PRECEDENCE 
            {
              String RESULT = null;
 RESULT = "precedence"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // robust_id ::= LEFT 
            {
              String RESULT = null;
 RESULT = "left"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // robust_id ::= RIGHT 
            {
              String RESULT = null;
 RESULT = "right"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // robust_id ::= NONASSOC 
            {
              String RESULT = null;
 RESULT = "nonassoc"; 
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // robust_id ::= error 
            {
              String RESULT = null;

		ErrorManager.getManager().emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("robust_id", 36, CUP$sym, CUP$sym, RESULT);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_terminal ::= NON TERMINAL 
            {
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$stack.elementAt(CUP$size - 2), CUP$stack.peek());
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // non_terminal ::= NONTERMINAL 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("non_terminal", 11, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opt_semi ::= 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_semi ::= SEMI 
            {
              java_cup.runtime.Symbol CUP$sym = CUP$stack.peek();
              CUP$result = parser.getSymbolFactory().newSymbol("opt_semi", 10, CUP$sym, CUP$sym);
            }
          return CUP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
