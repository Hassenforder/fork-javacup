
//----------------------------------------------------
// The following code was generated by jh-javacup-1.3 20220517
// Sun Jun 19 16:58:46 GMT+01:00 2022
//----------------------------------------------------

package com.github.jhoenicke.javacup;

import com.github.jhoenicke.javacup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;

/** jh-javacup-1.3 20220517 generated parser.
  * @version Sun Jun 19 16:58:46 GMT+01:00 2022
  */
public class Parser extends com.github.jhoenicke.javacup.runtime.LRParser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(com.github.jhoenicke.javacup.runtime.Scanner s, com.github.jhoenicke.javacup.runtime.SymbolFactory sf) {super(s,sf);}
  /** The static parse table */
  static com.github.jhoenicke.javacup.runtime.ParseTable CUP$parse_table =
    new com.github.jhoenicke.javacup.runtime.ParseTable(new String[] {
    "\220\000\002\032\010\032\006\000\003\000\000" +
    "\013\003\006\000\006\002\001\003\001\006\002" +
    "\003\003\003\004\001\004\003\005\004\010\004" +
    "\014\004\015\004\016\004\017\005\057\000\017" +
    "\003\020\001\020\002\020\001\021\003\022\001" +
    "\023\004\024\001\024\001\024\001\025\003\026" +
    "\001\012\003\012\000\011\004\011\000\027\005" +
    "\060\000\027\002\030\003\046\002\046\000\031" +
    "\002\045\002\045\001\044\002\044\002\044\002" +
    "\044\001\034\002\036\003\036\001\037\003\040" +
    "\003\040\004\041\003\043\001\043\003\043\003" +
    "\035\001\056\000\051\000\050\002\052\002\054" +
    "\000\053\002\055\002\063\000\062\000\061\001" +
    "\061\002\233\u060d\u019b\u0519\257\375\233\u02df\233" +
    "\u02af\u011f\233\233\u017d\u04d7\245\251\233\233\u01e3" +
    "\233\363\u030d\u0221\u0317\233\u0313\u0203\235\233\u0495" +
    "\263\u01cd\u0149\233\233\233\233\u06f9\u0453\u02f3\233" +
    "\233\233\u06cf\u02b3\u0243\u06a5\233\233\u0201\u02c5\u0411" +
    "\u02f1\u02ef\u02e5\u03cf\233\u02a9\233\u0295\u01bf\u02ed\u05df" +
    "\233\233\233\u024d\u01bb\317\u0573\u01ef\233\u0313\u0311" +
    "\u01bb\u030f\u030d\u030b\u02c9\u011d\307\u0301\233\u067b\233" +
    "\u0651\u01af\u024d\u0587\u01b1\233\u038d\u034b\233\u02e1\u0259" +
    "\233\u016f\u0251\u020f\u0185\u0309\233\u02c7\u02f1\233\u017f" +
    "\233\u0237\233\u028d\u0295\233\u02dd\u028b\u0273\u0289\u024f" +
    "\233\233\u0201\u0179\235\263\233\233\233\233\233" +
    "\u05b3\233\363\u0127\u055b\233\233\u0201\237\233\233" +
    "\241\233\233\307\233\u0285\233\233\233\u0627\233" +
    "\233\233\233\233\u074d\000\000\000\176\000\056" +
    "\000\062\204\000\172\152\000\000\016\016\002" +
    "\060\000\202\106\106\172\152\066\000\052\052" +
    "\010\000\000\000\000\200\072\074\076\000\000" +
    "\112\206\054\054\000\000\000\000\150\014\000" +
    "\000\000\000\000\000\000\020\204\102\000\000" +
    "\000\000\064\156\164\000\000\000\000\000\154" +
    "\000\152\000\000\000\000\032\000\106\106\070" +
    "\000\104\000\000\000\000\000\160\000\000\050" +
    "\174\174\022\000\174\174\174\000\026\000\112" +
    "\100\000\120\000\210\162\162\162\162\170\170" +
    "\166\166\036\040\000\000\000\000\042\044\046" +
    "\034\030\000\110\214\000\000\144\134\000\212" +
    "\216\126\126\024\114\214\136\000\142\140\132" +
    "\000\220\130\122\146\124\213\000\033\000\211" +
    "\000\214\000\172\263\016\000\211\u0121\017\000" +
    "\211\u0123\213\u012b\003\000\033\131\214\u012b\172" +
    "\u0109\036\141\173\263\211\u0125\036\143\211\u0127" +
    "\213\u010d\213\u010d\213\u010d\217\000\016\033\173" +
    "\u0109\213\u010d\213\u010d\213\u010d\003\033\104\263" +
    "\213\u010d\213\u010d\213\u010d\213\u010d\213\u010d\213" +
    "\u010d\213\u010d\213\u010d\104\265\213\u010d\213\u010f" +
    "\217\u010d\217\u010d\217\u010d\203\000\173\267\173" +
    "\271\217\u010d\217\u010d\217\u010d\004\041\120\045" +
    "\217\u010d\217\u010d\217\u010d\217\u010d\217\u010d\217" +
    "\u010d\217\u010d\217\u010d\120\115\217\u010d\217\u010f" +
    "\203\u010d\203\u010d\203\u010d\011\055\117\315\117" +
    "\317\203\u010d\203\u010d\203\u010d\204\u011b\024\045" +
    "\203\u010d\203\u010d\203\u010d\203\u010d\203\u010d\203" +
    "\u010d\203\u010d\203\u010d\024\115\203\u010d\203\u010f" +
    "\011\057\011\057\011\057\011\027\011\027\011" +
    "\027\011\057\011\057\011\057\011\027\011\027" +
    "\011\057\011\057\011\057\011\061\011\061\011" +
    "\057\011\057\011\057\011\027\011\057\141\025" +
    "\040\145\040\147\040\013\040\015\040\017\040" +
    "\151\040\153\171\263\014\071\152\u0105\144\000" +
    "\014\073\144\375\141\203\171\131\040\155\171" +
    "\u0109\040\157\141\027\141\027\141\027\141\027" +
    "\141\027\141\027\141\027\141\027\141\027\141" +
    "\027\141\027\141\027\141\027\141\027\131\025" +
    "\126\327\141\027\141\027\141\027\141\027\141" +
    "\027\112\301\103\263\074\251\112\073\001\013" +
    "\001\015\001\017\131\203\103\131\037\141\103" +
    "\265\112\303\131\027\131\027\131\027\131\027" +
    "\131\027\131\027\131\027\131\027\131\027\131" +
    "\027\131\027\131\027\131\027\131\027\106\273" +
    "\106\127\131\027\131\027\131\027\131\027\131" +
    "\027\061\025\032\000\210\u011d\170\263\061\217" +
    "\170\073\032\073\143\000\210\u011f\143\373\170" +
    "\131\032\131\170\u0109\170\133\032\133\022\105" +
    "\022\107\022\111\026\123\061\137\061\137\061" +
    "\137\061\137\061\137\061\137\061\137\061\137" +
    "\061\137\061\137\061\137\061\137\061\137\061" +
    "\137\055\025\154\u0107\061\137\061\137\061\137" +
    "\061\137\061\137\142\000\102\263\142\371\102" +
    "\073\137\000\127\116\137\357\055\203\102\131" +
    "\165\131\102\265\102\133\055\027\055\027\055" +
    "\027\055\027\055\027\055\027\055\027\055\027" +
    "\055\027\055\027\055\027\055\027\055\027\055" +
    "\027\221\025\163\131\055\027\055\027\055\027" +
    "\055\027\055\027\164\073\162\073\156\073\073" +
    "\245\073\247\164\131\162\131\156\131\164\133" +
    "\162\133\156\133\157\131\221\u0133\221\u0133\221" +
    "\u0133\221\u0133\221\u0133\221\u0133\221\u0133\221\u0133" +
    "\221\u0133\221\u0133\221\u0133\221\u0133\221\u0133\221" +
    "\u0133\147\025\054\201\221\u0133\221\u0133\221\u0133" +
    "\221\u0133\221\u0133\071\013\071\015\071\017\010" +
    "\013\010\015\010\017\136\000\071\045\136\355" +
    "\116\313\010\045\062\221\147\235\147\235\147" +
    "\235\147\235\147\235\147\235\147\235\147\235" +
    "\147\235\147\235\147\235\147\235\147\235\147" +
    "\235\145\025\006\043\147\235\147\235\147\235" +
    "\147\235\147\235\031\125\031\127\027\066\027" +
    "\066\161\267\161\271\075\253\065\231\064\227" +
    "\150\173\047\173\066\233\145\377\145\377\145" +
    "\377\145\377\145\377\145\377\145\377\145\377" +
    "\145\377\145\377\145\377\145\377\145\377\145" +
    "\377\134\025\121\115\145\377\145\377\145\377" +
    "\145\377\145\377\025\115\115\311\114\307\113" +
    "\305\111\277\110\275\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\134\027\134\027\134" +
    "\027\134\027\134\027\134\027\134\027\134\027" +
    "\134\027\134\027\134\027\134\027\134\027\134" +
    "\027\133\025\233\001\134\027\134\027\134\027" +
    "\134\027\134\027\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\133\027\133\027\133" +
    "\027\133\027\133\027\133\027\133\027\133\027" +
    "\133\027\133\027\133\027\133\027\133\027\133" +
    "\027\067\025\233\001\133\027\133\027\133\027" +
    "\133\027\133\027\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\067\235\067\235\067" +
    "\235\067\235\067\235\067\235\067\235\067\235" +
    "\067\235\067\235\067\235\067\235\067\235\067" +
    "\235\063\025\233\001\067\235\067\235\067\235" +
    "\067\235\067\235\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\063\223\063\027\063" +
    "\027\063\027\063\027\063\027\063\027\063\027" +
    "\063\027\063\027\063\027\063\027\063\027\063" +
    "\027\046\025\233\001\063\027\063\027\063\027" +
    "\063\027\063\027\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\046\171\046\171\046" +
    "\171\046\171\046\171\046\171\046\171\046\171" +
    "\046\171\046\171\046\171\046\171\046\171\046" +
    "\171\035\025\233\001\046\171\046\171\046\171" +
    "\046\171\046\171\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\035\137\035\137\035" +
    "\137\035\137\035\137\035\137\035\137\035\137" +
    "\035\137\035\137\035\137\035\137\035\137\035" +
    "\137\015\025\233\001\035\137\035\137\035\137" +
    "\035\137\035\137\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\015\027\015\027\015" +
    "\027\015\027\015\027\015\027\015\027\015\027" +
    "\015\027\015\027\015\027\015\027\015\027\015" +
    "\027\002\025\233\001\015\027\015\027\015\027" +
    "\015\027\015\027\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\233\001" +
    "\233\001\233\001\233\001\002\027\002\027\002" +
    "\027\002\027\002\027\002\027\002\027\002\027" +
    "\002\027\002\027\002\027\002\027\002\027\002" +
    "\027\205\255\205\004\002\027\002\027\002\027" +
    "\002\027\002\027\233\001\233\001\233\001\233" +
    "\001\233\001\233\001\233\001\233\001\105\263" +
    "\233\001\233\001\233\001\205\257\205\257\205" +
    "\257\130\255\130\006\105\265\205\257\205\257" +
    "\205\257\233\001\233\001\205\257\205\257\205" +
    "\257\205\257\205\257\205\257\205\257\205\257" +
    "\233\001\205\257\233\001\130\257\130\257\130" +
    "\257\201\255\105\267\105\271\130\257\130\257" +
    "\130\257\233\001\233\001\130\257\130\257\130" +
    "\257\130\257\130\257\130\257\130\257\130\257" +
    "\233\001\130\257\233\001\201\257\201\257\201" +
    "\257\076\255\233\001\233\001\201\257\201\257" +
    "\201\257\233\001\233\001\201\257\201\257\201" +
    "\257\201\257\201\257\201\257\201\257\201\257" +
    "\233\001\201\257\233\001\076\257\076\257\076" +
    "\257\233\001\000\003\233\001\076\257\076\257" +
    "\076\257\233\001\233\001\076\257\076\257\076" +
    "\257\076\257\076\257\076\257\076\257\076\257" +
    "\233\001\076\257\000\005\000\012\233\001\000" +
    "\012\000\012\000\012\000\012\000\012\000\012" +
    "\000\012\233\001\233\001\233\001\233\001\233" +
    "\001\225\u0135\225\u0135\225\u0135\000\012\233\001" +
    "\000\012\225\u0135\225\u0135\225\u0135\233\001\233" +
    "\001\225\u0135\225\u0135\225\u0135\225\u0135\225\u0135" +
    "\225\u0135\225\u0135\225\u0135\233\001\225\u0135\125" +
    "\325\125\325\125\325\233\001\233\001\233\001" +
    "\125\325\125\325\125\325\233\001\233\001\125" +
    "\325\125\325\125\325\125\325\125\325\125\325" +
    "\125\325\125\325\233\001\125\325\123\165\123" +
    "\165\123\165\233\001\233\001\233\001\123\165" +
    "\123\165\123\165\233\001\233\001\123\165\123" +
    "\165\123\165\123\165\123\165\123\165\123\165" +
    "\123\165\233\001\123\165\056\061\056\061\056" +
    "\061\233\001\233\001\233\001\056\061\056\061" +
    "\056\061\233\001\233\001\056\061\056\061\056" +
    "\061\056\061\056\061\056\061\056\061\056\061" +
    "\233\001\056\061\053\061\053\061\053\061\233" +
    "\001\233\001\233\001\053\061\053\061\053\061" +
    "\233\001\233\001\053\061\053\061\053\061\053" +
    "\061\053\061\053\061\053\061\053\061\233\001" +
    "\053\061\045\165\045\165\045\165\233\001\233" +
    "\001\233\001\045\165\045\165\045\165\233\001" +
    "\233\001\045\165\045\165\045\165\045\165\045" +
    "\165\045\165\045\165\045\165\233\001\045\165" +
    "\233\001\233\001\301\007\010\201\000\117\117" +
    "\200\003\142\207\150\016\040\131\006\020\047" +
    "\041\042\050\006\046\040\010\011\050\202\173" +
    "\201\117\116\116\063\004\106\106\076\201\114" +
    "\033\016\017\150\052\030\222\021\224\047\111" +
    "\010\055\070\070\045\001\070\077\070\070\077" +
    "\232\145\070\070\070\071\011\205\030\224\151" +
    "\127\155\013\112\072\127\023\011\000\040\120" +
    "\061\152\071\231\210\130\231\205\240\175\071" +
    "\170\165\177\213\142\126\124\103\057\002\023" +
    "\074\120\121\057\210\210\155\206\023\011\127" +
    "\206\024\013\036\037\211\212\227\130\211\226" +
    "\227\127\055\176\125\175\062\213\214\230\023" +
    "\206\131\125\024\025\157\174\071\130\211\212" +
    "\042\073\073\031\031\013\164\072\165\013\014" +
    "\213\214\030\167\013\032\166\033\013\170\056" +
    "\171\172\172\173\013\102\056\103\104\104\105" +
    "\013\156\154\157\001\160\161\013\162\001\163"
    });

  /** Return parse table */
  protected com.github.jhoenicke.javacup.runtime.ParseTable parse_table() {
    return CUP$parse_table;
  }

  /** Instance of action encapsulation class. */
  protected Action$ action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new Action$(this);
    }

  /** Invoke a user supplied parse action. */
  public com.github.jhoenicke.javacup.runtime.Symbol do_action(
    int                        act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> stack)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$do_action(act_num, stack);
  }



  Options options;
  
 /* override error routines */
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      if (info instanceof com.github.jhoenicke.javacup.runtime.Symbol) ErrorManager.getManager().emit_fatal(message+ "\nCan't recover from previous error(s), giving up.",(com.github.jhoenicke.javacup.runtime.Symbol)info);
      else ErrorManager.getManager().emit_fatal(message + "\nCan't recover from previous error(s), giving up.",cur_token);
      throw new RuntimeException("jcup fatal error parsing grammar");
    }

    public void report_error(String message, Object info)
    {
      if (info instanceof com.github.jhoenicke.javacup.runtime.Symbol)
         ErrorManager.getManager().emit_error(message,(com.github.jhoenicke.javacup.runtime.Symbol)info);
      else
         ErrorManager.getManager().emit_error(message,cur_token);
    }


/** Cup generated class to encapsulate user supplied action code.*/
static class Action$ {


  Grammar grammar = new Grammar();

  /** table of declared symbols -- contains production parts indexed by name */
  private HashMap<String, GrammarSymbol> symbols = new HashMap<String, GrammarSymbol>();

  /** left hand side non terminal of the current production */
  private NonTerminal lhs_nt;

  {
    /* declare "error" and "EOF" as a symbols */
    symbols.put("error", Terminal.error);
    symbols.put("EOF", Terminal.EOF);
  }  

  /** true, if declaring non-terminals. */
  boolean _cur_is_nonterm;
  /** Current symbol type */
  String _cur_symbol_type;

  /** Current precedence number */
  int _cur_prec = 0;

  /** Current precedence side */
  int _cur_side = Assoc.NOPREC;

  /** update the precedences we are declaring */
  protected void update_precedence(int p)
    {
      _cur_side = p;
      _cur_prec++;
    }
  
  private Terminal getTerminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id)
    {
      GrammarSymbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof Terminal))
	{
	    ErrorManager.getManager().emit_warning("Terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (Terminal)sym;
    }
  
  private NonTerminal getNonterminal(com.github.jhoenicke.javacup.runtime.Symbol location, String id)
    {
      GrammarSymbol sym = symbols.get(id);

      /* if it wasn't declared of the right type, emit a message */
      if (!(sym instanceof NonTerminal))
	{
	    ErrorManager.getManager().emit_warning("Non-terminal \"" + id + 
	    "\" has not been declared", location);
	  return null;
	}
      return (NonTerminal)sym;
    }

  private final Parser parser;

  /** Constructor */
  Action$(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  @SuppressWarnings({ "unused", "unchecked" })
  public final com.github.jhoenicke.javacup.runtime.Symbol CUP$do_action(
    int                        CUP$act_num,
    java.util.ArrayList<com.github.jhoenicke.javacup.runtime.Symbol> CUP$stack)
    throws java.lang.Exception
    {
      /* Stack size for peeking into the stack */
      int CUP$size = CUP$stack.size();

      /* select the action based on the action number */
      switch (CUP$act_num)
        {
          // $START ::= spec EOF 
          case 0:
            {
              Object RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$rhs$ = CUP$stack.get(CUP$size - 2);
              Grammar CUP$rhs = (Grammar) CUP$rhs$.value;
RESULT = CUP$rhs;
/* ACCEPT */
parser.done_parsing();
              return parser.getSymbolFactory().newSymbol("$START", 0, CUP$rhs$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= package_spec import_spec$0_many code_parts symbol$1_many preced$0_many expect_spec start_spec production$1_many 
          case 1:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 26, CUP$stack.get(CUP$size - 8), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // spec ::= error symbol$1_many preced$0_many expect_spec start_spec production$1_many 
          case 2:
            {
              Grammar RESULT;
 RESULT = grammar; 
              return parser.getSymbolFactory().newSymbol("spec", 26, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1), RESULT);
            }

          // package_spec ::= PACKAGE multipart_id SEMI 
          case 3:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save the package name */
	  parser.options.setOption("package", id.toString());
	
              return parser.getSymbolFactory().newSymbol("package_spec", 0, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // package_spec ::= 
          case 4:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("package_spec", 0, CUP$sym, CUP$sym);
            }

          // import_spec ::= IMPORT import_id SEMI 
          case 5:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 2);
              StringBuilder id = (StringBuilder) id$.value;

	  /* save this import on the imports list */
	  parser.options.import_list.add(id.toString());
	
              return parser.getSymbolFactory().newSymbol("import_spec", 11, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // code_parts ::= 
          case 6:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("code_parts", 6, CUP$sym, CUP$sym);
            }

          // code_parts ::= code_parts code_part 
          case 7:
            {
              return parser.getSymbolFactory().newSymbol("code_parts", 6, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id SEMI 
          case 8:
            {
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 2);
              StringBuilder name = (StringBuilder) name$.value;
 parser.options.setOption("parser", name.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 1, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // parser_spec ::= PARSER multipart_id LT typearglist GT SEMI 
          case 9:
            {
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 3);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol name$ = CUP$stack.get(CUP$size - 5);
              StringBuilder name = (StringBuilder) name$.value;
 parser.options.setOption("parser", name.toString());
	    parser.options.setOption("typearg", types.toString()); 
              return parser.getSymbolFactory().newSymbol("parser_spec", 1, CUP$stack.get(CUP$size - 6), CUP$stack.get(CUP$size - 1));
            }

          // option_spec ::= OPTION option_list SEMI 
          case 10:
            {
              return parser.getSymbolFactory().newSymbol("option_spec", 2, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_list ::= option_list COMMA option_ 
          case 11:
            {
              return parser.getSymbolFactory().newSymbol("option_list", 3, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // option_ ::= robust_id 
          case 12:
            {
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 1);
              String opt = (String) opt$.value;
 parser.options.setOption(opt); 
              return parser.getSymbolFactory().newSymbol("option_", 4, opt$, opt$);
            }

          // option_ ::= robust_id EQUALS robust_id 
          case 13:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 1);
              String val = (String) val$.value;
              com.github.jhoenicke.javacup.runtime.Symbol opt$ = CUP$stack.get(CUP$size - 3);
              String opt = (String) opt$.value;
 parser.options.setOption(opt, val); 
              return parser.getSymbolFactory().newSymbol("option_", 4, opt$, val$);
            }

          // action_code_part ::= ACTION CODE CODE_STRING SEMI$0_1 
          case 14:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.options.action_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant action code (skipping)");
	  else /* save the user included code string */
	    parser.options.action_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("action_code_part", 5, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // parser_code_part ::= PARSER CODE CODE_STRING SEMI$0_1 
          case 15:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.options.parser_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant parser code (skipping)");
	  else /* save the user included code string */
	    parser.options.parser_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("parser_code_part", 8, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // init_code ::= INIT WITH CODE_STRING SEMI$0_1 
          case 16:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.options.init_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant init code (skipping)");
	  else /* save the user code */
	    parser.options.init_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("init_code", 12, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // scan_code ::= SCAN WITH CODE_STRING SEMI$0_1 
          case 17:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.options.scan_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant scan code (skipping)");
	  else /* save the user code */
	    parser.options.scan_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("scan_code", 13, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // after_reduce_code ::= AFTER REDUCE CODE_STRING SEMI$0_1 
          case 18:
            {
              com.github.jhoenicke.javacup.runtime.Symbol user_code$ = CUP$stack.get(CUP$size - 2);
              String user_code = (String) user_code$.value;

	  if (parser.options.after_reduce_code!=null)
	    ErrorManager.getManager().emit_warning("Redundant after reduce code (skipping)");
	  else /* save the user code */
	    parser.options.after_reduce_code = user_code;
	
              return parser.getSymbolFactory().newSymbol("after_reduce_code", 14, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // symbol ::= terminal_non_terminal type_id NT$0 decl_symbol_list SEMI 
          case 19:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 5), CUP$stack.get(CUP$size - 1));
            }

          // NT$0 ::= 
          case 20:
            {
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
 _cur_symbol_type = id.toString(); 
              return parser.getSymbolFactory().newSymbol("NT$0", 47, CUP$stack.get(CUP$size - 2), id$);
            }

          // symbol ::= terminal_non_terminal decl_symbol_list SEMI 
          // symbol ::= terminal_non_terminal error SEMI 
          case 21:
            {
 _cur_symbol_type = null; 
              return parser.getSymbolFactory().newSymbol("symbol", 15, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= TERMINAL 
          case 22:
            {
 _cur_is_nonterm = false; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // terminal_non_terminal ::= NON TERMINAL 
          case 23:
            {
 _cur_is_nonterm = true; 
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // terminal_non_terminal ::= NONTERMINAL 
          case 24:
            {
 _cur_is_nonterm = true; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("terminal_non_terminal", 16, CUP$sym, CUP$sym);
            }

          // decl_symbol_list ::= decl_symbol_list COMMA new_symbol_id 
          case 25:
            {
              return parser.getSymbolFactory().newSymbol("decl_symbol_list", 17, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // new_symbol_id ::= symbol_id 
          case 26:
            {
              com.github.jhoenicke.javacup.runtime.Symbol sym_id$ = CUP$stack.get(CUP$size - 1);
              String sym_id = (String) sym_id$.value;
 
	  /* see if this terminal has been declared before */
	  if (symbols.get(sym_id) != null)
	    {
	      /* issue a message */
	      ErrorManager.getManager().emit_error("Symbol \"" + sym_id + 
			   "\" has already been declared", sym_id$);
	    }
	  else
	    {
	      /* build the symbol and put it in the symbol table */
	      GrammarSymbol sym;
	      if (_cur_is_nonterm) 
	      	sym = grammar.addNonterminal(sym_id, _cur_symbol_type);
	      else
	      	sym = grammar.addTerminal(sym_id, _cur_symbol_type);
	      symbols.put(sym_id, sym);
	    }
	
              return parser.getSymbolFactory().newSymbol("new_symbol_id", 18, sym_id$, sym_id$);
            }

          // preced ::= PRECEDENCE assoc precterminal_list SEMI 
          case 27:
            {
              return parser.getSymbolFactory().newSymbol("preced", 19, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // assoc ::= LEFT 
          case 28:
            {
 update_precedence(Assoc.LEFT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // assoc ::= RIGHT 
          case 29:
            {
 update_precedence(Assoc.RIGHT); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // assoc ::= NONASSOC 
          case 30:
            {
 update_precedence(Assoc.NONASSOC); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("assoc", 20, CUP$sym, CUP$sym);
            }

          // precterminal_list ::= precterminal_list COMMA precterminal_id 
          case 31:
            {
              return parser.getSymbolFactory().newSymbol("precterminal_list", 21, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // precterminal_id ::= symbol_id 
          case 32:
            {
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
	
	  getTerminal(term$, term).setPrecedence(_cur_side, _cur_prec);
	
              return parser.getSymbolFactory().newSymbol("precterminal_id", 22, term$, term$);
            }

          // expect_spec ::= EXPECT robust_id SEMI 
          case 33:
            {
              com.github.jhoenicke.javacup.runtime.Symbol val$ = CUP$stack.get(CUP$size - 2);
              String val = (String) val$.value;
 parser.options.setOption("expect", val); 
              return parser.getSymbolFactory().newSymbol("expect_spec", 10, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // expect_spec ::= 
          case 34:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("expect_spec", 10, CUP$sym, CUP$sym);
            }

          // start_spec ::= START WITH symbol_id SEMI 
          case 35:
            {
              com.github.jhoenicke.javacup.runtime.Symbol start_name$ = CUP$stack.get(CUP$size - 2);
              String start_name = (String) start_name$.value;
 NonTerminal nt = getNonterminal(start_name$, start_name);
	   if (nt != null) 
	     grammar.setStartSymbol(nt); 
	
              return parser.getSymbolFactory().newSymbol("start_spec", 9, CUP$stack.get(CUP$size - 4), CUP$stack.get(CUP$size - 1));
            }

          // start_spec ::= 
          case 36:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("start_spec", 9, CUP$sym, CUP$sym);
            }

          // production ::= symbol_id NT$1 COLON_COLON_EQUALS rhs_list SEMI 
          case 37:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 5);
              String lhs_id = (String) lhs_id$.value;
              return parser.getSymbolFactory().newSymbol("production", 23, lhs_id$, CUP$stack.get(CUP$size - 1));
            }

          // NT$1 ::= 
          case 38:
            {
              com.github.jhoenicke.javacup.runtime.Symbol lhs_id$ = CUP$stack.get(CUP$size - 1);
              String lhs_id = (String) lhs_id$.value;

	  /* lookup the lhs nt */
	  lhs_nt = getNonterminal(lhs_id$, lhs_id);
	
              return parser.getSymbolFactory().newSymbol("NT$1", 48, lhs_id$, lhs_id$);
            }

          // production ::= error SEMI 
          case 39:
            {
              return parser.getSymbolFactory().newSymbol("production", 23, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // rhs_list ::= rhs_list BAR rhs 
          case 40:
            {
              return parser.getSymbolFactory().newSymbol("rhs_list", 24, CUP$stack.get(CUP$size - 3), CUP$stack.get(CUP$size - 1));
            }

          // prod_precedence ::= PERCENT_PREC symbol_id 
          case 41:
            {
              GrammarSymbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol term$ = CUP$stack.get(CUP$size - 1);
              String term = (String) term$.value;
 RESULT = getTerminal(term$, term); 
              return parser.getSymbolFactory().newSymbol("prod_precedence", 38, CUP$stack.get(CUP$size - 2), term$, RESULT);
            }

          // prod_precedence ::= 
          case 42:
            {
              GrammarSymbol RESULT;
 RESULT = null; 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_precedence", 38, CUP$sym, CUP$sym, RESULT);
            }

          // rhs ::= prod_part$0_many prod_precedence 
          case 43:
            {
              com.github.jhoenicke.javacup.runtime.Symbol precsym$ = CUP$stack.get(CUP$size - 1);
              GrammarSymbol precsym = (GrammarSymbol) precsym$.value;
              com.github.jhoenicke.javacup.runtime.Symbol rhs$ = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> CUP$list$rhs = (java.util.ArrayList<ProductionPart>) rhs$.value;
              ProductionPart[] rhs = CUP$list$rhs.toArray(new ProductionPart[CUP$list$rhs.size()]);

	  if (lhs_nt != null) 
	    {
	      /* build the production */
	      ArrayList<ProductionPart> rhs_list = 
	      	new ArrayList<ProductionPart>(rhs.length);
	      rhs_list.addAll(Arrays.asList(rhs));
	      grammar.buildProduction(lhs_nt, rhs_list, (Terminal) precsym);
	    }
	
              return parser.getSymbolFactory().newSymbol("rhs", 25, rhs$, precsym$);
            }

          // prod_part ::= wild_symbol_id label_id$0_1 
          case 44:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
              com.github.jhoenicke.javacup.runtime.Symbol symb$ = CUP$stack.get(CUP$size - 2);
              GrammarSymbol symb = (GrammarSymbol) symb$.value;
 
	  /* add a labeled production part */
	  RESULT = new SymbolPart(symb, labid);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 37, symb$, labid$, RESULT);
            }

          // prod_part ::= CODE_STRING 
          case 45:
            {
              ProductionPart RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol code_str$ = CUP$stack.get(CUP$size - 1);
              String code_str = (String) code_str$.value;
 
	  /* add a new production part */
	  RESULT = new ActionPart(code_str);
	
              return parser.getSymbolFactory().newSymbol("prod_part", 37, code_str$, code_str$, RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id STAR 
          case 46:
            {
              GrammarSymbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              GrammarSymbol s = (GrammarSymbol) s$.value;
 RESULT = grammar.getStarSymbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id PLUS 
          case 47:
            {
              GrammarSymbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              GrammarSymbol s = (GrammarSymbol) s$.value;
 RESULT = grammar.getPlusSymbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= wild_symbol_id QUESTION 
          case 48:
            {
              GrammarSymbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol s$ = CUP$stack.get(CUP$size - 2);
              GrammarSymbol s = (GrammarSymbol) s$.value;
 RESULT = grammar.getOptSymbol(s); 
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, s$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // wild_symbol_id ::= symbol_id 
          case 49:
            {
              GrammarSymbol RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol symid$ = CUP$stack.get(CUP$size - 1);
              String symid = (String) symid$.value;
 /* try to look up the id */
	   GrammarSymbol symb = symbols.get(symid);

	   /* if that fails, symbol is undeclared */
	   if (symb == null)
	     {
	         ErrorManager.getManager().emit_error("Symbol \"" + symid + 
			        "\" has not been declared", symid$);
	       RESULT = null;
	     }
	   else
	     {
           RESULT = symb; 
         }
    
              return parser.getSymbolFactory().newSymbol("wild_symbol_id", 36, symid$, symid$, RESULT);
            }

          // label_id ::= COLON robust_id 
          case 50:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol labid$ = CUP$stack.get(CUP$size - 1);
              String labid = (String) labid$.value;
 RESULT = labid; 
              return parser.getSymbolFactory().newSymbol("label_id", 28, CUP$stack.get(CUP$size - 2), labid$, RESULT);
            }

          // multipart_id ::= multipart_id DOT robust_id 
          case 51:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol another_id$ = CUP$stack.get(CUP$size - 1);
              String another_id = (String) another_id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('.').append(another_id); RESULT=id; 
              return parser.getSymbolFactory().newSymbol("multipart_id", 30, id$, another_id$, RESULT);
            }

          // multipart_id ::= robust_id 
          case 52:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol an_id$ = CUP$stack.get(CUP$size - 1);
              String an_id = (String) an_id$.value;
 RESULT = new StringBuilder(an_id); 
              return parser.getSymbolFactory().newSymbol("multipart_id", 30, an_id$, an_id$, RESULT);
            }

          // import_id ::= multipart_id DOT STAR 
          case 53:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append(".*"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("import_id", 31, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= type_id LBRACK RBRACK 
          case 54:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 3);
              StringBuilder id = (StringBuilder) id$.value;
 id.append("[]"); RESULT = id; 
              return parser.getSymbolFactory().newSymbol("type_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // type_id ::= multipart_id LT typearglist GT 
          case 55:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol types$ = CUP$stack.get(CUP$size - 2);
              StringBuilder types = (StringBuilder) types$.value;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 4);
              StringBuilder id = (StringBuilder) id$.value;
 id.append('<').append(types).append('>');
            RESULT=id; 
              return parser.getSymbolFactory().newSymbol("type_id", 32, id$, CUP$stack.get(CUP$size - 1), RESULT);
            }

          // typearglist ::= typearglist COMMA typeargument 
          case 56:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol arg$ = CUP$stack.get(CUP$size - 1);
              StringBuilder arg = (StringBuilder) arg$.value;
              com.github.jhoenicke.javacup.runtime.Symbol list$ = CUP$stack.get(CUP$size - 3);
              StringBuilder list = (StringBuilder) list$.value;
 RESULT = list.append(",").append(arg); 
              return parser.getSymbolFactory().newSymbol("typearglist", 33, list$, arg$, RESULT);
            }

          // wildcard ::= QUESTION 
          case 57:
            {
              StringBuilder RESULT;
 RESULT = new StringBuilder("?"); 
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("wildcard", 35, CUP$sym, CUP$sym, RESULT);
            }

          // wildcard ::= wildcard EXTENDS type_id 
          case 58:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" extends ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 35, w$, id$, RESULT);
            }

          // wildcard ::= wildcard SUPER type_id 
          case 59:
            {
              StringBuilder RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol id$ = CUP$stack.get(CUP$size - 1);
              StringBuilder id = (StringBuilder) id$.value;
              com.github.jhoenicke.javacup.runtime.Symbol w$ = CUP$stack.get(CUP$size - 3);
              StringBuilder w = (StringBuilder) w$.value;
 RESULT = w.append(" super ").append(id); 
              return parser.getSymbolFactory().newSymbol("wildcard", 35, w$, id$, RESULT);
            }

          // robust_id ::= error 
          case 60:
            {
              String RESULT;
              com.github.jhoenicke.javacup.runtime.Symbol e$ = CUP$stack.get(CUP$size - 1);

		ErrorManager.getManager().emit_error("Illegal use of reserved word", e$);
		RESULT="ILLEGAL";
	
              return parser.getSymbolFactory().newSymbol("robust_id", 29, e$, e$, RESULT);
            }

          // SEMI$0_1 ::= 
          case 61:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("SEMI$0_1", 46, CUP$sym, CUP$sym);
            }

          // import_spec$0_many ::= 
          case 62:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("import_spec$0_many", 41, CUP$sym, CUP$sym);
            }

          // import_spec$1_many ::= import_spec$1_many import_spec 
          case 63:
            {
              return parser.getSymbolFactory().newSymbol("import_spec$1_many", 40, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // symbol$1_many ::= symbol$1_many symbol 
          case 64:
            {
              return parser.getSymbolFactory().newSymbol("symbol$1_many", 42, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // preced$0_many ::= 
          case 65:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("preced$0_many", 44, CUP$sym, CUP$sym);
            }

          // preced$1_many ::= preced$1_many preced 
          case 66:
            {
              return parser.getSymbolFactory().newSymbol("preced$1_many", 43, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // production$1_many ::= production$1_many production 
          case 67:
            {
              return parser.getSymbolFactory().newSymbol("production$1_many", 45, CUP$stack.get(CUP$size - 2), CUP$stack.get(CUP$size - 1));
            }

          // label_id$0_1 ::= 
          case 68:
            {
              String RESULT;
RESULT=null;
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("label_id$0_1", 51, CUP$sym, CUP$sym, RESULT);
            }

          // prod_part$0_many ::= 
          case 69:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$sym = CUP$stack.get(CUP$size - 1);
              return parser.getSymbolFactory().newSymbol("prod_part$0_many", 50, CUP$sym, CUP$sym, new java.util.ArrayList<ProductionPart>());
            }

          // prod_part$1_many ::= prod_part 
          case 70:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 1);
              java.util.ArrayList<ProductionPart> RESULT = new java.util.ArrayList<ProductionPart>();
              RESULT.add((ProductionPart) CUP$0.value);
              return parser.getSymbolFactory().newSymbol("prod_part$1_many", 49, CUP$0, CUP$0, RESULT);
            }

          // prod_part$1_many ::= prod_part$1_many prod_part 
          case 71:
            {
              com.github.jhoenicke.javacup.runtime.Symbol CUP$1 = CUP$stack.get(CUP$size - 1);
              com.github.jhoenicke.javacup.runtime.Symbol CUP$0 = CUP$stack.get(CUP$size - 2);
              java.util.ArrayList<ProductionPart> RESULT = (java.util.ArrayList<ProductionPart>) CUP$0.value;
              RESULT.add((ProductionPart) CUP$1.value);
              return parser.getSymbolFactory().newSymbol("prod_part$1_many", 49, CUP$0, CUP$1, RESULT);
            }

          /* . . . . . .*/
          default:
            throw new InternalError(
               "Invalid action number found in internal parse table");

        }
    }
}

}
